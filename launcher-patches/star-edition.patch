From 84875e0f9afd6f3952fe09b368ec3e69d5f4d73d Mon Sep 17 00:00:00 2001
From: catboxed <amirkahariri2007@gmail.com>
Date: Sun, 4 Aug 2024 11:40:49 +0300
Subject: [PATCH 01/33] Initial commit

---
 Log4j-config.xsd                              | 133 ++++
 Log4j-events.dtd                              |  64 ++
 Log4j-events.xsd                              |  74 +++
 META-INF/MANIFEST.MF                          |   4 +
 META-INF/log4j-provider.properties            |  18 +
 com/mojang/authlib/Agent.java                 |  25 +
 com/mojang/authlib/AuthenticationService.java |  11 +
 .../authlib/BaseAuthenticationService.java    |   6 +
 .../authlib/BaseUserAuthentication.java       | 259 ++++++++
 com/mojang/authlib/GameProfile.java           |  79 +++
 com/mojang/authlib/GameProfileRepository.java |   5 +
 .../authlib/HttpAuthenticationService.java    | 183 ++++++
 .../authlib/HttpUserAuthentication.java       |  11 +
 com/mojang/authlib/ProfileLookupCallback.java |   7 +
 com/mojang/authlib/UserAuthentication.java    |  39 ++
 com/mojang/authlib/UserType.java              |  35 +
 .../exceptions/AuthenticationException.java   |  18 +
 .../AuthenticationUnavailableException.java   |  18 +
 .../InvalidCredentialsException.java          |  18 +
 .../exceptions/UserMigratedException.java     |  18 +
 .../legacy/LegacyAuthenticationService.java   |  30 +
 .../legacy/LegacyMinecraftSessionService.java |  65 ++
 .../legacy/LegacyUserAuthentication.java      |  91 +++
 .../BaseMinecraftSessionService.java          |  15 +
 .../HttpMinecraftSessionService.java          |  13 +
 .../minecraft/InsecureTextureException.java   |  42 ++
 .../minecraft/MinecraftProfileTexture.java    |  41 ++
 .../minecraft/MinecraftSessionService.java    |  16 +
 com/mojang/authlib/properties/Property.java   |  57 ++
 .../authlib/properties/PropertyMap.java       |  93 +++
 .../yggdrasil/ProfileIncompleteException.java |  18 +
 .../yggdrasil/ProfileNotFoundException.java   |  18 +
 .../YggdrasilAuthenticationService.java       | 119 ++++
 .../YggdrasilGameProfileRepository.java       | 111 ++++
 .../YggdrasilMinecraftSessionService.java     | 159 +++++
 .../YggdrasilUserAuthentication.java          | 239 +++++++
 .../request/AuthenticationRequest.java        |  19 +
 .../yggdrasil/request/InvalidateRequest.java  |  13 +
 .../request/JoinMinecraftServerRequest.java   |  12 +
 .../yggdrasil/request/RefreshRequest.java     |  22 +
 .../yggdrasil/request/ValidateRequest.java    |  13 +
 .../response/AuthenticationResponse.java      |  34 +
 .../HasJoinedMinecraftServerResponse.java     |  20 +
 .../MinecraftProfilePropertiesResponse.java   |  25 +
 .../response/MinecraftTexturesPayload.java    |  36 ++
 .../ProfileSearchResultsResponse.java         |  47 ++
 .../yggdrasil/response/RefreshResponse.java   |  34 +
 .../authlib/yggdrasil/response/Response.java  |  34 +
 .../authlib/yggdrasil/response/User.java      |  19 +
 com/mojang/launcher/Http.java                 |  69 ++
 com/mojang/launcher/Launcher.java             |  84 +++
 .../launcher/LegacyPropertyMapSerializer.java |  37 ++
 com/mojang/launcher/OperatingSystem.java      | 112 ++++
 .../launcher/SharedLauncherConstants.java     |   9 +
 com/mojang/launcher/UserInterface.java        |  23 +
 .../events/GameOutputLogProcessor.java        |   7 +
 .../events/RefreshedVersionsListener.java     |   7 +
 .../launcher/game/GameInstanceStatus.java     |  24 +
 .../game/process/AbstractGameProcess.java     |  35 +
 .../launcher/game/process/GameProcess.java    |  23 +
 .../game/process/GameProcessBuilder.java      |  81 +++
 .../game/process/GameProcessFactory.java      |   7 +
 .../game/process/GameProcessRunnable.java     |   5 +
 .../process/direct/DirectGameProcess.java     |  57 ++
 .../direct/DirectGameProcessFactory.java      |  17 +
 .../direct/DirectProcessInputMonitor.java     |  48 ++
 .../game/runner/AbstractGameRunner.java       | 228 +++++++
 .../launcher/game/runner/GameRunner.java      |  15 +
 .../game/runner/GameRunnerListener.java       |   7 +
 .../launcher/updater/DateTypeAdapter.java     |  79 +++
 .../launcher/updater/DownloadProgress.java    |  31 +
 .../ExceptionalThreadPoolExecutor.java        |  67 ++
 .../launcher/updater/FileTypeAdapter.java     |  30 +
 .../LowerCaseEnumTypeAdapterFactory.java      |  57 ++
 .../launcher/updater/VersionFilter.java       |  58 ++
 .../launcher/updater/VersionManager.java      |  44 ++
 .../launcher/updater/VersionSyncInfo.java     |  63 ++
 .../download/ChecksummedDownloadable.java     |  87 +++
 .../updater/download/DownloadJob.java         | 190 ++++++
 .../updater/download/DownloadListener.java    |   7 +
 .../updater/download/Downloadable.java        | 185 ++++++
 .../updater/download/EtagDownloadable.java    |  69 ++
 .../download/MonitoringInputStream.java       |  50 ++
 .../updater/download/ProgressContainer.java   |  62 ++
 .../download/assets/AssetDownloadable.java    | 149 +++++
 .../updater/download/assets/AssetIndex.java   | 116 ++++
 .../launcher/versions/CompatibilityRule.java  | 110 ++++
 .../launcher/versions/CompleteVersion.java    |  23 +
 .../launcher/versions/ExtractRules.java       |  49 ++
 com/mojang/launcher/versions/ReleaseType.java |   5 +
 .../versions/ReleaseTypeAdapterFactory.java   |  22 +
 .../launcher/versions/ReleaseTypeFactory.java |   9 +
 com/mojang/launcher/versions/Version.java     |  13 +
 com/mojang/util/QueueLogAppender.java         |  87 +++
 com/mojang/util/UUIDTypeAdapter.java          |  28 +
 dirt.png                                      | Bin 0 -> 360 bytes
 favicon.png                                   | Bin 0 -> 1374 bytes
 launcher_properties.json                      |   1 +
 log4j2.xml                                    |  20 +
 minecraft_logo.png                            | Bin 0 -> 3656 bytes
 net/minecraft/hopper/Crash.java               |  22 +
 net/minecraft/hopper/HopperService.java       |  61 ++
 net/minecraft/hopper/Problem.java             |  22 +
 net/minecraft/hopper/PublishRequest.java      |  11 +
 net/minecraft/hopper/PublishResponse.java     |  22 +
 net/minecraft/hopper/Report.java              |  26 +
 net/minecraft/hopper/Response.java            |  12 +
 net/minecraft/hopper/SubmitRequest.java       |  17 +
 net/minecraft/hopper/SubmitResponse.java      |  22 +
 net/minecraft/hopper/Util.java                |  58 ++
 net/minecraft/launcher/CompatibilityRule.java | 145 +++++
 .../launcher/CurrentLaunchFeatureMatcher.java |  26 +
 net/minecraft/launcher/Launcher.java          | 612 ++++++++++++++++++
 net/minecraft/launcher/LauncherConstants.java | 120 ++++
 net/minecraft/launcher/Main.java              | 107 +++
 .../launcher/MinecraftUserInterface.java      |  15 +
 .../launcher/SwingUserInterface.java          | 309 +++++++++
 .../launcher/game/GameLaunchDispatcher.java   | 208 ++++++
 .../launcher/game/MinecraftGameRunner.java    | 526 +++++++++++++++
 .../launcher/game/MinecraftReleaseType.java   |  58 ++
 .../game/MinecraftReleaseTypeFactory.java     |  32 +
 .../profile/AuthenticationDatabase.java       | 188 ++++++
 .../profile/LauncherVisibilityRule.java       |  21 +
 net/minecraft/launcher/profile/Profile.java   | 177 +++++
 .../launcher/profile/ProfileManager.java      | 274 ++++++++
 .../profile/RefreshedProfilesListener.java    |   5 +
 .../launcher/profile/UserChangedListener.java |   5 +
 net/minecraft/launcher/ui/BottomBarPanel.java |  61 ++
 net/minecraft/launcher/ui/LauncherPanel.java  | 149 +++++
 net/minecraft/launcher/ui/TexturedPanel.java  |  71 ++
 .../ui/bottombar/PlayButtonPanel.java         | 117 ++++
 .../ui/bottombar/PlayerInfoPanel.java         | 129 ++++
 .../ui/bottombar/ProfileSelectionPanel.java   | 168 +++++
 .../ui/bottombar/SidebarGridForm.java         |  35 +
 .../ui/bottombar/StatusPanelForm.java         |  84 +++
 .../ui/popups/login/AuthErrorForm.java        | 101 +++
 .../ui/popups/login/ExistingUserListForm.java | 163 +++++
 .../launcher/ui/popups/login/LogInForm.java   | 213 ++++++
 .../launcher/ui/popups/login/LogInPopup.java  | 138 ++++
 .../ui/popups/profile/ProfileEditorPopup.java | 136 ++++
 .../ui/popups/profile/ProfileInfoPanel.java   | 280 ++++++++
 .../ui/popups/profile/ProfileJavaPanel.java   | 154 +++++
 .../popups/profile/ProfileVersionPanel.java   | 229 +++++++
 .../launcher/ui/tabs/ConsoleTab.java          |  90 +++
 .../launcher/ui/tabs/CrashReportTab.java      | 203 ++++++
 .../launcher/ui/tabs/GameOutputTab.java       | 121 ++++
 .../launcher/ui/tabs/LauncherTabPanel.java    |  70 ++
 .../launcher/ui/tabs/ProfileListTab.java      | 252 ++++++++
 .../launcher/ui/tabs/WebsiteTab.java          |  91 +++
 .../launcher/ui/tabs/website/Browser.java     |  12 +
 .../launcher/ui/tabs/website/JFXBrowser.java  | 132 ++++
 .../ui/tabs/website/LegacySwingBrowser.java   |  65 ++
 .../updater/AbstractDownloadInfo.java         |  14 +
 net/minecraft/launcher/updater/Argument.java  |  93 +++
 .../launcher/updater/ArgumentType.java        |   9 +
 .../launcher/updater/AssetIndexInfo.java      |  30 +
 .../updater/CompleteMinecraftVersion.java     | 432 +++++++++++++
 .../launcher/updater/DownloadInfo.java        |  30 +
 .../launcher/updater/DownloadType.java        |  12 +
 .../updater/FileBasedVersionList.java         |  34 +
 net/minecraft/launcher/updater/Library.java   | 193 ++++++
 .../launcher/updater/LibraryDownloadInfo.java |  32 +
 .../launcher/updater/LocalDownloadInfo.java   |  35 +
 .../launcher/updater/LocalVersionList.java    | 131 ++++
 .../updater/MinecraftVersionManager.java      | 392 +++++++++++
 .../launcher/updater/PartialVersion.java      |  89 +++
 .../updater/PreHashedDownloadable.java        |  61 ++
 .../launcher/updater/RemoteVersionList.java   |  87 +++
 .../launcher/updater/VersionList.java         | 158 +++++
 yggdrasil_session_pubkey.der                  | Bin 0 -> 550 bytes
 170 files changed, 13283 insertions(+)
 create mode 100644 Log4j-config.xsd
 create mode 100644 Log4j-events.dtd
 create mode 100644 Log4j-events.xsd
 create mode 100644 META-INF/MANIFEST.MF
 create mode 100644 META-INF/log4j-provider.properties
 create mode 100644 com/mojang/authlib/Agent.java
 create mode 100644 com/mojang/authlib/AuthenticationService.java
 create mode 100644 com/mojang/authlib/BaseAuthenticationService.java
 create mode 100644 com/mojang/authlib/BaseUserAuthentication.java
 create mode 100644 com/mojang/authlib/GameProfile.java
 create mode 100644 com/mojang/authlib/GameProfileRepository.java
 create mode 100644 com/mojang/authlib/HttpAuthenticationService.java
 create mode 100644 com/mojang/authlib/HttpUserAuthentication.java
 create mode 100644 com/mojang/authlib/ProfileLookupCallback.java
 create mode 100644 com/mojang/authlib/UserAuthentication.java
 create mode 100644 com/mojang/authlib/UserType.java
 create mode 100644 com/mojang/authlib/exceptions/AuthenticationException.java
 create mode 100644 com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
 create mode 100644 com/mojang/authlib/exceptions/InvalidCredentialsException.java
 create mode 100644 com/mojang/authlib/exceptions/UserMigratedException.java
 create mode 100644 com/mojang/authlib/legacy/LegacyAuthenticationService.java
 create mode 100644 com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
 create mode 100644 com/mojang/authlib/legacy/LegacyUserAuthentication.java
 create mode 100644 com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
 create mode 100644 com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
 create mode 100644 com/mojang/authlib/minecraft/InsecureTextureException.java
 create mode 100644 com/mojang/authlib/minecraft/MinecraftProfileTexture.java
 create mode 100644 com/mojang/authlib/minecraft/MinecraftSessionService.java
 create mode 100644 com/mojang/authlib/properties/Property.java
 create mode 100644 com/mojang/authlib/properties/PropertyMap.java
 create mode 100644 com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
 create mode 100644 com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
 create mode 100644 com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
 create mode 100644 com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
 create mode 100644 com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
 create mode 100644 com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
 create mode 100644 com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
 create mode 100644 com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
 create mode 100644 com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
 create mode 100644 com/mojang/authlib/yggdrasil/request/RefreshRequest.java
 create mode 100644 com/mojang/authlib/yggdrasil/request/ValidateRequest.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/RefreshResponse.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/Response.java
 create mode 100644 com/mojang/authlib/yggdrasil/response/User.java
 create mode 100644 com/mojang/launcher/Http.java
 create mode 100644 com/mojang/launcher/Launcher.java
 create mode 100644 com/mojang/launcher/LegacyPropertyMapSerializer.java
 create mode 100644 com/mojang/launcher/OperatingSystem.java
 create mode 100644 com/mojang/launcher/SharedLauncherConstants.java
 create mode 100644 com/mojang/launcher/UserInterface.java
 create mode 100644 com/mojang/launcher/events/GameOutputLogProcessor.java
 create mode 100644 com/mojang/launcher/events/RefreshedVersionsListener.java
 create mode 100644 com/mojang/launcher/game/GameInstanceStatus.java
 create mode 100644 com/mojang/launcher/game/process/AbstractGameProcess.java
 create mode 100644 com/mojang/launcher/game/process/GameProcess.java
 create mode 100644 com/mojang/launcher/game/process/GameProcessBuilder.java
 create mode 100644 com/mojang/launcher/game/process/GameProcessFactory.java
 create mode 100644 com/mojang/launcher/game/process/GameProcessRunnable.java
 create mode 100644 com/mojang/launcher/game/process/direct/DirectGameProcess.java
 create mode 100644 com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
 create mode 100644 com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
 create mode 100644 com/mojang/launcher/game/runner/AbstractGameRunner.java
 create mode 100644 com/mojang/launcher/game/runner/GameRunner.java
 create mode 100644 com/mojang/launcher/game/runner/GameRunnerListener.java
 create mode 100644 com/mojang/launcher/updater/DateTypeAdapter.java
 create mode 100644 com/mojang/launcher/updater/DownloadProgress.java
 create mode 100644 com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
 create mode 100644 com/mojang/launcher/updater/FileTypeAdapter.java
 create mode 100644 com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
 create mode 100644 com/mojang/launcher/updater/VersionFilter.java
 create mode 100644 com/mojang/launcher/updater/VersionManager.java
 create mode 100644 com/mojang/launcher/updater/VersionSyncInfo.java
 create mode 100644 com/mojang/launcher/updater/download/ChecksummedDownloadable.java
 create mode 100644 com/mojang/launcher/updater/download/DownloadJob.java
 create mode 100644 com/mojang/launcher/updater/download/DownloadListener.java
 create mode 100644 com/mojang/launcher/updater/download/Downloadable.java
 create mode 100644 com/mojang/launcher/updater/download/EtagDownloadable.java
 create mode 100644 com/mojang/launcher/updater/download/MonitoringInputStream.java
 create mode 100644 com/mojang/launcher/updater/download/ProgressContainer.java
 create mode 100644 com/mojang/launcher/updater/download/assets/AssetDownloadable.java
 create mode 100644 com/mojang/launcher/updater/download/assets/AssetIndex.java
 create mode 100644 com/mojang/launcher/versions/CompatibilityRule.java
 create mode 100644 com/mojang/launcher/versions/CompleteVersion.java
 create mode 100644 com/mojang/launcher/versions/ExtractRules.java
 create mode 100644 com/mojang/launcher/versions/ReleaseType.java
 create mode 100644 com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
 create mode 100644 com/mojang/launcher/versions/ReleaseTypeFactory.java
 create mode 100644 com/mojang/launcher/versions/Version.java
 create mode 100644 com/mojang/util/QueueLogAppender.java
 create mode 100644 com/mojang/util/UUIDTypeAdapter.java
 create mode 100644 dirt.png
 create mode 100644 favicon.png
 create mode 100644 launcher_properties.json
 create mode 100644 log4j2.xml
 create mode 100644 minecraft_logo.png
 create mode 100644 net/minecraft/hopper/Crash.java
 create mode 100644 net/minecraft/hopper/HopperService.java
 create mode 100644 net/minecraft/hopper/Problem.java
 create mode 100644 net/minecraft/hopper/PublishRequest.java
 create mode 100644 net/minecraft/hopper/PublishResponse.java
 create mode 100644 net/minecraft/hopper/Report.java
 create mode 100644 net/minecraft/hopper/Response.java
 create mode 100644 net/minecraft/hopper/SubmitRequest.java
 create mode 100644 net/minecraft/hopper/SubmitResponse.java
 create mode 100644 net/minecraft/hopper/Util.java
 create mode 100644 net/minecraft/launcher/CompatibilityRule.java
 create mode 100644 net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
 create mode 100644 net/minecraft/launcher/Launcher.java
 create mode 100644 net/minecraft/launcher/LauncherConstants.java
 create mode 100644 net/minecraft/launcher/Main.java
 create mode 100644 net/minecraft/launcher/MinecraftUserInterface.java
 create mode 100644 net/minecraft/launcher/SwingUserInterface.java
 create mode 100644 net/minecraft/launcher/game/GameLaunchDispatcher.java
 create mode 100644 net/minecraft/launcher/game/MinecraftGameRunner.java
 create mode 100644 net/minecraft/launcher/game/MinecraftReleaseType.java
 create mode 100644 net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
 create mode 100644 net/minecraft/launcher/profile/AuthenticationDatabase.java
 create mode 100644 net/minecraft/launcher/profile/LauncherVisibilityRule.java
 create mode 100644 net/minecraft/launcher/profile/Profile.java
 create mode 100644 net/minecraft/launcher/profile/ProfileManager.java
 create mode 100644 net/minecraft/launcher/profile/RefreshedProfilesListener.java
 create mode 100644 net/minecraft/launcher/profile/UserChangedListener.java
 create mode 100644 net/minecraft/launcher/ui/BottomBarPanel.java
 create mode 100644 net/minecraft/launcher/ui/LauncherPanel.java
 create mode 100644 net/minecraft/launcher/ui/TexturedPanel.java
 create mode 100644 net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
 create mode 100644 net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
 create mode 100644 net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
 create mode 100644 net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
 create mode 100644 net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
 create mode 100644 net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
 create mode 100644 net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
 create mode 100644 net/minecraft/launcher/ui/popups/login/LogInForm.java
 create mode 100644 net/minecraft/launcher/ui/popups/login/LogInPopup.java
 create mode 100644 net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
 create mode 100644 net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
 create mode 100644 net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
 create mode 100644 net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
 create mode 100644 net/minecraft/launcher/ui/tabs/ConsoleTab.java
 create mode 100644 net/minecraft/launcher/ui/tabs/CrashReportTab.java
 create mode 100644 net/minecraft/launcher/ui/tabs/GameOutputTab.java
 create mode 100644 net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
 create mode 100644 net/minecraft/launcher/ui/tabs/ProfileListTab.java
 create mode 100644 net/minecraft/launcher/ui/tabs/WebsiteTab.java
 create mode 100644 net/minecraft/launcher/ui/tabs/website/Browser.java
 create mode 100644 net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
 create mode 100644 net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
 create mode 100644 net/minecraft/launcher/updater/AbstractDownloadInfo.java
 create mode 100644 net/minecraft/launcher/updater/Argument.java
 create mode 100644 net/minecraft/launcher/updater/ArgumentType.java
 create mode 100644 net/minecraft/launcher/updater/AssetIndexInfo.java
 create mode 100644 net/minecraft/launcher/updater/CompleteMinecraftVersion.java
 create mode 100644 net/minecraft/launcher/updater/DownloadInfo.java
 create mode 100644 net/minecraft/launcher/updater/DownloadType.java
 create mode 100644 net/minecraft/launcher/updater/FileBasedVersionList.java
 create mode 100644 net/minecraft/launcher/updater/Library.java
 create mode 100644 net/minecraft/launcher/updater/LibraryDownloadInfo.java
 create mode 100644 net/minecraft/launcher/updater/LocalDownloadInfo.java
 create mode 100644 net/minecraft/launcher/updater/LocalVersionList.java
 create mode 100644 net/minecraft/launcher/updater/MinecraftVersionManager.java
 create mode 100644 net/minecraft/launcher/updater/PartialVersion.java
 create mode 100644 net/minecraft/launcher/updater/PreHashedDownloadable.java
 create mode 100644 net/minecraft/launcher/updater/RemoteVersionList.java
 create mode 100644 net/minecraft/launcher/updater/VersionList.java
 create mode 100644 yggdrasil_session_pubkey.der

diff --git a/Log4j-config.xsd b/Log4j-config.xsd
new file mode 100644
index 0000000..a19e125
--- /dev/null
+++ b/Log4j-config.xsd
@@ -0,0 +1,133 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+
+-->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
+    <xs:element name="Configuration" type="ConfigurationType"/>
+    <xs:complexType name="ConfigurationType">
+        <xs:sequence>
+            <xs:element name="Properties" type="PropertiesType"/>
+            <xs:choice minOccurs="0" maxOccurs="1">
+                <xs:element name="Filters" type="FiltersType"/>
+                <xs:element name="Filter" type="FilterType"/>
+            </xs:choice>
+            <xs:element name="ThresholdFilter" type="ThresholdFilterType"/>
+            <xs:element name="Appenders" type="AppendersType"/>
+            <xs:element name="Loggers" type="LoggersType"/>
+        </xs:sequence>
+        <xs:attribute name="packages" type="xs:string"/>
+        <xs:attribute name="status" type="xs:string"/>
+        <xs:attribute name="strict" type="xs:string"/>
+        <xs:attribute name="name" type="xs:string"/>
+        <xs:attribute name="advertiser" type="xs:string"/>
+    </xs:complexType>
+    <xs:complexType name="PropertiesType">
+        <xs:sequence>
+            <xs:element name="Property" type="PropertyType"/>
+        </xs:sequence>
+    </xs:complexType>
+    <xs:complexType name="AppenderType">
+        <xs:sequence>
+            <xs:element name="Layout" type="LayoutType" minOccurs="0"/>
+            <xs:choice minOccurs="0" maxOccurs="1">
+                <xs:element name="Filters" type="FiltersType"/>
+                <xs:element name="Filter" type="FilterType"/>
+            </xs:choice>
+        </xs:sequence>
+        <xs:attribute name="type" type="xs:string" use="required"/>
+        <xs:attribute name="name" type="xs:string" use="required"/>
+        <xs:attribute name="fileName" type="xs:string" use="optional"/>
+    </xs:complexType>
+    <xs:complexType name="RootType">
+        <xs:sequence>
+            <xs:element name="AppenderRef" type="AppenderRefType" minOccurs="1" maxOccurs="unbounded"/>
+        </xs:sequence>
+        <xs:attribute name="level" type="xs:string"/>
+    </xs:complexType>
+    <xs:complexType name="PropertyType">
+        <xs:simpleContent>
+            <xs:extension base="xs:string">
+                <xs:attribute name="name" type="xs:string"/>
+            </xs:extension>
+        </xs:simpleContent>
+    </xs:complexType>
+    <xs:complexType name="KeyValuePairType">
+        <xs:simpleContent>
+            <xs:extension base="xs:string">
+                <xs:attribute name="key" type="xs:string"/>
+                <xs:attribute name="value" type="xs:string"/>
+            </xs:extension>
+        </xs:simpleContent>
+    </xs:complexType>
+    <xs:complexType name="AppendersType">
+        <xs:sequence>
+            <xs:element name="Appender" type="AppenderType" minOccurs="1" maxOccurs="unbounded"/>
+        </xs:sequence>
+    </xs:complexType>
+    <xs:complexType name="AppenderRefType">
+        <xs:simpleContent>
+            <xs:extension base="xs:string">
+                <xs:attribute name="ref" type="xs:string" use="required"/>
+            </xs:extension>
+        </xs:simpleContent>
+    </xs:complexType>
+    <xs:complexType name="LoggerType">
+        <xs:sequence>
+            <xs:choice minOccurs="0" maxOccurs="1">
+                <xs:element name="Filters" type="FiltersType"/>
+                <xs:element name="Filter" type="FilterType"/>
+            </xs:choice>
+            <xs:element name="AppenderRef" type="AppenderRefType"/>
+        </xs:sequence>
+        <xs:attribute name="name" type="xs:string" use="required"/>
+        <xs:attribute name="level" type="xs:string" use="optional"/>
+        <xs:attribute name="additivity" type="xs:string" use="optional"/>
+    </xs:complexType>
+    <xs:complexType name="FilterType" mixed="true">
+        <xs:sequence>
+            <xs:element name="KeyValuePair" type="KeyValuePairType" minOccurs="0"/>
+        </xs:sequence>
+        <xs:attribute name="type" type="xs:string" use="required"/>
+        <xs:attribute name="level" type="xs:string" use="optional"/>
+        <xs:attribute name="marker" type="xs:string" use="optional"/>
+        <xs:attribute name="onMatch" type="xs:string" use="optional"/>
+        <xs:attribute name="onMismatch" type="xs:string" use="optional"/>
+    </xs:complexType>
+    <xs:complexType name="FiltersType">
+        <xs:sequence>
+            <xs:element name="Filter" type="FilterType" minOccurs="0" maxOccurs="unbounded"/>
+        </xs:sequence>
+    </xs:complexType>
+    <xs:complexType name="LoggersType" mixed="true">
+        <xs:sequence>
+            <xs:element name="Logger" type="LoggerType" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="Root" type="RootType" minOccurs="1" maxOccurs="1"/>
+        </xs:sequence>
+    </xs:complexType>
+    <xs:complexType name="LayoutType" mixed="true">
+        <xs:sequence>
+            <xs:element name="Pattern" type="xs:string" minOccurs="0"/>
+        </xs:sequence>
+        <xs:attribute name="Type" type="xs:string" use="required"/>
+        <xs:attribute name="Pattern" type="xs:string" use="optional"/>
+    </xs:complexType>
+    <xs:complexType name="ThresholdFilterType">
+        <xs:attribute name="level" type="xs:string" use="optional"/>
+        <xs:attribute name="onMatch" type="xs:string" use="optional"/>
+        <xs:attribute name="onMismatch" type="xs:string" use="optional"/>
+    </xs:complexType>
+</xs:schema>
diff --git a/Log4j-events.dtd b/Log4j-events.dtd
new file mode 100644
index 0000000..91af8c7
--- /dev/null
+++ b/Log4j-events.dtd
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<!--DTD generated by XMLSpy v2011 rel. 3 sp1 (x64) (http://www.altova.com)-->
+<!--the entity declarations may be overridden in the internal subset-->
+<!--namespace prefixes-->
+<!ENTITY % log4j_prefix "log4j">
+<!--namespace prefix to namespace uri mappings-->
+<!ENTITY % log4j_prefix.. "%log4j_prefix;:">
+<!--namespaces attributes for root element-->
+<!ENTITY % documentElementAttributes " xmlns:%log4j_prefix; CDATA 'http://logging.apache.org/log4j/2.0/events'">
+<!--the declarations below should not be modified-->
+<!--element name mappings-->
+<!ENTITY % log4j..Events "%log4j_prefix..;Events">
+<!ENTITY % log4j..Event "%log4j_prefix..;Event">
+<!ENTITY % log4j..Message "%log4j_prefix..;Message">
+<!ENTITY % log4j..NDC "%log4j_prefix..;NDC">
+<!ENTITY % log4j..Throwable "%log4j_prefix..;Throwable">
+<!ENTITY % log4j..LocationInfo "%log4j_prefix..;LocationInfo">
+<!ENTITY % log4j..Properties "%log4j_prefix..;Properties">
+<!ENTITY % log4j..Data "%log4j_prefix..;Data">
+<!--element and attribute declarations-->
+<!--Log4J 2.0 XML Schema-->
+<!ELEMENT %log4j..Events; ((%log4j..Event;)*)>
+<!ATTLIST %log4j..Events;
+	%documentElementAttributes;
+>
+<!ELEMENT %log4j..Event; (%log4j..Message;, (%log4j..NDC;)?, (%log4j..Throwable;)?, (%log4j..LocationInfo;)?, (%log4j..Properties;)?)>
+<!ATTLIST %log4j..Event;
+	logger CDATA #REQUIRED
+	timestamp NMTOKEN #REQUIRED
+	level (OFF | FATAL | ERROR | WARN | INFO | DEBUG | TRACE | ALL) #REQUIRED
+	thread CDATA #REQUIRED
+>
+<!ELEMENT %log4j..Message; ANY>
+<!ELEMENT %log4j..NDC; ANY>
+<!ELEMENT %log4j..Throwable; ANY>
+<!ELEMENT %log4j..LocationInfo; EMPTY>
+<!ATTLIST %log4j..LocationInfo;
+	class CDATA #REQUIRED
+	method CDATA #REQUIRED
+	file CDATA #REQUIRED
+	line NMTOKEN #REQUIRED
+>
+<!ELEMENT %log4j..Properties; ((%log4j..Data;)+)>
+<!ELEMENT %log4j..Data; EMPTY>
+<!ATTLIST %log4j..Data;
+	name CDATA #REQUIRED
+	value CDATA #REQUIRED
+>
diff --git a/Log4j-events.xsd b/Log4j-events.xsd
new file mode 100644
index 0000000..2310227
--- /dev/null
+++ b/Log4j-events.xsd
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- edited with XMLSpy v2011 rel. 3 sp1 (x64) (http://www.altova.com) by Gary Gregory (Rocket Software) -->
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:log4j="http://logging.apache.org/log4j/2.0/events" targetNamespace="http://logging.apache.org/log4j/2.0/events" elementFormDefault="qualified" attributeFormDefault="unqualified">
+    <xs:element name="Events">
+        <xs:annotation>
+            <xs:documentation>Log4J 2.0 XML Schema for XML log event files.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="Event" minOccurs="0" maxOccurs="unbounded">
+                    <xs:complexType>
+                        <xs:sequence>
+                            <xs:element name="Message"/>
+                            <xs:element name="NDC" minOccurs="0"/>
+                            <xs:element name="Throwable" minOccurs="0"/>
+                            <xs:element name="LocationInfo" minOccurs="0">
+                                <xs:complexType>
+                                    <xs:attribute name="class" type="xs:string" use="required"/>
+                                    <xs:attribute name="method" type="xs:string" use="required"/>
+                                    <xs:attribute name="file" type="xs:string" use="required"/>
+                                    <xs:attribute name="line" type="xs:int" use="required"/>
+                                </xs:complexType>
+                            </xs:element>
+                            <xs:element name="Properties" minOccurs="0">
+                                <xs:complexType>
+                                    <xs:sequence>
+                                        <xs:element name="Data" maxOccurs="unbounded">
+                                            <xs:complexType>
+                                                <xs:attribute name="name" type="xs:string" use="required"/>
+                                                <xs:attribute name="value" use="required"/>
+                                            </xs:complexType>
+                                        </xs:element>
+                                    </xs:sequence>
+                                </xs:complexType>
+                            </xs:element>
+                        </xs:sequence>
+                        <xs:attribute name="logger" type="xs:string" use="required"/>
+                        <xs:attribute name="timestamp" type="xs:long" use="required"/>
+                        <xs:attribute name="level" type="log4j:LevelEnum" use="required"/>
+                        <xs:attribute name="thread" type="xs:string" use="required"/>
+                    </xs:complexType>
+                </xs:element>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+    <xs:simpleType name="LevelEnum">
+        <xs:restriction base="xs:string">
+            <xs:enumeration value="OFF"/>
+            <xs:enumeration value="FATAL"/>
+            <xs:enumeration value="ERROR"/>
+            <xs:enumeration value="WARN"/>
+            <xs:enumeration value="INFO"/>
+            <xs:enumeration value="DEBUG"/>
+            <xs:enumeration value="TRACE"/>
+            <xs:enumeration value="ALL"/>
+        </xs:restriction>
+    </xs:simpleType>
+</xs:schema>
diff --git a/META-INF/MANIFEST.MF b/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..6c5d5ec
--- /dev/null
+++ b/META-INF/MANIFEST.MF
@@ -0,0 +1,4 @@
+Manifest-Version: 1.0
+Implementation-Version: 1.6.93
+Main-Class: net.minecraft.launcher.Main
+
diff --git a/META-INF/log4j-provider.properties b/META-INF/log4j-provider.properties
new file mode 100644
index 0000000..b13b0b8
--- /dev/null
+++ b/META-INF/log4j-provider.properties
@@ -0,0 +1,18 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+LoggerContextFactory = org.apache.logging.log4j.core.impl.Log4jContextFactory
+Log4jAPIVersion = 2.0.0
+FactoryPriority= 10
\ No newline at end of file
diff --git a/com/mojang/authlib/Agent.java b/com/mojang/authlib/Agent.java
new file mode 100644
index 0000000..f825af9
--- /dev/null
+++ b/com/mojang/authlib/Agent.java
@@ -0,0 +1,25 @@
+package com.mojang.authlib;
+
+public class Agent {
+    public static final Agent MINECRAFT = new Agent("Minecraft", 1);
+    public static final Agent SCROLLS = new Agent("Scrolls", 1);
+    private final String name;
+    private final int version;
+
+    public Agent(String var1, int var2) {
+        this.name = var1;
+        this.version = var2;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public int getVersion() {
+        return this.version;
+    }
+
+    public String toString() {
+        return "Agent{name='" + this.name + '\'' + ", version=" + this.version + '}';
+    }
+}
diff --git a/com/mojang/authlib/AuthenticationService.java b/com/mojang/authlib/AuthenticationService.java
new file mode 100644
index 0000000..126d8d6
--- /dev/null
+++ b/com/mojang/authlib/AuthenticationService.java
@@ -0,0 +1,11 @@
+package com.mojang.authlib;
+
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+
+public interface AuthenticationService {
+    UserAuthentication createUserAuthentication(Agent var1);
+
+    MinecraftSessionService createMinecraftSessionService();
+
+    GameProfileRepository createProfileRepository();
+}
diff --git a/com/mojang/authlib/BaseAuthenticationService.java b/com/mojang/authlib/BaseAuthenticationService.java
new file mode 100644
index 0000000..9d62de7
--- /dev/null
+++ b/com/mojang/authlib/BaseAuthenticationService.java
@@ -0,0 +1,6 @@
+package com.mojang.authlib;
+
+public abstract class BaseAuthenticationService implements AuthenticationService {
+    public BaseAuthenticationService() {
+    }
+}
diff --git a/com/mojang/authlib/BaseUserAuthentication.java b/com/mojang/authlib/BaseUserAuthentication.java
new file mode 100644
index 0000000..1cc7cc4
--- /dev/null
+++ b/com/mojang/authlib/BaseUserAuthentication.java
@@ -0,0 +1,259 @@
+package com.mojang.authlib;
+
+import com.mojang.authlib.properties.Property;
+import com.mojang.authlib.properties.PropertyMap;
+import com.mojang.util.UUIDTypeAdapter;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.Validate;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public abstract class BaseUserAuthentication implements UserAuthentication {
+    private static final Logger LOGGER = LogManager.getLogger();
+    protected static final String STORAGE_KEY_PROFILE_NAME = "displayName";
+    protected static final String STORAGE_KEY_PROFILE_ID = "uuid";
+    protected static final String STORAGE_KEY_PROFILE_PROPERTIES = "profileProperties";
+    protected static final String STORAGE_KEY_USER_NAME = "username";
+    protected static final String STORAGE_KEY_USER_ID = "userid";
+    protected static final String STORAGE_KEY_USER_PROPERTIES = "userProperties";
+    private final AuthenticationService authenticationService;
+    private final PropertyMap userProperties = new PropertyMap();
+    private String userid;
+    private String username;
+    private String password;
+    private GameProfile selectedProfile;
+    private UserType userType;
+
+    protected BaseUserAuthentication(AuthenticationService var1) {
+        Validate.notNull(var1);
+        this.authenticationService = var1;
+    }
+
+    public boolean canLogIn() {
+        return !this.canPlayOnline() && StringUtils.isNotBlank(this.getUsername()) && StringUtils.isNotBlank(this.getPassword());
+    }
+
+    public void logOut() {
+        this.password = null;
+        this.userid = null;
+        this.setSelectedProfile((GameProfile)null);
+        this.getModifiableUserProperties().clear();
+        this.setUserType((UserType)null);
+    }
+
+    public boolean isLoggedIn() {
+        return this.getSelectedProfile() != null;
+    }
+
+    public void setUsername(String var1) {
+        if (this.isLoggedIn() && this.canPlayOnline()) {
+            throw new IllegalStateException("Cannot change username whilst logged in & online");
+        } else {
+            this.username = var1;
+        }
+    }
+
+    public void setPassword(String var1) {
+        if (this.isLoggedIn() && this.canPlayOnline() && StringUtils.isNotBlank(var1)) {
+            throw new IllegalStateException("Cannot set password whilst logged in & online");
+        } else {
+            this.password = var1;
+        }
+    }
+
+    protected String getUsername() {
+        return this.username;
+    }
+
+    protected String getPassword() {
+        return this.password;
+    }
+
+    public void loadFromStorage(Map<String, Object> var1) {
+        this.logOut();
+        this.setUsername(String.valueOf(var1.get("username")));
+        if (var1.containsKey("userid")) {
+            this.userid = String.valueOf(var1.get("userid"));
+        } else {
+            this.userid = this.username;
+        }
+
+        String var6;
+        String var7;
+        if (var1.containsKey("userProperties")) {
+            try {
+                List var2 = (List)var1.get("userProperties");
+                Iterator var3 = var2.iterator();
+
+                while(var3.hasNext()) {
+                    Map var4 = (Map)var3.next();
+                    String var5 = (String)var4.get("name");
+                    var6 = (String)var4.get("value");
+                    var7 = (String)var4.get("signature");
+                    if (var7 == null) {
+                        this.getModifiableUserProperties().put(var5, new Property(var5, var6));
+                    } else {
+                        this.getModifiableUserProperties().put(var5, new Property(var5, var6, var7));
+                    }
+                }
+            } catch (Throwable var10) {
+                LOGGER.warn("Couldn't deserialize user properties", var10);
+            }
+        }
+
+        if (var1.containsKey("displayName") && var1.containsKey("uuid")) {
+            GameProfile var11 = new GameProfile(UUIDTypeAdapter.fromString(String.valueOf(var1.get("uuid"))), String.valueOf(var1.get("displayName")));
+            if (var1.containsKey("profileProperties")) {
+                try {
+                    List var12 = (List)var1.get("profileProperties");
+                    Iterator var13 = var12.iterator();
+
+                    while(var13.hasNext()) {
+                        Map var14 = (Map)var13.next();
+                        var6 = (String)var14.get("name");
+                        var7 = (String)var14.get("value");
+                        String var8 = (String)var14.get("signature");
+                        if (var8 == null) {
+                            var11.getProperties().put(var6, new Property(var6, var7));
+                        } else {
+                            var11.getProperties().put(var6, new Property(var6, var7, var8));
+                        }
+                    }
+                } catch (Throwable var9) {
+                    LOGGER.warn("Couldn't deserialize profile properties", var9);
+                }
+            }
+
+            this.setSelectedProfile(var11);
+        }
+
+    }
+
+    public Map<String, Object> saveForStorage() {
+        HashMap var1 = new HashMap();
+        if (this.getUsername() != null) {
+            var1.put("username", this.getUsername());
+        }
+
+        if (this.getUserID() != null) {
+            var1.put("userid", this.getUserID());
+        } else if (this.getUsername() != null) {
+            var1.put("username", this.getUsername());
+        }
+
+        if (!this.getUserProperties().isEmpty()) {
+            ArrayList var2 = new ArrayList();
+            Iterator var3 = this.getUserProperties().values().iterator();
+
+            while(var3.hasNext()) {
+                Property var4 = (Property)var3.next();
+                HashMap var5 = new HashMap();
+                var5.put("name", var4.getName());
+                var5.put("value", var4.getValue());
+                var5.put("signature", var4.getSignature());
+                var2.add(var5);
+            }
+
+            var1.put("userProperties", var2);
+        }
+
+        GameProfile var7 = this.getSelectedProfile();
+        if (var7 != null) {
+            var1.put("displayName", var7.getName());
+            var1.put("uuid", var7.getId());
+            ArrayList var8 = new ArrayList();
+            Iterator var9 = var7.getProperties().values().iterator();
+
+            while(var9.hasNext()) {
+                Property var10 = (Property)var9.next();
+                HashMap var6 = new HashMap();
+                var6.put("name", var10.getName());
+                var6.put("value", var10.getValue());
+                var6.put("signature", var10.getSignature());
+                var8.add(var6);
+            }
+
+            if (!var8.isEmpty()) {
+                var1.put("profileProperties", var8);
+            }
+        }
+
+        return var1;
+    }
+
+    protected void setSelectedProfile(GameProfile var1) {
+        this.selectedProfile = var1;
+    }
+
+    public GameProfile getSelectedProfile() {
+        return this.selectedProfile;
+    }
+
+    public String toString() {
+        StringBuilder var1 = new StringBuilder();
+        var1.append(this.getClass().getSimpleName());
+        var1.append("{");
+        if (this.isLoggedIn()) {
+            var1.append("Logged in as ");
+            var1.append(this.getUsername());
+            if (this.getSelectedProfile() != null) {
+                var1.append(" / ");
+                var1.append(this.getSelectedProfile());
+                var1.append(" - ");
+                if (this.canPlayOnline()) {
+                    var1.append("Online");
+                } else {
+                    var1.append("Offline");
+                }
+            }
+        } else {
+            var1.append("Not logged in");
+        }
+
+        var1.append("}");
+        return var1.toString();
+    }
+
+    public AuthenticationService getAuthenticationService() {
+        return this.authenticationService;
+    }
+
+    public String getUserID() {
+        return this.userid;
+    }
+
+    public PropertyMap getUserProperties() {
+        if (this.isLoggedIn()) {
+            PropertyMap var1 = new PropertyMap();
+            var1.putAll(this.getModifiableUserProperties());
+            return var1;
+        } else {
+            return new PropertyMap();
+        }
+    }
+
+    protected PropertyMap getModifiableUserProperties() {
+        return this.userProperties;
+    }
+
+    public UserType getUserType() {
+        if (this.isLoggedIn()) {
+            return this.userType == null ? UserType.LEGACY : this.userType;
+        } else {
+            return null;
+        }
+    }
+
+    protected void setUserType(UserType var1) {
+        this.userType = var1;
+    }
+
+    protected void setUserid(String var1) {
+        this.userid = var1;
+    }
+}
diff --git a/com/mojang/authlib/GameProfile.java b/com/mojang/authlib/GameProfile.java
new file mode 100644
index 0000000..e276477
--- /dev/null
+++ b/com/mojang/authlib/GameProfile.java
@@ -0,0 +1,79 @@
+package com.mojang.authlib;
+
+import com.mojang.authlib.properties.PropertyMap;
+import java.util.UUID;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.builder.ToStringBuilder;
+
+public class GameProfile {
+    private final UUID id;
+    private final String name;
+    private final PropertyMap properties = new PropertyMap();
+    private boolean legacy;
+
+    public GameProfile(UUID var1, String var2) {
+        if (var1 == null && StringUtils.isBlank(var2)) {
+            throw new IllegalArgumentException("Name and ID cannot both be blank");
+        } else {
+            this.id = var1;
+            this.name = var2;
+        }
+    }
+
+    public UUID getId() {
+        return this.id;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public PropertyMap getProperties() {
+        return this.properties;
+    }
+
+    public boolean isComplete() {
+        return this.id != null && StringUtils.isNotBlank(this.getName());
+    }
+
+    public boolean equals(Object var1) {
+        if (this == var1) {
+            return true;
+        } else if (var1 != null && this.getClass() == var1.getClass()) {
+            GameProfile var2 = (GameProfile)var1;
+            if (this.id != null) {
+                if (!this.id.equals(var2.id)) {
+                    return false;
+                }
+            } else if (var2.id != null) {
+                return false;
+            }
+
+            if (this.name != null) {
+                if (this.name.equals(var2.name)) {
+                    return true;
+                }
+            } else if (var2.name == null) {
+                return true;
+            }
+
+            return false;
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        int var1 = this.id != null ? this.id.hashCode() : 0;
+        var1 = 31 * var1 + (this.name != null ? this.name.hashCode() : 0);
+        return var1;
+    }
+
+    public String toString() {
+        return (new ToStringBuilder(this)).append("id", this.id).append("name", this.name).append("properties", this.properties).append("legacy", this.legacy).toString();
+    }
+
+    public boolean isLegacy() {
+        return this.legacy;
+    }
+}
diff --git a/com/mojang/authlib/GameProfileRepository.java b/com/mojang/authlib/GameProfileRepository.java
new file mode 100644
index 0000000..7bf1f3a
--- /dev/null
+++ b/com/mojang/authlib/GameProfileRepository.java
@@ -0,0 +1,5 @@
+package com.mojang.authlib;
+
+public interface GameProfileRepository {
+    void findProfilesByNames(String[] var1, Agent var2, ProfileLookupCallback var3);
+}
diff --git a/com/mojang/authlib/HttpAuthenticationService.java b/com/mojang/authlib/HttpAuthenticationService.java
new file mode 100644
index 0000000..247c8df
--- /dev/null
+++ b/com/mojang/authlib/HttpAuthenticationService.java
@@ -0,0 +1,183 @@
+package com.mojang.authlib;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.Proxy;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import org.apache.commons.io.Charsets;
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.Validate;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public abstract class HttpAuthenticationService extends BaseAuthenticationService {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final Proxy proxy;
+
+    protected HttpAuthenticationService(Proxy var1) {
+        Validate.notNull(var1);
+        this.proxy = var1;
+    }
+
+    public Proxy getProxy() {
+        return this.proxy;
+    }
+
+    protected HttpURLConnection createUrlConnection(URL var1) throws IOException {
+        Validate.notNull(var1);
+        LOGGER.debug("Opening connection to " + var1);
+        HttpURLConnection var2 = (HttpURLConnection)var1.openConnection(this.proxy);
+        var2.setConnectTimeout(15000);
+        var2.setReadTimeout(15000);
+        var2.setUseCaches(false);
+        return var2;
+    }
+
+    public String performPostRequest(URL var1, String var2, String var3) throws IOException {
+        Validate.notNull(var1);
+        Validate.notNull(var2);
+        Validate.notNull(var3);
+        HttpURLConnection var4 = this.createUrlConnection(var1);
+        byte[] var5 = var2.getBytes(Charsets.UTF_8);
+        var4.setRequestProperty("Content-Type", var3 + "; charset=utf-8");
+        var4.setRequestProperty("Content-Length", "" + var5.length);
+        var4.setDoOutput(true);
+        LOGGER.debug("Writing POST data to " + var1 + ": " + var2);
+        OutputStream var6 = null;
+
+        try {
+            var6 = var4.getOutputStream();
+            IOUtils.write(var5, var6);
+        } finally {
+            IOUtils.closeQuietly(var6);
+        }
+
+        LOGGER.debug("Reading data from " + var1);
+        InputStream var7 = null;
+
+        String var10;
+        try {
+            String var9;
+            try {
+                var7 = var4.getInputStream();
+                String var8 = IOUtils.toString(var7, Charsets.UTF_8);
+                LOGGER.debug("Successful read, server response was " + var4.getResponseCode());
+                LOGGER.debug("Response: " + var8);
+                var9 = var8;
+                return var9;
+            } catch (IOException var19) {
+                IOUtils.closeQuietly(var7);
+                var7 = var4.getErrorStream();
+                if (var7 == null) {
+                    LOGGER.debug("Request failed", var19);
+                    throw var19;
+                }
+
+                LOGGER.debug("Reading error page from " + var1);
+                var9 = IOUtils.toString(var7, Charsets.UTF_8);
+                LOGGER.debug("Successful read, server response was " + var4.getResponseCode());
+                LOGGER.debug("Response: " + var9);
+                var10 = var9;
+            }
+        } finally {
+            IOUtils.closeQuietly(var7);
+        }
+
+        return var10;
+    }
+
+    public String performGetRequest(URL var1) throws IOException {
+        Validate.notNull(var1);
+        HttpURLConnection var2 = this.createUrlConnection(var1);
+        LOGGER.debug("Reading data from " + var1);
+        InputStream var3 = null;
+
+        String var6;
+        try {
+            String var5;
+            try {
+                var3 = var2.getInputStream();
+                String var4 = IOUtils.toString(var3, Charsets.UTF_8);
+                LOGGER.debug("Successful read, server response was " + var2.getResponseCode());
+                LOGGER.debug("Response: " + var4);
+                var5 = var4;
+                return var5;
+            } catch (IOException var10) {
+                IOUtils.closeQuietly(var3);
+                var3 = var2.getErrorStream();
+                if (var3 == null) {
+                    LOGGER.debug("Request failed", var10);
+                    throw var10;
+                }
+            }
+
+            LOGGER.debug("Reading error page from " + var1);
+            var5 = IOUtils.toString(var3, Charsets.UTF_8);
+            LOGGER.debug("Successful read, server response was " + var2.getResponseCode());
+            LOGGER.debug("Response: " + var5);
+            var6 = var5;
+        } finally {
+            IOUtils.closeQuietly(var3);
+        }
+
+        return var6;
+    }
+
+    public static URL constantURL(String var0) {
+        try {
+            return new URL(var0);
+        } catch (MalformedURLException var2) {
+            throw new Error("Couldn't create constant for " + var0, var2);
+        }
+    }
+
+    public static String buildQuery(Map<String, Object> var0) {
+        if (var0 == null) {
+            return "";
+        } else {
+            StringBuilder var1 = new StringBuilder();
+            Iterator var2 = var0.entrySet().iterator();
+
+            while(var2.hasNext()) {
+                Entry var3 = (Entry)var2.next();
+                if (var1.length() > 0) {
+                    var1.append('&');
+                }
+
+                try {
+                    var1.append(URLEncoder.encode((String)var3.getKey(), "UTF-8"));
+                } catch (UnsupportedEncodingException var6) {
+                    LOGGER.error("Unexpected exception building query", var6);
+                }
+
+                if (var3.getValue() != null) {
+                    var1.append('=');
+
+                    try {
+                        var1.append(URLEncoder.encode(var3.getValue().toString(), "UTF-8"));
+                    } catch (UnsupportedEncodingException var5) {
+                        LOGGER.error("Unexpected exception building query", var5);
+                    }
+                }
+            }
+
+            return var1.toString();
+        }
+    }
+
+    public static URL concatenateURL(URL var0, String var1) {
+        try {
+            return var0.getQuery() != null && var0.getQuery().length() > 0 ? new URL(var0.getProtocol(), var0.getHost(), var0.getPort(), var0.getFile() + "&" + var1) : new URL(var0.getProtocol(), var0.getHost(), var0.getPort(), var0.getFile() + "?" + var1);
+        } catch (MalformedURLException var3) {
+            throw new IllegalArgumentException("Could not concatenate given URL with GET arguments!", var3);
+        }
+    }
+}
diff --git a/com/mojang/authlib/HttpUserAuthentication.java b/com/mojang/authlib/HttpUserAuthentication.java
new file mode 100644
index 0000000..9ca1bc2
--- /dev/null
+++ b/com/mojang/authlib/HttpUserAuthentication.java
@@ -0,0 +1,11 @@
+package com.mojang.authlib;
+
+public abstract class HttpUserAuthentication extends BaseUserAuthentication {
+    protected HttpUserAuthentication(HttpAuthenticationService var1) {
+        super(var1);
+    }
+
+    public HttpAuthenticationService getAuthenticationService() {
+        return (HttpAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/ProfileLookupCallback.java b/com/mojang/authlib/ProfileLookupCallback.java
new file mode 100644
index 0000000..87bfded
--- /dev/null
+++ b/com/mojang/authlib/ProfileLookupCallback.java
@@ -0,0 +1,7 @@
+package com.mojang.authlib;
+
+public interface ProfileLookupCallback {
+    void onProfileLookupSucceeded(GameProfile var1);
+
+    void onProfileLookupFailed(GameProfile var1, Exception var2);
+}
diff --git a/com/mojang/authlib/UserAuthentication.java b/com/mojang/authlib/UserAuthentication.java
new file mode 100644
index 0000000..98eeaf1
--- /dev/null
+++ b/com/mojang/authlib/UserAuthentication.java
@@ -0,0 +1,39 @@
+package com.mojang.authlib;
+
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.properties.PropertyMap;
+import java.util.Map;
+
+public interface UserAuthentication {
+    boolean canLogIn();
+
+    void logIn() throws AuthenticationException;
+
+    void logOut();
+
+    boolean isLoggedIn();
+
+    boolean canPlayOnline();
+
+    GameProfile[] getAvailableProfiles();
+
+    GameProfile getSelectedProfile();
+
+    void selectGameProfile(GameProfile var1) throws AuthenticationException;
+
+    void loadFromStorage(Map<String, Object> var1);
+
+    Map<String, Object> saveForStorage();
+
+    void setUsername(String var1);
+
+    void setPassword(String var1);
+
+    String getAuthenticatedToken();
+
+    String getUserID();
+
+    PropertyMap getUserProperties();
+
+    UserType getUserType();
+}
diff --git a/com/mojang/authlib/UserType.java b/com/mojang/authlib/UserType.java
new file mode 100644
index 0000000..da99d2a
--- /dev/null
+++ b/com/mojang/authlib/UserType.java
@@ -0,0 +1,35 @@
+package com.mojang.authlib;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public enum UserType {
+    LEGACY("legacy"),
+    MOJANG("mojang");
+
+    private static final Map<String, UserType> BY_NAME = new HashMap();
+    private final String name;
+
+    private UserType(String var3) {
+        this.name = var3;
+    }
+
+    public static UserType byName(String var0) {
+        return (UserType)BY_NAME.get(var0.toLowerCase());
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    static {
+        UserType[] var0 = values();
+        int var1 = var0.length;
+
+        for(int var2 = 0; var2 < var1; ++var2) {
+            UserType var3 = var0[var2];
+            BY_NAME.put(var3.name, var3);
+        }
+
+    }
+}
diff --git a/com/mojang/authlib/exceptions/AuthenticationException.java b/com/mojang/authlib/exceptions/AuthenticationException.java
new file mode 100644
index 0000000..6eae1a7
--- /dev/null
+++ b/com/mojang/authlib/exceptions/AuthenticationException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.exceptions;
+
+public class AuthenticationException extends Exception {
+    public AuthenticationException() {
+    }
+
+    public AuthenticationException(String var1) {
+        super(var1);
+    }
+
+    public AuthenticationException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public AuthenticationException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java b/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
new file mode 100644
index 0000000..008ca23
--- /dev/null
+++ b/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.exceptions;
+
+public class AuthenticationUnavailableException extends AuthenticationException {
+    public AuthenticationUnavailableException() {
+    }
+
+    public AuthenticationUnavailableException(String var1) {
+        super(var1);
+    }
+
+    public AuthenticationUnavailableException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public AuthenticationUnavailableException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/exceptions/InvalidCredentialsException.java b/com/mojang/authlib/exceptions/InvalidCredentialsException.java
new file mode 100644
index 0000000..1f59b7c
--- /dev/null
+++ b/com/mojang/authlib/exceptions/InvalidCredentialsException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.exceptions;
+
+public class InvalidCredentialsException extends AuthenticationException {
+    public InvalidCredentialsException() {
+    }
+
+    public InvalidCredentialsException(String var1) {
+        super(var1);
+    }
+
+    public InvalidCredentialsException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public InvalidCredentialsException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/exceptions/UserMigratedException.java b/com/mojang/authlib/exceptions/UserMigratedException.java
new file mode 100644
index 0000000..846f133
--- /dev/null
+++ b/com/mojang/authlib/exceptions/UserMigratedException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.exceptions;
+
+public class UserMigratedException extends InvalidCredentialsException {
+    public UserMigratedException() {
+    }
+
+    public UserMigratedException(String var1) {
+        super(var1);
+    }
+
+    public UserMigratedException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public UserMigratedException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/legacy/LegacyAuthenticationService.java b/com/mojang/authlib/legacy/LegacyAuthenticationService.java
new file mode 100644
index 0000000..8e1bdea
--- /dev/null
+++ b/com/mojang/authlib/legacy/LegacyAuthenticationService.java
@@ -0,0 +1,30 @@
+package com.mojang.authlib.legacy;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.HttpAuthenticationService;
+import java.net.Proxy;
+import org.apache.commons.lang3.Validate;
+
+public class LegacyAuthenticationService extends HttpAuthenticationService {
+    protected LegacyAuthenticationService(Proxy var1) {
+        super(var1);
+    }
+
+    public LegacyUserAuthentication createUserAuthentication(Agent var1) {
+        Validate.notNull(var1);
+        if (var1 != Agent.MINECRAFT) {
+            throw new IllegalArgumentException("Legacy authentication cannot handle anything but Minecraft");
+        } else {
+            return new LegacyUserAuthentication(this);
+        }
+    }
+
+    public LegacyMinecraftSessionService createMinecraftSessionService() {
+        return new LegacyMinecraftSessionService(this);
+    }
+
+    public GameProfileRepository createProfileRepository() {
+        throw new UnsupportedOperationException("Legacy authentication service has no profile repository");
+    }
+}
diff --git a/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java b/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
new file mode 100644
index 0000000..e2bbee0
--- /dev/null
+++ b/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
@@ -0,0 +1,65 @@
+package com.mojang.authlib.legacy;
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.minecraft.HttpMinecraftSessionService;
+import com.mojang.authlib.minecraft.MinecraftProfileTexture;
+import java.io.IOException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+public class LegacyMinecraftSessionService extends HttpMinecraftSessionService {
+    private static final String BASE_URL = "http://session.minecraft.net/game/";
+    private static final URL JOIN_URL = HttpAuthenticationService.constantURL("http://session.minecraft.net/game/joinserver.jsp");
+    private static final URL CHECK_URL = HttpAuthenticationService.constantURL("http://session.minecraft.net/game/checkserver.jsp");
+
+    protected LegacyMinecraftSessionService(LegacyAuthenticationService var1) {
+        super(var1);
+    }
+
+    public void joinServer(GameProfile var1, String var2, String var3) throws AuthenticationException {
+        HashMap var4 = new HashMap();
+        var4.put("user", var1.getName());
+        var4.put("sessionId", var2);
+        var4.put("serverId", var3);
+        URL var5 = HttpAuthenticationService.concatenateURL(JOIN_URL, HttpAuthenticationService.buildQuery(var4));
+
+        try {
+            String var6 = this.getAuthenticationService().performGetRequest(var5);
+            if (!var6.equals("OK")) {
+                throw new AuthenticationException(var6);
+            }
+        } catch (IOException var7) {
+            throw new AuthenticationUnavailableException(var7);
+        }
+    }
+
+    public GameProfile hasJoinedServer(GameProfile var1, String var2) throws AuthenticationUnavailableException {
+        HashMap var3 = new HashMap();
+        var3.put("user", var1.getName());
+        var3.put("serverId", var2);
+        URL var4 = HttpAuthenticationService.concatenateURL(CHECK_URL, HttpAuthenticationService.buildQuery(var3));
+
+        try {
+            String var5 = this.getAuthenticationService().performGetRequest(var4);
+            return var5.equals("YES") ? var1 : null;
+        } catch (IOException var6) {
+            throw new AuthenticationUnavailableException(var6);
+        }
+    }
+
+    public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getTextures(GameProfile var1, boolean var2) {
+        return new HashMap();
+    }
+
+    public GameProfile fillProfileProperties(GameProfile var1, boolean var2) {
+        return var1;
+    }
+
+    public LegacyAuthenticationService getAuthenticationService() {
+        return (LegacyAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/legacy/LegacyUserAuthentication.java b/com/mojang/authlib/legacy/LegacyUserAuthentication.java
new file mode 100644
index 0000000..e256b97
--- /dev/null
+++ b/com/mojang/authlib/legacy/LegacyUserAuthentication.java
@@ -0,0 +1,91 @@
+package com.mojang.authlib.legacy;
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.HttpUserAuthentication;
+import com.mojang.authlib.UserType;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.InvalidCredentialsException;
+import com.mojang.util.UUIDTypeAdapter;
+import java.io.IOException;
+import java.net.URL;
+import java.util.HashMap;
+import org.apache.commons.lang3.StringUtils;
+
+public class LegacyUserAuthentication extends HttpUserAuthentication {
+    private static final URL AUTHENTICATION_URL = HttpAuthenticationService.constantURL("https://login.minecraft.net");
+    private static final int AUTHENTICATION_VERSION = 14;
+    private static final int RESPONSE_PART_PROFILE_NAME = 2;
+    private static final int RESPONSE_PART_SESSION_TOKEN = 3;
+    private static final int RESPONSE_PART_PROFILE_ID = 4;
+    private String sessionToken;
+
+    protected LegacyUserAuthentication(LegacyAuthenticationService var1) {
+        super(var1);
+    }
+
+    public void logIn() throws AuthenticationException {
+        if (StringUtils.isBlank(this.getUsername())) {
+            throw new InvalidCredentialsException("Invalid username");
+        } else if (StringUtils.isBlank(this.getPassword())) {
+            throw new InvalidCredentialsException("Invalid password");
+        } else {
+            HashMap var1 = new HashMap();
+            var1.put("user", this.getUsername());
+            var1.put("password", this.getPassword());
+            var1.put("version", 14);
+
+            String var2;
+            try {
+                var2 = this.getAuthenticationService().performPostRequest(AUTHENTICATION_URL, HttpAuthenticationService.buildQuery(var1), "application/x-www-form-urlencoded").trim();
+            } catch (IOException var7) {
+                throw new AuthenticationException("Authentication server is not responding", var7);
+            }
+
+            String[] var3 = var2.split(":");
+            if (var3.length == 5) {
+                String var4 = var3[4];
+                String var5 = var3[2];
+                String var6 = var3[3];
+                if (!StringUtils.isBlank(var4) && !StringUtils.isBlank(var5) && !StringUtils.isBlank(var6)) {
+                    this.setSelectedProfile(new GameProfile(UUIDTypeAdapter.fromString(var4), var5));
+                    this.sessionToken = var6;
+                    this.setUserType(UserType.LEGACY);
+                } else {
+                    throw new AuthenticationException("Unknown response from authentication server: " + var2);
+                }
+            } else {
+                throw new InvalidCredentialsException(var2);
+            }
+        }
+    }
+
+    public void logOut() {
+        super.logOut();
+        this.sessionToken = null;
+    }
+
+    public boolean canPlayOnline() {
+        return this.isLoggedIn() && this.getSelectedProfile() != null && this.getAuthenticatedToken() != null;
+    }
+
+    public GameProfile[] getAvailableProfiles() {
+        return this.getSelectedProfile() != null ? new GameProfile[]{this.getSelectedProfile()} : new GameProfile[0];
+    }
+
+    public void selectGameProfile(GameProfile var1) throws AuthenticationException {
+        throw new UnsupportedOperationException("Game profiles cannot be changed in the legacy authentication service");
+    }
+
+    public String getAuthenticatedToken() {
+        return this.sessionToken;
+    }
+
+    public String getUserID() {
+        return this.getUsername();
+    }
+
+    public LegacyAuthenticationService getAuthenticationService() {
+        return (LegacyAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java b/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
new file mode 100644
index 0000000..b5d09a4
--- /dev/null
+++ b/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
@@ -0,0 +1,15 @@
+package com.mojang.authlib.minecraft;
+
+import com.mojang.authlib.AuthenticationService;
+
+public abstract class BaseMinecraftSessionService implements MinecraftSessionService {
+    private final AuthenticationService authenticationService;
+
+    protected BaseMinecraftSessionService(AuthenticationService var1) {
+        this.authenticationService = var1;
+    }
+
+    public AuthenticationService getAuthenticationService() {
+        return this.authenticationService;
+    }
+}
diff --git a/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java b/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
new file mode 100644
index 0000000..b590d0f
--- /dev/null
+++ b/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
@@ -0,0 +1,13 @@
+package com.mojang.authlib.minecraft;
+
+import com.mojang.authlib.HttpAuthenticationService;
+
+public abstract class HttpMinecraftSessionService extends BaseMinecraftSessionService {
+    protected HttpMinecraftSessionService(HttpAuthenticationService var1) {
+        super(var1);
+    }
+
+    public HttpAuthenticationService getAuthenticationService() {
+        return (HttpAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/minecraft/InsecureTextureException.java b/com/mojang/authlib/minecraft/InsecureTextureException.java
new file mode 100644
index 0000000..449b71e
--- /dev/null
+++ b/com/mojang/authlib/minecraft/InsecureTextureException.java
@@ -0,0 +1,42 @@
+package com.mojang.authlib.minecraft;
+
+import com.mojang.authlib.GameProfile;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.UUID;
+
+public class InsecureTextureException extends RuntimeException {
+    public InsecureTextureException(String var1) {
+        super(var1);
+    }
+
+    public static class MissingTextureException extends InsecureTextureException {
+        public MissingTextureException() {
+            super("No texture information found");
+        }
+    }
+
+    public static class OutdatedTextureException extends InsecureTextureException {
+        private final Date validFrom;
+        private final Calendar limit;
+
+        public OutdatedTextureException(Date var1, Calendar var2) {
+            super("Decrypted textures payload is too old (" + var1 + ", but we need it to be at least " + var2 + ")");
+            this.validFrom = var1;
+            this.limit = var2;
+        }
+    }
+
+    public static class WrongTextureOwnerException extends InsecureTextureException {
+        private final GameProfile expected;
+        private final UUID resultId;
+        private final String resultName;
+
+        public WrongTextureOwnerException(GameProfile var1, UUID var2, String var3) {
+            super("Decrypted textures payload was for another user (expected " + var1.getId() + "/" + var1.getName() + " but was for " + var2 + "/" + var3 + ")");
+            this.expected = var1;
+            this.resultId = var2;
+            this.resultName = var3;
+        }
+    }
+}
diff --git a/com/mojang/authlib/minecraft/MinecraftProfileTexture.java b/com/mojang/authlib/minecraft/MinecraftProfileTexture.java
new file mode 100644
index 0000000..dab4fe8
--- /dev/null
+++ b/com/mojang/authlib/minecraft/MinecraftProfileTexture.java
@@ -0,0 +1,41 @@
+package com.mojang.authlib.minecraft;
+
+import java.util.Map;
+import javax.annotation.Nullable;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.builder.ToStringBuilder;
+
+public class MinecraftProfileTexture {
+    private final String url;
+    private final Map<String, String> metadata;
+
+    public MinecraftProfileTexture(String var1, Map<String, String> var2) {
+        this.url = var1;
+        this.metadata = var2;
+    }
+
+    public String getUrl() {
+        return this.url;
+    }
+
+    @Nullable
+    public String getMetadata(String var1) {
+        return this.metadata == null ? null : (String)this.metadata.get(var1);
+    }
+
+    public String getHash() {
+        return FilenameUtils.getBaseName(this.url);
+    }
+
+    public String toString() {
+        return (new ToStringBuilder(this)).append("url", this.url).append("hash", this.getHash()).toString();
+    }
+
+    public static enum Type {
+        SKIN,
+        CAPE;
+
+        private Type() {
+        }
+    }
+}
diff --git a/com/mojang/authlib/minecraft/MinecraftSessionService.java b/com/mojang/authlib/minecraft/MinecraftSessionService.java
new file mode 100644
index 0000000..5b19bfa
--- /dev/null
+++ b/com/mojang/authlib/minecraft/MinecraftSessionService.java
@@ -0,0 +1,16 @@
+package com.mojang.authlib.minecraft;
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import java.util.Map;
+
+public interface MinecraftSessionService {
+    void joinServer(GameProfile var1, String var2, String var3) throws AuthenticationException;
+
+    GameProfile hasJoinedServer(GameProfile var1, String var2) throws AuthenticationUnavailableException;
+
+    Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getTextures(GameProfile var1, boolean var2);
+
+    GameProfile fillProfileProperties(GameProfile var1, boolean var2);
+}
diff --git a/com/mojang/authlib/properties/Property.java b/com/mojang/authlib/properties/Property.java
new file mode 100644
index 0000000..dba9b0f
--- /dev/null
+++ b/com/mojang/authlib/properties/Property.java
@@ -0,0 +1,57 @@
+package com.mojang.authlib.properties;
+
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.security.PublicKey;
+import java.security.Signature;
+import java.security.SignatureException;
+import org.apache.commons.codec.binary.Base64;
+
+public class Property {
+    private final String name;
+    private final String value;
+    private final String signature;
+
+    public Property(String var1, String var2) {
+        this(var1, var2, (String)null);
+    }
+
+    public Property(String var1, String var2, String var3) {
+        this.name = var1;
+        this.value = var2;
+        this.signature = var3;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getValue() {
+        return this.value;
+    }
+
+    public String getSignature() {
+        return this.signature;
+    }
+
+    public boolean hasSignature() {
+        return this.signature != null;
+    }
+
+    public boolean isSignatureValid(PublicKey var1) {
+        try {
+            Signature var2 = Signature.getInstance("SHA1withRSA");
+            var2.initVerify(var1);
+            var2.update(this.value.getBytes());
+            return var2.verify(Base64.decodeBase64(this.signature));
+        } catch (NoSuchAlgorithmException var3) {
+            var3.printStackTrace();
+        } catch (InvalidKeyException var4) {
+            var4.printStackTrace();
+        } catch (SignatureException var5) {
+            var5.printStackTrace();
+        }
+
+        return false;
+    }
+}
diff --git a/com/mojang/authlib/properties/PropertyMap.java b/com/mojang/authlib/properties/PropertyMap.java
new file mode 100644
index 0000000..548a122
--- /dev/null
+++ b/com/mojang/authlib/properties/PropertyMap.java
@@ -0,0 +1,93 @@
+package com.mojang.authlib.properties;
+
+import com.google.common.collect.ForwardingMultimap;
+import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Multimap;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import java.lang.reflect.Type;
+import java.util.Iterator;
+import java.util.Map.Entry;
+
+public class PropertyMap extends ForwardingMultimap<String, Property> {
+    private final Multimap<String, Property> properties = LinkedHashMultimap.create();
+
+    public PropertyMap() {
+    }
+
+    protected Multimap<String, Property> delegate() {
+        return this.properties;
+    }
+
+    public static class Serializer implements JsonSerializer<PropertyMap>, JsonDeserializer<PropertyMap> {
+        public Serializer() {
+        }
+
+        public PropertyMap deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            PropertyMap var4 = new PropertyMap();
+            if (var1 instanceof JsonObject) {
+                JsonObject var5 = (JsonObject)var1;
+                Iterator var6 = var5.entrySet().iterator();
+
+                while(true) {
+                    Entry var7;
+                    do {
+                        if (!var6.hasNext()) {
+                            return var4;
+                        }
+
+                        var7 = (Entry)var6.next();
+                    } while(!(var7.getValue() instanceof JsonArray));
+
+                    Iterator var8 = ((JsonArray)var7.getValue()).iterator();
+
+                    while(var8.hasNext()) {
+                        JsonElement var9 = (JsonElement)var8.next();
+                        var4.put(var7.getKey(), new Property((String)var7.getKey(), var9.getAsString()));
+                    }
+                }
+            } else if (var1 instanceof JsonArray) {
+                Iterator var10 = ((JsonArray)var1).iterator();
+
+                while(var10.hasNext()) {
+                    JsonElement var11 = (JsonElement)var10.next();
+                    if (var11 instanceof JsonObject) {
+                        JsonObject var12 = (JsonObject)var11;
+                        String var13 = var12.getAsJsonPrimitive("name").getAsString();
+                        String var14 = var12.getAsJsonPrimitive("value").getAsString();
+                        if (var12.has("signature")) {
+                            var4.put(var13, new Property(var13, var14, var12.getAsJsonPrimitive("signature").getAsString()));
+                        } else {
+                            var4.put(var13, new Property(var13, var14));
+                        }
+                    }
+                }
+            }
+
+            return var4;
+        }
+
+        public JsonElement serialize(PropertyMap var1, Type var2, JsonSerializationContext var3) {
+            JsonArray var4 = new JsonArray();
+
+            JsonObject var7;
+            for(Iterator var5 = var1.values().iterator(); var5.hasNext(); var4.add(var7)) {
+                Property var6 = (Property)var5.next();
+                var7 = new JsonObject();
+                var7.addProperty("name", var6.getName());
+                var7.addProperty("value", var6.getValue());
+                if (var6.hasSignature()) {
+                    var7.addProperty("signature", var6.getSignature());
+                }
+            }
+
+            return var4;
+        }
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java b/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
new file mode 100644
index 0000000..27ffcea
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.yggdrasil;
+
+public class ProfileIncompleteException extends RuntimeException {
+    public ProfileIncompleteException() {
+    }
+
+    public ProfileIncompleteException(String var1) {
+        super(var1);
+    }
+
+    public ProfileIncompleteException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public ProfileIncompleteException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java b/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
new file mode 100644
index 0000000..6aca7b8
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
@@ -0,0 +1,18 @@
+package com.mojang.authlib.yggdrasil;
+
+public class ProfileNotFoundException extends RuntimeException {
+    public ProfileNotFoundException() {
+    }
+
+    public ProfileNotFoundException(String var1) {
+        super(var1);
+    }
+
+    public ProfileNotFoundException(String var1, Throwable var2) {
+        super(var1, var2);
+    }
+
+    public ProfileNotFoundException(Throwable var1) {
+        super(var1);
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java b/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
new file mode 100644
index 0000000..53a0ec9
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
@@ -0,0 +1,119 @@
+package com.mojang.authlib.yggdrasil;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.exceptions.InvalidCredentialsException;
+import com.mojang.authlib.exceptions.UserMigratedException;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.properties.PropertyMap;
+import com.mojang.authlib.yggdrasil.response.ProfileSearchResultsResponse;
+import com.mojang.authlib.yggdrasil.response.Response;
+import com.mojang.util.UUIDTypeAdapter;
+import java.io.IOException;
+import java.lang.reflect.Type;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.UUID;
+import org.apache.commons.lang3.StringUtils;
+
+public class YggdrasilAuthenticationService extends HttpAuthenticationService {
+    private final String clientToken;
+    private final Gson gson;
+
+    public YggdrasilAuthenticationService(Proxy var1, String var2) {
+        super(var1);
+        this.clientToken = var2;
+        GsonBuilder var3 = new GsonBuilder();
+        var3.registerTypeAdapter(GameProfile.class, new YggdrasilAuthenticationService.GameProfileSerializer());
+        var3.registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer());
+        var3.registerTypeAdapter(UUID.class, new UUIDTypeAdapter());
+        var3.registerTypeAdapter(ProfileSearchResultsResponse.class, new ProfileSearchResultsResponse.Serializer());
+        this.gson = var3.create();
+    }
+
+    public UserAuthentication createUserAuthentication(Agent var1) {
+        return new YggdrasilUserAuthentication(this, var1);
+    }
+
+    public MinecraftSessionService createMinecraftSessionService() {
+        return new YggdrasilMinecraftSessionService(this);
+    }
+
+    public GameProfileRepository createProfileRepository() {
+        return new YggdrasilGameProfileRepository(this);
+    }
+
+    protected <T extends Response> T makeRequest(URL var1, Object var2, Class<T> var3) throws AuthenticationException {
+        try {
+            String var4 = var2 == null ? this.performGetRequest(var1) : this.performPostRequest(var1, this.gson.toJson(var2), "application/json");
+            Response var5 = (Response)this.gson.fromJson(var4, var3);
+            if (var5 == null) {
+                return null;
+            } else if (StringUtils.isNotBlank(var5.getError())) {
+                if ("UserMigratedException".equals(var5.getCause())) {
+                    throw new UserMigratedException(var5.getErrorMessage());
+                } else if (var5.getError().equals("ForbiddenOperationException")) {
+                    throw new InvalidCredentialsException(var5.getErrorMessage());
+                } else {
+                    throw new AuthenticationException(var5.getErrorMessage());
+                }
+            } else {
+                return var5;
+            }
+        } catch (IOException var6) {
+            throw new AuthenticationUnavailableException("Cannot contact authentication server", var6);
+        } catch (IllegalStateException var7) {
+            throw new AuthenticationUnavailableException("Cannot contact authentication server", var7);
+        } catch (JsonParseException var8) {
+            throw new AuthenticationUnavailableException("Cannot contact authentication server", var8);
+        }
+    }
+
+    public String getClientToken() {
+        return this.clientToken;
+    }
+
+    private static class GameProfileSerializer implements JsonSerializer<GameProfile>, JsonDeserializer<GameProfile> {
+        private GameProfileSerializer() {
+        }
+
+        public GameProfile deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            JsonObject var4 = (JsonObject)var1;
+            UUID var5 = var4.has("id") ? (UUID)var3.deserialize(var4.get("id"), UUID.class) : null;
+            String var6 = var4.has("name") ? var4.getAsJsonPrimitive("name").getAsString() : null;
+            return new GameProfile(var5, var6);
+        }
+
+        public JsonElement serialize(GameProfile var1, Type var2, JsonSerializationContext var3) {
+            JsonObject var4 = new JsonObject();
+            if (var1.getId() != null) {
+                var4.add("id", var3.serialize(var1.getId()));
+            }
+
+            if (var1.getName() != null) {
+                var4.addProperty("name", var1.getName());
+            }
+
+            return var4;
+        }
+
+        // $FF: synthetic method
+        GameProfileSerializer(Object var1) {
+            this();
+        }
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java b/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
new file mode 100644
index 0000000..035208a
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
@@ -0,0 +1,111 @@
+package com.mojang.authlib.yggdrasil;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Sets;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.ProfileLookupCallback;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.yggdrasil.response.ProfileSearchResultsResponse;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.UUID;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class YggdrasilGameProfileRepository implements GameProfileRepository {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final String BASE_URL = "https://api.mojang.com/";
+    private static final String SEARCH_PAGE_URL = "https://api.mojang.com/profiles/";
+    private static final int ENTRIES_PER_PAGE = 2;
+    private static final int MAX_FAIL_COUNT = 3;
+    private static final int DELAY_BETWEEN_PAGES = 100;
+    private static final int DELAY_BETWEEN_FAILURES = 750;
+    private final YggdrasilAuthenticationService authenticationService;
+
+    public YggdrasilGameProfileRepository(YggdrasilAuthenticationService var1) {
+        this.authenticationService = var1;
+    }
+
+    public void findProfilesByNames(String[] var1, Agent var2, ProfileLookupCallback var3) {
+        HashSet var4 = Sets.newHashSet();
+        String[] var5 = var1;
+        int var6 = var1.length;
+
+        for(int var7 = 0; var7 < var6; ++var7) {
+            String var8 = var5[var7];
+            if (!Strings.isNullOrEmpty(var8)) {
+                var4.add(var8.toLowerCase());
+            }
+        }
+
+        byte var19 = 0;
+        Iterator var20 = Iterables.partition(var4, 2).iterator();
+
+        while(var20.hasNext()) {
+            List var21 = (List)var20.next();
+            int var22 = 0;
+
+            while(true) {
+                boolean var9 = false;
+
+                try {
+                    ProfileSearchResultsResponse var23 = (ProfileSearchResultsResponse)this.authenticationService.makeRequest(HttpAuthenticationService.constantURL("https://api.mojang.com/profiles/" + var2.getName().toLowerCase()), var21, ProfileSearchResultsResponse.class);
+                    var22 = 0;
+                    LOGGER.debug("Page {} returned {} results, parsing", new Object[]{Integer.valueOf(var19), var23.getProfiles().length});
+                    HashSet var24 = Sets.newHashSet(var21);
+                    GameProfile[] var25 = var23.getProfiles();
+                    int var13 = var25.length;
+
+                    for(int var14 = 0; var14 < var13; ++var14) {
+                        GameProfile var15 = var25[var14];
+                        LOGGER.debug("Successfully looked up profile {}", new Object[]{var15});
+                        var24.remove(var15.getName().toLowerCase());
+                        var3.onProfileLookupSucceeded(var15);
+                    }
+
+                    Iterator var26 = var24.iterator();
+
+                    while(var26.hasNext()) {
+                        String var27 = (String)var26.next();
+                        LOGGER.debug("Couldn't find profile {}", new Object[]{var27});
+                        var3.onProfileLookupFailed(new GameProfile((UUID)null, var27), new ProfileNotFoundException("Server did not find the requested profile"));
+                    }
+
+                    try {
+                        Thread.sleep(100L);
+                    } catch (InterruptedException var17) {
+                    }
+                } catch (AuthenticationException var18) {
+                    AuthenticationException var10 = var18;
+                    ++var22;
+                    if (var22 == 3) {
+                        Iterator var11 = var21.iterator();
+
+                        while(var11.hasNext()) {
+                            String var12 = (String)var11.next();
+                            LOGGER.debug("Couldn't find profile {} because of a server error", new Object[]{var12});
+                            var3.onProfileLookupFailed(new GameProfile((UUID)null, var12), var10);
+                        }
+                    } else {
+                        try {
+                            Thread.sleep(750L);
+                        } catch (InterruptedException var16) {
+                        }
+
+                        var9 = true;
+                    }
+                }
+
+                if (!var9) {
+                    break;
+                }
+            }
+        }
+
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java b/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
new file mode 100644
index 0000000..a9682f1
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
@@ -0,0 +1,159 @@
+package com.mojang.authlib.yggdrasil;
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.Iterables;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonParseException;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.minecraft.HttpMinecraftSessionService;
+import com.mojang.authlib.minecraft.InsecureTextureException;
+import com.mojang.authlib.minecraft.MinecraftProfileTexture;
+import com.mojang.authlib.properties.Property;
+import com.mojang.authlib.yggdrasil.request.JoinMinecraftServerRequest;
+import com.mojang.authlib.yggdrasil.response.HasJoinedMinecraftServerResponse;
+import com.mojang.authlib.yggdrasil.response.MinecraftProfilePropertiesResponse;
+import com.mojang.authlib.yggdrasil.response.MinecraftTexturesPayload;
+import com.mojang.authlib.yggdrasil.response.Response;
+import com.mojang.util.UUIDTypeAdapter;
+import java.net.URL;
+import java.security.KeyFactory;
+import java.security.PublicKey;
+import java.security.spec.X509EncodedKeySpec;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.TimeUnit;
+import org.apache.commons.codec.Charsets;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionService {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final String BASE_URL = "https://sessionserver.mojang.com/session/minecraft/";
+    private static final URL JOIN_URL = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/join");
+    private static final URL CHECK_URL = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/hasJoined");
+    private final PublicKey publicKey;
+    private final Gson gson = (new GsonBuilder()).registerTypeAdapter(UUID.class, new UUIDTypeAdapter()).create();
+    private final LoadingCache<GameProfile, GameProfile> insecureProfiles;
+
+    protected YggdrasilMinecraftSessionService(YggdrasilAuthenticationService var1) {
+        super(var1);
+        this.insecureProfiles = CacheBuilder.newBuilder().expireAfterWrite(6L, TimeUnit.HOURS).build(new CacheLoader<GameProfile, GameProfile>() {
+            public GameProfile load(GameProfile var1) throws Exception {
+                return YggdrasilMinecraftSessionService.this.fillGameProfile(var1, false);
+            }
+        });
+
+        try {
+            X509EncodedKeySpec var2 = new X509EncodedKeySpec(IOUtils.toByteArray(YggdrasilMinecraftSessionService.class.getResourceAsStream("/yggdrasil_session_pubkey.der")));
+            KeyFactory var3 = KeyFactory.getInstance("RSA");
+            this.publicKey = var3.generatePublic(var2);
+        } catch (Exception var4) {
+            throw new Error("Missing/invalid yggdrasil public key!");
+        }
+    }
+
+    public void joinServer(GameProfile var1, String var2, String var3) throws AuthenticationException {
+        JoinMinecraftServerRequest var4 = new JoinMinecraftServerRequest();
+        var4.accessToken = var2;
+        var4.selectedProfile = var1.getId();
+        var4.serverId = var3;
+        this.getAuthenticationService().makeRequest(JOIN_URL, var4, Response.class);
+    }
+
+    public GameProfile hasJoinedServer(GameProfile var1, String var2) throws AuthenticationUnavailableException {
+        HashMap var3 = new HashMap();
+        var3.put("username", var1.getName());
+        var3.put("serverId", var2);
+        URL var4 = HttpAuthenticationService.concatenateURL(CHECK_URL, HttpAuthenticationService.buildQuery(var3));
+
+        try {
+            HasJoinedMinecraftServerResponse var5 = (HasJoinedMinecraftServerResponse)this.getAuthenticationService().makeRequest(var4, (Object)null, HasJoinedMinecraftServerResponse.class);
+            if (var5 != null && var5.getId() != null) {
+                GameProfile var6 = new GameProfile(var5.getId(), var1.getName());
+                if (var5.getProperties() != null) {
+                    var6.getProperties().putAll(var5.getProperties());
+                }
+
+                return var6;
+            } else {
+                return null;
+            }
+        } catch (AuthenticationUnavailableException var7) {
+            throw var7;
+        } catch (AuthenticationException var8) {
+            return null;
+        }
+    }
+
+    public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getTextures(GameProfile var1, boolean var2) {
+        Property var3 = (Property)Iterables.getFirst(var1.getProperties().get("textures"), (Object)null);
+        if (var3 == null) {
+            return new HashMap();
+        } else {
+            if (var2) {
+                if (!var3.hasSignature()) {
+                    LOGGER.error("Signature is missing from textures payload");
+                    throw new InsecureTextureException("Signature is missing from textures payload");
+                }
+
+                if (!var3.isSignatureValid(this.publicKey)) {
+                    LOGGER.error("Textures payload has been tampered with (signature invalid)");
+                    throw new InsecureTextureException("Textures payload has been tampered with (signature invalid)");
+                }
+            }
+
+            MinecraftTexturesPayload var4;
+            try {
+                String var5 = new String(Base64.decodeBase64(var3.getValue()), Charsets.UTF_8);
+                var4 = (MinecraftTexturesPayload)this.gson.fromJson(var5, MinecraftTexturesPayload.class);
+            } catch (JsonParseException var6) {
+                LOGGER.error("Could not decode textures payload", var6);
+                return new HashMap();
+            }
+
+            return (Map)(var4.getTextures() == null ? new HashMap() : var4.getTextures());
+        }
+    }
+
+    public GameProfile fillProfileProperties(GameProfile var1, boolean var2) {
+        if (var1.getId() == null) {
+            return var1;
+        } else {
+            return !var2 ? (GameProfile)this.insecureProfiles.getUnchecked(var1) : this.fillGameProfile(var1, true);
+        }
+    }
+
+    protected GameProfile fillGameProfile(GameProfile var1, boolean var2) {
+        try {
+            URL var3 = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/profile/" + UUIDTypeAdapter.fromUUID(var1.getId()));
+            var3 = HttpAuthenticationService.concatenateURL(var3, "unsigned=" + !var2);
+            MinecraftProfilePropertiesResponse var4 = (MinecraftProfilePropertiesResponse)this.getAuthenticationService().makeRequest(var3, (Object)null, MinecraftProfilePropertiesResponse.class);
+            if (var4 == null) {
+                LOGGER.debug("Couldn't fetch profile properties for " + var1 + " as the profile does not exist");
+                return var1;
+            } else {
+                GameProfile var5 = new GameProfile(var4.getId(), var4.getName());
+                var5.getProperties().putAll(var4.getProperties());
+                var1.getProperties().putAll(var4.getProperties());
+                LOGGER.debug("Successfully fetched profile properties for " + var1);
+                return var5;
+            }
+        } catch (AuthenticationException var6) {
+            LOGGER.warn("Couldn't look up profile properties for " + var1, var6);
+            return var1;
+        }
+    }
+
+    public YggdrasilAuthenticationService getAuthenticationService() {
+        return (YggdrasilAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java b/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
new file mode 100644
index 0000000..4c16fbb
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
@@ -0,0 +1,239 @@
+package com.mojang.authlib.yggdrasil;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.HttpAuthenticationService;
+import com.mojang.authlib.HttpUserAuthentication;
+import com.mojang.authlib.UserType;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.InvalidCredentialsException;
+import com.mojang.authlib.yggdrasil.request.AuthenticationRequest;
+import com.mojang.authlib.yggdrasil.request.RefreshRequest;
+import com.mojang.authlib.yggdrasil.request.ValidateRequest;
+import com.mojang.authlib.yggdrasil.response.AuthenticationResponse;
+import com.mojang.authlib.yggdrasil.response.RefreshResponse;
+import com.mojang.authlib.yggdrasil.response.Response;
+import com.mojang.authlib.yggdrasil.response.User;
+import java.net.URL;
+import java.util.Arrays;
+import java.util.Map;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class YggdrasilUserAuthentication extends HttpUserAuthentication {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final String BASE_URL = "https://authserver.mojang.com/";
+    private static final URL ROUTE_AUTHENTICATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/authenticate");
+    private static final URL ROUTE_REFRESH = HttpAuthenticationService.constantURL("https://authserver.mojang.com/refresh");
+    private static final URL ROUTE_VALIDATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/validate");
+    private static final URL ROUTE_INVALIDATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/invalidate");
+    private static final URL ROUTE_SIGNOUT = HttpAuthenticationService.constantURL("https://authserver.mojang.com/signout");
+    private static final String STORAGE_KEY_ACCESS_TOKEN = "accessToken";
+    private final Agent agent;
+    private GameProfile[] profiles;
+    private String accessToken;
+    private boolean isOnline;
+
+    public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, Agent var2) {
+        super(var1);
+        this.agent = var2;
+    }
+
+    public boolean canLogIn() {
+        return !this.canPlayOnline() && StringUtils.isNotBlank(this.getUsername()) && (StringUtils.isNotBlank(this.getPassword()) || StringUtils.isNotBlank(this.getAuthenticatedToken()));
+    }
+
+    public void logIn() throws AuthenticationException {
+        if (StringUtils.isBlank(this.getUsername())) {
+            throw new InvalidCredentialsException("Invalid username");
+        } else {
+            if (StringUtils.isNotBlank(this.getAuthenticatedToken())) {
+                this.logInWithToken();
+            } else {
+                if (!StringUtils.isNotBlank(this.getPassword())) {
+                    throw new InvalidCredentialsException("Invalid password");
+                }
+
+                this.logInWithPassword();
+            }
+
+        }
+    }
+
+    protected void logInWithPassword() throws AuthenticationException {
+        if (StringUtils.isBlank(this.getUsername())) {
+            throw new InvalidCredentialsException("Invalid username");
+        } else if (StringUtils.isBlank(this.getPassword())) {
+            throw new InvalidCredentialsException("Invalid password");
+        } else {
+            LOGGER.info("Logging in with username & password");
+            AuthenticationRequest var1 = new AuthenticationRequest(this, this.getUsername(), this.getPassword());
+            AuthenticationResponse var2 = (AuthenticationResponse)this.getAuthenticationService().makeRequest(ROUTE_AUTHENTICATE, var1, AuthenticationResponse.class);
+            if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+                throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
+            } else {
+                if (var2.getSelectedProfile() != null) {
+                    this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
+                } else if (ArrayUtils.isNotEmpty(var2.getAvailableProfiles())) {
+                    this.setUserType(var2.getAvailableProfiles()[0].isLegacy() ? UserType.LEGACY : UserType.MOJANG);
+                }
+
+                User var3 = var2.getUser();
+                if (var3 != null && var3.getId() != null) {
+                    this.setUserid(var3.getId());
+                } else {
+                    this.setUserid(this.getUsername());
+                }
+
+                this.isOnline = true;
+                this.accessToken = var2.getAccessToken();
+                this.profiles = var2.getAvailableProfiles();
+                this.setSelectedProfile(var2.getSelectedProfile());
+                this.getModifiableUserProperties().clear();
+                this.updateUserProperties(var3);
+            }
+        }
+    }
+
+    protected void updateUserProperties(User var1) {
+        if (var1 != null) {
+            if (var1.getProperties() != null) {
+                this.getModifiableUserProperties().putAll(var1.getProperties());
+            }
+
+        }
+    }
+
+    protected void logInWithToken() throws AuthenticationException {
+        if (StringUtils.isBlank(this.getUserID())) {
+            if (!StringUtils.isBlank(this.getUsername())) {
+                throw new InvalidCredentialsException("Invalid uuid & username");
+            }
+
+            this.setUserid(this.getUsername());
+        }
+
+        if (StringUtils.isBlank(this.getAuthenticatedToken())) {
+            throw new InvalidCredentialsException("Invalid access token");
+        } else {
+            LOGGER.info("Logging in with access token");
+            if (this.checkTokenValidity()) {
+                LOGGER.debug("Skipping refresh call as we're safely logged in.");
+                this.isOnline = true;
+            } else {
+                RefreshRequest var1 = new RefreshRequest(this);
+                RefreshResponse var2 = (RefreshResponse)this.getAuthenticationService().makeRequest(ROUTE_REFRESH, var1, RefreshResponse.class);
+                if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+                    throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
+                } else {
+                    if (var2.getSelectedProfile() != null) {
+                        this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
+                    } else if (ArrayUtils.isNotEmpty(var2.getAvailableProfiles())) {
+                        this.setUserType(var2.getAvailableProfiles()[0].isLegacy() ? UserType.LEGACY : UserType.MOJANG);
+                    }
+
+                    if (var2.getUser() != null && var2.getUser().getId() != null) {
+                        this.setUserid(var2.getUser().getId());
+                    } else {
+                        this.setUserid(this.getUsername());
+                    }
+
+                    this.isOnline = true;
+                    this.accessToken = var2.getAccessToken();
+                    this.profiles = var2.getAvailableProfiles();
+                    this.setSelectedProfile(var2.getSelectedProfile());
+                    this.getModifiableUserProperties().clear();
+                    this.updateUserProperties(var2.getUser());
+                }
+            }
+        }
+    }
+
+    protected boolean checkTokenValidity() throws AuthenticationException {
+        ValidateRequest var1 = new ValidateRequest(this);
+
+        try {
+            this.getAuthenticationService().makeRequest(ROUTE_VALIDATE, var1, Response.class);
+            return true;
+        } catch (AuthenticationException var3) {
+            return false;
+        }
+    }
+
+    public void logOut() {
+        super.logOut();
+        this.accessToken = null;
+        this.profiles = null;
+        this.isOnline = false;
+    }
+
+    public GameProfile[] getAvailableProfiles() {
+        return this.profiles;
+    }
+
+    public boolean isLoggedIn() {
+        return StringUtils.isNotBlank(this.accessToken);
+    }
+
+    public boolean canPlayOnline() {
+        return this.isLoggedIn() && this.getSelectedProfile() != null && this.isOnline;
+    }
+
+    public void selectGameProfile(GameProfile var1) throws AuthenticationException {
+        if (!this.isLoggedIn()) {
+            throw new AuthenticationException("Cannot change game profile whilst not logged in");
+        } else if (this.getSelectedProfile() != null) {
+            throw new AuthenticationException("Cannot change game profile. You must log out and back in.");
+        } else if (var1 != null && ArrayUtils.contains(this.profiles, var1)) {
+            RefreshRequest var2 = new RefreshRequest(this, var1);
+            RefreshResponse var3 = (RefreshResponse)this.getAuthenticationService().makeRequest(ROUTE_REFRESH, var2, RefreshResponse.class);
+            if (!var3.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+                throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
+            } else {
+                this.isOnline = true;
+                this.accessToken = var3.getAccessToken();
+                this.setSelectedProfile(var3.getSelectedProfile());
+            }
+        } else {
+            throw new IllegalArgumentException("Invalid profile '" + var1 + "'");
+        }
+    }
+
+    public void loadFromStorage(Map<String, Object> var1) {
+        super.loadFromStorage(var1);
+        this.accessToken = String.valueOf(var1.get("accessToken"));
+    }
+
+    public Map<String, Object> saveForStorage() {
+        Map var1 = super.saveForStorage();
+        if (StringUtils.isNotBlank(this.getAuthenticatedToken())) {
+            var1.put("accessToken", this.getAuthenticatedToken());
+        }
+
+        return var1;
+    }
+
+    /** @deprecated */
+    @Deprecated
+    public String getSessionToken() {
+        return this.isLoggedIn() && this.getSelectedProfile() != null && this.canPlayOnline() ? String.format("token:%s:%s", this.getAuthenticatedToken(), this.getSelectedProfile().getId()) : null;
+    }
+
+    public String getAuthenticatedToken() {
+        return this.accessToken;
+    }
+
+    public Agent getAgent() {
+        return this.agent;
+    }
+
+    public String toString() {
+        return "YggdrasilAuthenticationService{agent=" + this.agent + ", profiles=" + Arrays.toString(this.profiles) + ", selectedProfile=" + this.getSelectedProfile() + ", username='" + this.getUsername() + '\'' + ", isLoggedIn=" + this.isLoggedIn() + ", userType=" + this.getUserType() + ", canPlayOnline=" + this.canPlayOnline() + ", accessToken='" + this.accessToken + '\'' + ", clientToken='" + this.getAuthenticationService().getClientToken() + '\'' + '}';
+    }
+
+    public YggdrasilAuthenticationService getAuthenticationService() {
+        return (YggdrasilAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java b/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
new file mode 100644
index 0000000..4801305
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
@@ -0,0 +1,19 @@
+package com.mojang.authlib.yggdrasil.request;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+
+public class AuthenticationRequest {
+    private Agent agent;
+    private String username;
+    private String password;
+    private String clientToken;
+    private boolean requestUser = true;
+
+    public AuthenticationRequest(YggdrasilUserAuthentication var1, String var2, String var3) {
+        this.agent = var1.getAgent();
+        this.username = var2;
+        this.clientToken = var1.getAuthenticationService().getClientToken();
+        this.password = var3;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java b/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
new file mode 100644
index 0000000..7643687
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
@@ -0,0 +1,13 @@
+package com.mojang.authlib.yggdrasil.request;
+
+import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+
+public class InvalidateRequest {
+    private String accessToken;
+    private String clientToken;
+
+    public InvalidateRequest(YggdrasilUserAuthentication var1) {
+        this.accessToken = var1.getAuthenticatedToken();
+        this.clientToken = var1.getAuthenticationService().getClientToken();
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java b/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
new file mode 100644
index 0000000..03892bd
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
@@ -0,0 +1,12 @@
+package com.mojang.authlib.yggdrasil.request;
+
+import java.util.UUID;
+
+public class JoinMinecraftServerRequest {
+    public String accessToken;
+    public UUID selectedProfile;
+    public String serverId;
+
+    public JoinMinecraftServerRequest() {
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/request/RefreshRequest.java b/com/mojang/authlib/yggdrasil/request/RefreshRequest.java
new file mode 100644
index 0000000..af5e341
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/request/RefreshRequest.java
@@ -0,0 +1,22 @@
+package com.mojang.authlib.yggdrasil.request;
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+
+public class RefreshRequest {
+    private String clientToken;
+    private String accessToken;
+    private GameProfile selectedProfile;
+    private boolean requestUser;
+
+    public RefreshRequest(YggdrasilUserAuthentication var1) {
+        this(var1, (GameProfile)null);
+    }
+
+    public RefreshRequest(YggdrasilUserAuthentication var1, GameProfile var2) {
+        this.requestUser = true;
+        this.clientToken = var1.getAuthenticationService().getClientToken();
+        this.accessToken = var1.getAuthenticatedToken();
+        this.selectedProfile = var2;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/request/ValidateRequest.java b/com/mojang/authlib/yggdrasil/request/ValidateRequest.java
new file mode 100644
index 0000000..5eb7f84
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/request/ValidateRequest.java
@@ -0,0 +1,13 @@
+package com.mojang.authlib.yggdrasil.request;
+
+import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+
+public class ValidateRequest {
+    private String clientToken;
+    private String accessToken;
+
+    public ValidateRequest(YggdrasilUserAuthentication var1) {
+        this.clientToken = var1.getAuthenticationService().getClientToken();
+        this.accessToken = var1.getAuthenticatedToken();
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java b/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
new file mode 100644
index 0000000..af0be8b
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
@@ -0,0 +1,34 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.GameProfile;
+
+public class AuthenticationResponse extends Response {
+    private String accessToken;
+    private String clientToken;
+    private GameProfile selectedProfile;
+    private GameProfile[] availableProfiles;
+    private User user;
+
+    public AuthenticationResponse() {
+    }
+
+    public String getAccessToken() {
+        return this.accessToken;
+    }
+
+    public String getClientToken() {
+        return this.clientToken;
+    }
+
+    public GameProfile[] getAvailableProfiles() {
+        return this.availableProfiles;
+    }
+
+    public GameProfile getSelectedProfile() {
+        return this.selectedProfile;
+    }
+
+    public User getUser() {
+        return this.user;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java b/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
new file mode 100644
index 0000000..ebb94b1
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
@@ -0,0 +1,20 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.properties.PropertyMap;
+import java.util.UUID;
+
+public class HasJoinedMinecraftServerResponse extends Response {
+    private UUID id;
+    private PropertyMap properties;
+
+    public HasJoinedMinecraftServerResponse() {
+    }
+
+    public UUID getId() {
+        return this.id;
+    }
+
+    public PropertyMap getProperties() {
+        return this.properties;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java b/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
new file mode 100644
index 0000000..7ec97b8
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
@@ -0,0 +1,25 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.properties.PropertyMap;
+import java.util.UUID;
+
+public class MinecraftProfilePropertiesResponse extends Response {
+    private UUID id;
+    private String name;
+    private PropertyMap properties;
+
+    public MinecraftProfilePropertiesResponse() {
+    }
+
+    public UUID getId() {
+        return this.id;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public PropertyMap getProperties() {
+        return this.properties;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java b/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
new file mode 100644
index 0000000..b15191f
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
@@ -0,0 +1,36 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.minecraft.MinecraftProfileTexture;
+import java.util.Map;
+import java.util.UUID;
+
+public class MinecraftTexturesPayload {
+    private long timestamp;
+    private UUID profileId;
+    private String profileName;
+    private boolean isPublic;
+    private Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> textures;
+
+    public MinecraftTexturesPayload() {
+    }
+
+    public long getTimestamp() {
+        return this.timestamp;
+    }
+
+    public UUID getProfileId() {
+        return this.profileId;
+    }
+
+    public String getProfileName() {
+        return this.profileName;
+    }
+
+    public boolean isPublic() {
+        return this.isPublic;
+    }
+
+    public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getTextures() {
+        return this.textures;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java b/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
new file mode 100644
index 0000000..b7c57c7
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
@@ -0,0 +1,47 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.mojang.authlib.GameProfile;
+import java.lang.reflect.Type;
+
+public class ProfileSearchResultsResponse extends Response {
+    private GameProfile[] profiles;
+
+    public ProfileSearchResultsResponse() {
+    }
+
+    public GameProfile[] getProfiles() {
+        return this.profiles;
+    }
+
+    public static class Serializer implements JsonDeserializer<ProfileSearchResultsResponse> {
+        public Serializer() {
+        }
+
+        public ProfileSearchResultsResponse deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            ProfileSearchResultsResponse var4 = new ProfileSearchResultsResponse();
+            if (var1 instanceof JsonObject) {
+                JsonObject var5 = (JsonObject)var1;
+                if (var5.has("error")) {
+                    var4.setError(var5.getAsJsonPrimitive("error").getAsString());
+                }
+
+                if (var5.has("errorMessage")) {
+                    var4.setError(var5.getAsJsonPrimitive("errorMessage").getAsString());
+                }
+
+                if (var5.has("cause")) {
+                    var4.setError(var5.getAsJsonPrimitive("cause").getAsString());
+                }
+            } else {
+                var4.profiles = (GameProfile[])var3.deserialize(var1, GameProfile[].class);
+            }
+
+            return var4;
+        }
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/RefreshResponse.java b/com/mojang/authlib/yggdrasil/response/RefreshResponse.java
new file mode 100644
index 0000000..75f061b
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/RefreshResponse.java
@@ -0,0 +1,34 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.GameProfile;
+
+public class RefreshResponse extends Response {
+    private String accessToken;
+    private String clientToken;
+    private GameProfile selectedProfile;
+    private GameProfile[] availableProfiles;
+    private User user;
+
+    public RefreshResponse() {
+    }
+
+    public String getAccessToken() {
+        return this.accessToken;
+    }
+
+    public String getClientToken() {
+        return this.clientToken;
+    }
+
+    public GameProfile[] getAvailableProfiles() {
+        return this.availableProfiles;
+    }
+
+    public GameProfile getSelectedProfile() {
+        return this.selectedProfile;
+    }
+
+    public User getUser() {
+        return this.user;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/Response.java b/com/mojang/authlib/yggdrasil/response/Response.java
new file mode 100644
index 0000000..7a3238e
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/Response.java
@@ -0,0 +1,34 @@
+package com.mojang.authlib.yggdrasil.response;
+
+public class Response {
+    private String error;
+    private String errorMessage;
+    private String cause;
+
+    public Response() {
+    }
+
+    public String getError() {
+        return this.error;
+    }
+
+    public String getCause() {
+        return this.cause;
+    }
+
+    public String getErrorMessage() {
+        return this.errorMessage;
+    }
+
+    protected void setError(String var1) {
+        this.error = var1;
+    }
+
+    protected void setErrorMessage(String var1) {
+        this.errorMessage = var1;
+    }
+
+    protected void setCause(String var1) {
+        this.cause = var1;
+    }
+}
diff --git a/com/mojang/authlib/yggdrasil/response/User.java b/com/mojang/authlib/yggdrasil/response/User.java
new file mode 100644
index 0000000..68aef78
--- /dev/null
+++ b/com/mojang/authlib/yggdrasil/response/User.java
@@ -0,0 +1,19 @@
+package com.mojang.authlib.yggdrasil.response;
+
+import com.mojang.authlib.properties.PropertyMap;
+
+public class User {
+    private String id;
+    private PropertyMap properties;
+
+    public User() {
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public PropertyMap getProperties() {
+        return this.properties;
+    }
+}
diff --git a/com/mojang/launcher/Http.java b/com/mojang/launcher/Http.java
new file mode 100644
index 0000000..0d2671f
--- /dev/null
+++ b/com/mojang/launcher/Http.java
@@ -0,0 +1,69 @@
+package com.mojang.launcher;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class Http {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private Http() {
+    }
+
+    public static String buildQuery(Map<String, Object> var0) {
+        StringBuilder var1 = new StringBuilder();
+        Iterator var2 = var0.entrySet().iterator();
+
+        while(var2.hasNext()) {
+            Entry var3 = (Entry)var2.next();
+            if (var1.length() > 0) {
+                var1.append('&');
+            }
+
+            try {
+                var1.append(URLEncoder.encode((String)var3.getKey(), "UTF-8"));
+            } catch (UnsupportedEncodingException var6) {
+                LOGGER.error("Unexpected exception building query", var6);
+            }
+
+            if (var3.getValue() != null) {
+                var1.append('=');
+
+                try {
+                    var1.append(URLEncoder.encode(var3.getValue().toString(), "UTF-8"));
+                } catch (UnsupportedEncodingException var5) {
+                    LOGGER.error("Unexpected exception building query", var5);
+                }
+            }
+        }
+
+        return var1.toString();
+    }
+
+    public static String performGet(URL var0, Proxy var1) throws IOException {
+        HttpURLConnection var2 = (HttpURLConnection)var0.openConnection(var1);
+        var2.setConnectTimeout(15000);
+        var2.setReadTimeout(60000);
+        var2.setRequestMethod("GET");
+        InputStream var3 = var2.getInputStream();
+
+        String var4;
+        try {
+            var4 = IOUtils.toString(var3);
+        } finally {
+            IOUtils.closeQuietly(var3);
+        }
+
+        return var4;
+    }
+}
diff --git a/com/mojang/launcher/Launcher.java b/com/mojang/launcher/Launcher.java
new file mode 100644
index 0000000..f79a4b6
--- /dev/null
+++ b/com/mojang/launcher/Launcher.java
@@ -0,0 +1,84 @@
+package com.mojang.launcher;
+
+import com.mojang.authlib.Agent;
+import com.mojang.launcher.updater.ExceptionalThreadPoolExecutor;
+import com.mojang.launcher.updater.VersionManager;
+import com.mojang.launcher.versions.ReleaseTypeFactory;
+import java.io.File;
+import java.net.PasswordAuthentication;
+import java.net.Proxy;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class Launcher {
+    private static final Logger LOGGER;
+    private final VersionManager versionManager;
+    private final File workingDirectory;
+    private final UserInterface ui;
+    private final Proxy proxy;
+    private final PasswordAuthentication proxyAuth;
+    private final ThreadPoolExecutor downloaderExecutorService;
+    private final Agent agent;
+    private final ReleaseTypeFactory releaseTypeFactory;
+    private final int launcherFormatVersion;
+
+    public Launcher(UserInterface var1, File var2, Proxy var3, PasswordAuthentication var4, VersionManager var5, Agent var6, ReleaseTypeFactory var7, int var8) {
+        this.downloaderExecutorService = new ExceptionalThreadPoolExecutor(16, 16, 30L, TimeUnit.SECONDS);
+        this.ui = var1;
+        this.proxy = var3;
+        this.proxyAuth = var4;
+        this.workingDirectory = var2;
+        this.agent = var6;
+        this.versionManager = var5;
+        this.releaseTypeFactory = var7;
+        this.launcherFormatVersion = var8;
+        this.downloaderExecutorService.allowCoreThreadTimeOut(true);
+    }
+
+    public ReleaseTypeFactory getReleaseTypeFactory() {
+        return this.releaseTypeFactory;
+    }
+
+    public VersionManager getVersionManager() {
+        return this.versionManager;
+    }
+
+    public File getWorkingDirectory() {
+        return this.workingDirectory;
+    }
+
+    public UserInterface getUserInterface() {
+        return this.ui;
+    }
+
+    public Proxy getProxy() {
+        return this.proxy;
+    }
+
+    public PasswordAuthentication getProxyAuth() {
+        return this.proxyAuth;
+    }
+
+    public ThreadPoolExecutor getDownloaderExecutorService() {
+        return this.downloaderExecutorService;
+    }
+
+    public void shutdownLauncher() {
+        this.getUserInterface().shutdownLauncher();
+    }
+
+    public Agent getAgent() {
+        return this.agent;
+    }
+
+    public int getLauncherFormatVersion() {
+        return this.launcherFormatVersion;
+    }
+
+    static {
+        Thread.currentThread().setContextClassLoader(Launcher.class.getClassLoader());
+        LOGGER = LogManager.getLogger();
+    }
+}
diff --git a/com/mojang/launcher/LegacyPropertyMapSerializer.java b/com/mojang/launcher/LegacyPropertyMapSerializer.java
new file mode 100644
index 0000000..1ed1f14
--- /dev/null
+++ b/com/mojang/launcher/LegacyPropertyMapSerializer.java
@@ -0,0 +1,37 @@
+package com.mojang.launcher;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.mojang.authlib.properties.Property;
+import com.mojang.authlib.properties.PropertyMap;
+import java.lang.reflect.Type;
+import java.util.Iterator;
+
+public class LegacyPropertyMapSerializer implements JsonSerializer<PropertyMap> {
+    public LegacyPropertyMapSerializer() {
+    }
+
+    public JsonElement serialize(PropertyMap var1, Type var2, JsonSerializationContext var3) {
+        JsonObject var4 = new JsonObject();
+        Iterator var5 = var1.keySet().iterator();
+
+        while(var5.hasNext()) {
+            String var6 = (String)var5.next();
+            JsonArray var7 = new JsonArray();
+            Iterator var8 = var1.get(var6).iterator();
+
+            while(var8.hasNext()) {
+                Property var9 = (Property)var8.next();
+                var7.add(new JsonPrimitive(var9.getValue()));
+            }
+
+            var4.add(var6, var7);
+        }
+
+        return var4;
+    }
+}
diff --git a/com/mojang/launcher/OperatingSystem.java b/com/mojang/launcher/OperatingSystem.java
new file mode 100644
index 0000000..6eda188
--- /dev/null
+++ b/com/mojang/launcher/OperatingSystem.java
@@ -0,0 +1,112 @@
+package com.mojang.launcher;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public enum OperatingSystem {
+    LINUX("linux", new String[]{"linux", "unix"}),
+    WINDOWS("windows", new String[]{"win"}),
+    OSX("osx", new String[]{"mac"}),
+    UNKNOWN("unknown", new String[0]);
+
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final String name;
+    private final String[] aliases;
+
+    private OperatingSystem(String var3, String... var4) {
+        this.name = var3;
+        this.aliases = var4 == null ? new String[0] : var4;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String[] getAliases() {
+        return this.aliases;
+    }
+
+    public boolean isSupported() {
+        return this != UNKNOWN;
+    }
+
+    public String getJavaDir() {
+        String var1 = System.getProperty("file.separator");
+        String var2 = System.getProperty("java.home") + var1 + "bin" + var1;
+        return getCurrentPlatform() == WINDOWS && (new File(var2 + "javaw.exe")).isFile() ? var2 + "javaw.exe" : var2 + "java";
+    }
+
+    public static OperatingSystem getCurrentPlatform() {
+        String var0 = System.getProperty("os.name").toLowerCase();
+        OperatingSystem[] var1 = values();
+        int var2 = var1.length;
+
+        for(int var3 = 0; var3 < var2; ++var3) {
+            OperatingSystem var4 = var1[var3];
+            String[] var5 = var4.getAliases();
+            int var6 = var5.length;
+
+            for(int var7 = 0; var7 < var6; ++var7) {
+                String var8 = var5[var7];
+                if (var0.contains(var8)) {
+                    return var4;
+                }
+            }
+        }
+
+        return UNKNOWN;
+    }
+
+    public static void openLink(URI var0) {
+        try {
+            Class var1 = Class.forName("java.awt.Desktop");
+            Object var2 = var1.getMethod("getDesktop").invoke((Object)null);
+            var1.getMethod("browse", URI.class).invoke(var2, var0);
+        } catch (Throwable var4) {
+            if (getCurrentPlatform() == OSX) {
+                try {
+                    Runtime.getRuntime().exec(new String[]{"/usr/bin/open", var0.toString()});
+                } catch (IOException var3) {
+                    LOGGER.error("Failed to open link " + var0.toString(), var3);
+                }
+            } else {
+                LOGGER.error("Failed to open link " + var0.toString(), var4);
+            }
+        }
+
+    }
+
+    public static void openFolder(File var0) {
+        String var1 = var0.getAbsolutePath();
+        OperatingSystem var2 = getCurrentPlatform();
+        if (var2 == OSX) {
+            try {
+                Runtime.getRuntime().exec(new String[]{"/usr/bin/open", var1});
+                return;
+            } catch (IOException var7) {
+                LOGGER.error("Couldn't open " + var0 + " through /usr/bin/open", var7);
+            }
+        } else if (var2 == WINDOWS) {
+            String var3 = String.format("cmd.exe /C start \"Open file\" \"%s\"", var1);
+
+            try {
+                Runtime.getRuntime().exec(var3);
+                return;
+            } catch (IOException var6) {
+                LOGGER.error("Couldn't open " + var0 + " through cmd.exe", var6);
+            }
+        }
+
+        try {
+            Class var8 = Class.forName("java.awt.Desktop");
+            Object var4 = var8.getMethod("getDesktop").invoke((Object)null);
+            var8.getMethod("browse", URI.class).invoke(var4, var0.toURI());
+        } catch (Throwable var5) {
+            LOGGER.error("Couldn't open " + var0 + " through Desktop.browse()", var5);
+        }
+
+    }
+}
diff --git a/com/mojang/launcher/SharedLauncherConstants.java b/com/mojang/launcher/SharedLauncherConstants.java
new file mode 100644
index 0000000..854a911
--- /dev/null
+++ b/com/mojang/launcher/SharedLauncherConstants.java
@@ -0,0 +1,9 @@
+package com.mojang.launcher;
+
+public class SharedLauncherConstants {
+    public static final int VERSION_FORMAT = 14;
+    public static final String DEFAULT_VERSION_INCOMPATIBILITY_REASON = "This version is incompatible with your computer. Please try another one by going into Edit Profile and selecting one through the dropdown. Sorry!";
+
+    public SharedLauncherConstants() {
+    }
+}
diff --git a/com/mojang/launcher/UserInterface.java b/com/mojang/launcher/UserInterface.java
new file mode 100644
index 0000000..f37298e
--- /dev/null
+++ b/com/mojang/launcher/UserInterface.java
@@ -0,0 +1,23 @@
+package com.mojang.launcher;
+
+import com.mojang.launcher.updater.DownloadProgress;
+import com.mojang.launcher.versions.CompleteVersion;
+import java.io.File;
+
+public interface UserInterface {
+    void showLoginPrompt();
+
+    void setVisible(boolean var1);
+
+    void shutdownLauncher();
+
+    void hideDownloadProgress();
+
+    void setDownloadProgress(DownloadProgress var1);
+
+    void showCrashReport(CompleteVersion var1, File var2, String var3);
+
+    void gameLaunchFailure(String var1);
+
+    void updatePlayState();
+}
diff --git a/com/mojang/launcher/events/GameOutputLogProcessor.java b/com/mojang/launcher/events/GameOutputLogProcessor.java
new file mode 100644
index 0000000..2c52fb5
--- /dev/null
+++ b/com/mojang/launcher/events/GameOutputLogProcessor.java
@@ -0,0 +1,7 @@
+package com.mojang.launcher.events;
+
+import com.mojang.launcher.game.process.GameProcess;
+
+public interface GameOutputLogProcessor {
+    void onGameOutput(GameProcess var1, String var2);
+}
diff --git a/com/mojang/launcher/events/RefreshedVersionsListener.java b/com/mojang/launcher/events/RefreshedVersionsListener.java
new file mode 100644
index 0000000..19482f9
--- /dev/null
+++ b/com/mojang/launcher/events/RefreshedVersionsListener.java
@@ -0,0 +1,7 @@
+package com.mojang.launcher.events;
+
+import com.mojang.launcher.updater.VersionManager;
+
+public interface RefreshedVersionsListener {
+    void onVersionsRefreshed(VersionManager var1);
+}
diff --git a/com/mojang/launcher/game/GameInstanceStatus.java b/com/mojang/launcher/game/GameInstanceStatus.java
new file mode 100644
index 0000000..116be36
--- /dev/null
+++ b/com/mojang/launcher/game/GameInstanceStatus.java
@@ -0,0 +1,24 @@
+package com.mojang.launcher.game;
+
+public enum GameInstanceStatus {
+    PREPARING("Preparing..."),
+    DOWNLOADING("Downloading..."),
+    INSTALLING("Installing..."),
+    LAUNCHING("Launching..."),
+    PLAYING("Playing..."),
+    IDLE("Idle");
+
+    private final String name;
+
+    private GameInstanceStatus(String var3) {
+        this.name = var3;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String toString() {
+        return this.name;
+    }
+}
diff --git a/com/mojang/launcher/game/process/AbstractGameProcess.java b/com/mojang/launcher/game/process/AbstractGameProcess.java
new file mode 100644
index 0000000..82d95e7
--- /dev/null
+++ b/com/mojang/launcher/game/process/AbstractGameProcess.java
@@ -0,0 +1,35 @@
+package com.mojang.launcher.game.process;
+
+import com.google.common.base.Predicate;
+import java.util.List;
+
+public abstract class AbstractGameProcess implements GameProcess {
+    protected final List<String> arguments;
+    protected final Predicate<String> sysOutFilter;
+    private GameProcessRunnable onExit;
+
+    public AbstractGameProcess(List<String> var1, Predicate<String> var2) {
+        this.arguments = var1;
+        this.sysOutFilter = var2;
+    }
+
+    public Predicate<String> getSysOutFilter() {
+        return this.sysOutFilter;
+    }
+
+    public List<String> getStartupArguments() {
+        return this.arguments;
+    }
+
+    public void setExitRunnable(GameProcessRunnable var1) {
+        this.onExit = var1;
+        if (!this.isRunning() && var1 != null) {
+            var1.onGameProcessEnded(this);
+        }
+
+    }
+
+    public GameProcessRunnable getExitRunnable() {
+        return this.onExit;
+    }
+}
diff --git a/com/mojang/launcher/game/process/GameProcess.java b/com/mojang/launcher/game/process/GameProcess.java
new file mode 100644
index 0000000..06b6d9c
--- /dev/null
+++ b/com/mojang/launcher/game/process/GameProcess.java
@@ -0,0 +1,23 @@
+package com.mojang.launcher.game.process;
+
+import com.google.common.base.Predicate;
+import java.util.Collection;
+import java.util.List;
+
+public interface GameProcess {
+    List<String> getStartupArguments();
+
+    Collection<String> getSysOutLines();
+
+    Predicate<String> getSysOutFilter();
+
+    boolean isRunning();
+
+    void setExitRunnable(GameProcessRunnable var1);
+
+    GameProcessRunnable getExitRunnable();
+
+    int getExitCode();
+
+    void stop();
+}
diff --git a/com/mojang/launcher/game/process/GameProcessBuilder.java b/com/mojang/launcher/game/process/GameProcessBuilder.java
new file mode 100644
index 0000000..6681b03
--- /dev/null
+++ b/com/mojang/launcher/game/process/GameProcessBuilder.java
@@ -0,0 +1,81 @@
+package com.mojang.launcher.game.process;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
+import com.google.common.collect.Lists;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class GameProcessBuilder {
+    private final String processPath;
+    private final List<String> arguments = Lists.newArrayList();
+    private Predicate<String> sysOutFilter = Predicates.alwaysTrue();
+    private GameOutputLogProcessor logProcessor = new GameOutputLogProcessor() {
+        public void onGameOutput(GameProcess var1, String var2) {
+        }
+    };
+    private File directory;
+
+    public GameProcessBuilder(String var1) {
+        if (var1 == null) {
+            var1 = OperatingSystem.getCurrentPlatform().getJavaDir();
+        }
+
+        this.processPath = var1;
+    }
+
+    public List<String> getFullCommands() {
+        ArrayList var1 = new ArrayList(this.arguments);
+        var1.add(0, this.getProcessPath());
+        return var1;
+    }
+
+    public GameProcessBuilder withArguments(String... var1) {
+        this.arguments.addAll(Arrays.asList(var1));
+        return this;
+    }
+
+    public List<String> getArguments() {
+        return this.arguments;
+    }
+
+    public GameProcessBuilder directory(File var1) {
+        this.directory = var1;
+        return this;
+    }
+
+    public File getDirectory() {
+        return this.directory;
+    }
+
+    public GameProcessBuilder withSysOutFilter(Predicate<String> var1) {
+        this.sysOutFilter = var1;
+        return this;
+    }
+
+    public GameProcessBuilder withLogProcessor(GameOutputLogProcessor var1) {
+        this.logProcessor = var1;
+        return this;
+    }
+
+    public Predicate<String> getSysOutFilter() {
+        return this.sysOutFilter;
+    }
+
+    protected String getProcessPath() {
+        return this.processPath;
+    }
+
+    public GameOutputLogProcessor getLogProcessor() {
+        return this.logProcessor;
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("processPath", this.processPath).add("arguments", this.arguments).add("sysOutFilter", this.sysOutFilter).add("directory", this.directory).add("logProcessor", this.logProcessor).toString();
+    }
+}
diff --git a/com/mojang/launcher/game/process/GameProcessFactory.java b/com/mojang/launcher/game/process/GameProcessFactory.java
new file mode 100644
index 0000000..265c2b3
--- /dev/null
+++ b/com/mojang/launcher/game/process/GameProcessFactory.java
@@ -0,0 +1,7 @@
+package com.mojang.launcher.game.process;
+
+import java.io.IOException;
+
+public interface GameProcessFactory {
+    GameProcess startGame(GameProcessBuilder var1) throws IOException;
+}
diff --git a/com/mojang/launcher/game/process/GameProcessRunnable.java b/com/mojang/launcher/game/process/GameProcessRunnable.java
new file mode 100644
index 0000000..68ea410
--- /dev/null
+++ b/com/mojang/launcher/game/process/GameProcessRunnable.java
@@ -0,0 +1,5 @@
+package com.mojang.launcher.game.process;
+
+public interface GameProcessRunnable {
+    void onGameProcessEnded(GameProcess var1);
+}
diff --git a/com/mojang/launcher/game/process/direct/DirectGameProcess.java b/com/mojang/launcher/game/process/direct/DirectGameProcess.java
new file mode 100644
index 0000000..66a7107
--- /dev/null
+++ b/com/mojang/launcher/game/process/direct/DirectGameProcess.java
@@ -0,0 +1,57 @@
+package com.mojang.launcher.game.process.direct;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Predicate;
+import com.google.common.collect.EvictingQueue;
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import com.mojang.launcher.game.process.AbstractGameProcess;
+import java.util.Collection;
+import java.util.List;
+
+public class DirectGameProcess extends AbstractGameProcess {
+    private static final int MAX_SYSOUT_LINES = 5;
+    private final Process process;
+    protected final DirectProcessInputMonitor monitor;
+    private final Collection<String> sysOutLines = EvictingQueue.create(5);
+
+    public DirectGameProcess(List<String> var1, Process var2, Predicate<String> var3, GameOutputLogProcessor var4) {
+        super(var1, var3);
+        this.process = var2;
+        this.monitor = new DirectProcessInputMonitor(this, var4);
+        this.monitor.start();
+    }
+
+    public Process getRawProcess() {
+        return this.process;
+    }
+
+    public Collection<String> getSysOutLines() {
+        return this.sysOutLines;
+    }
+
+    public boolean isRunning() {
+        try {
+            this.process.exitValue();
+            return false;
+        } catch (IllegalThreadStateException var2) {
+            return true;
+        }
+    }
+
+    public int getExitCode() {
+        try {
+            return this.process.exitValue();
+        } catch (IllegalThreadStateException var2) {
+            var2.fillInStackTrace();
+            throw var2;
+        }
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("process", this.process).add("monitor", this.monitor).toString();
+    }
+
+    public void stop() {
+        this.process.destroy();
+    }
+}
diff --git a/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java b/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
new file mode 100644
index 0000000..1e86301
--- /dev/null
+++ b/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
@@ -0,0 +1,17 @@
+package com.mojang.launcher.game.process.direct;
+
+import com.mojang.launcher.game.process.GameProcess;
+import com.mojang.launcher.game.process.GameProcessBuilder;
+import com.mojang.launcher.game.process.GameProcessFactory;
+import java.io.IOException;
+import java.util.List;
+
+public class DirectGameProcessFactory implements GameProcessFactory {
+    public DirectGameProcessFactory() {
+    }
+
+    public GameProcess startGame(GameProcessBuilder var1) throws IOException {
+        List var2 = var1.getFullCommands();
+        return new DirectGameProcess(var2, (new ProcessBuilder(var2)).directory(var1.getDirectory()).redirectErrorStream(true).start(), var1.getSysOutFilter(), var1.getLogProcessor());
+    }
+}
diff --git a/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java b/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
new file mode 100644
index 0000000..d484001
--- /dev/null
+++ b/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
@@ -0,0 +1,48 @@
+package com.mojang.launcher.game.process.direct;
+
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import com.mojang.launcher.game.process.GameProcessRunnable;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class DirectProcessInputMonitor extends Thread {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final DirectGameProcess process;
+    private final GameOutputLogProcessor logProcessor;
+
+    public DirectProcessInputMonitor(DirectGameProcess var1, GameOutputLogProcessor var2) {
+        this.process = var1;
+        this.logProcessor = var2;
+    }
+
+    public void run() {
+        InputStreamReader var1 = new InputStreamReader(this.process.getRawProcess().getInputStream());
+        BufferedReader var2 = new BufferedReader(var1);
+        String var3 = null;
+
+        while(this.process.isRunning()) {
+            try {
+                while((var3 = var2.readLine()) != null) {
+                    this.logProcessor.onGameOutput(this.process, var3);
+                    if (this.process.getSysOutFilter().apply(var3) == Boolean.TRUE) {
+                        this.process.getSysOutLines().add(var3);
+                    }
+                }
+            } catch (IOException var8) {
+                LOGGER.error(var8);
+            } finally {
+                IOUtils.closeQuietly(var1);
+            }
+        }
+
+        GameProcessRunnable var4 = this.process.getExitRunnable();
+        if (var4 != null) {
+            var4.onGameProcessEnded(this.process);
+        }
+
+    }
+}
diff --git a/com/mojang/launcher/game/runner/AbstractGameRunner.java b/com/mojang/launcher/game/runner/AbstractGameRunner.java
new file mode 100644
index 0000000..f3546fc
--- /dev/null
+++ b/com/mojang/launcher/game/runner/AbstractGameRunner.java
@@ -0,0 +1,228 @@
+package com.mojang.launcher.game.runner;
+
+import com.google.common.collect.Lists;
+import com.mojang.launcher.Launcher;
+import com.mojang.launcher.game.GameInstanceStatus;
+import com.mojang.launcher.updater.DownloadProgress;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.DownloadJob;
+import com.mojang.launcher.updater.download.DownloadListener;
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.versions.CompleteVersion;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public abstract class AbstractGameRunner implements GameRunner, DownloadListener {
+    protected static final Logger LOGGER = LogManager.getLogger();
+    protected final Object lock = new Object();
+    private final List<DownloadJob> jobs = new ArrayList();
+    protected CompleteVersion version;
+    private GameInstanceStatus status;
+    private final List<GameRunnerListener> listeners;
+
+    public AbstractGameRunner() {
+        this.status = GameInstanceStatus.IDLE;
+        this.listeners = Lists.newArrayList();
+    }
+
+    protected void setStatus(GameInstanceStatus var1) {
+        synchronized(this.lock) {
+            this.status = var1;
+            Iterator var3 = Lists.newArrayList(this.listeners).iterator();
+
+            while(var3.hasNext()) {
+                GameRunnerListener var4 = (GameRunnerListener)var3.next();
+                var4.onGameInstanceChangedState(this, var1);
+            }
+
+        }
+    }
+
+    protected abstract Launcher getLauncher();
+
+    public GameInstanceStatus getStatus() {
+        return this.status;
+    }
+
+    public void playGame(VersionSyncInfo var1) {
+        synchronized(this.lock) {
+            if (this.getStatus() != GameInstanceStatus.IDLE) {
+                LOGGER.warn("Tried to play game but game is already starting!");
+                return;
+            }
+
+            this.setStatus(GameInstanceStatus.PREPARING);
+        }
+
+        LOGGER.info("Getting syncinfo for selected version");
+        if (var1 == null) {
+            LOGGER.warn("Tried to launch a version without a version being selected...");
+            this.setStatus(GameInstanceStatus.IDLE);
+        } else {
+            synchronized(this.lock) {
+                LOGGER.info("Queueing library & version downloads");
+
+                try {
+                    this.version = this.getLauncher().getVersionManager().getLatestCompleteVersion(var1);
+                } catch (IOException var7) {
+                    LOGGER.error("Couldn't get complete version info for " + var1.getLatestVersion(), var7);
+                    this.setStatus(GameInstanceStatus.IDLE);
+                    return;
+                }
+
+                if (var1.getRemoteVersion() != null && var1.getLatestSource() != VersionSyncInfo.VersionSource.REMOTE && !this.version.isSynced()) {
+                    try {
+                        var1 = this.getLauncher().getVersionManager().syncVersion(var1);
+                        this.version = this.getLauncher().getVersionManager().getLatestCompleteVersion(var1);
+                    } catch (IOException var6) {
+                        LOGGER.error("Couldn't sync local and remote versions", var6);
+                    }
+
+                    this.version.setSynced(true);
+                }
+
+                if (!this.version.appliesToCurrentEnvironment()) {
+                    String var3 = this.version.getIncompatibilityReason();
+                    if (var3 == null) {
+                        var3 = "This version is incompatible with your computer. Please try another one by going into Edit Profile and selecting one through the dropdown. Sorry!";
+                    }
+
+                    LOGGER.error("Version " + this.version.getId() + " is incompatible with current environment: " + var3);
+                    this.getLauncher().getUserInterface().gameLaunchFailure(var3);
+                    this.setStatus(GameInstanceStatus.IDLE);
+                } else if (this.version.getMinimumLauncherVersion() > this.getLauncher().getLauncherFormatVersion()) {
+                    LOGGER.error("An update to your launcher is available and is required to play " + this.version.getId() + ". Please restart your launcher.");
+                    this.setStatus(GameInstanceStatus.IDLE);
+                } else {
+                    if (!var1.isUpToDate()) {
+                        try {
+                            this.getLauncher().getVersionManager().installVersion(this.version);
+                        } catch (IOException var5) {
+                            LOGGER.error("Couldn't save version info to install " + var1.getLatestVersion(), var5);
+                            this.setStatus(GameInstanceStatus.IDLE);
+                            return;
+                        }
+                    }
+
+                    this.setStatus(GameInstanceStatus.DOWNLOADING);
+                    this.downloadRequiredFiles(var1);
+                }
+            }
+        }
+    }
+
+    protected void downloadRequiredFiles(VersionSyncInfo var1) {
+        try {
+            DownloadJob var2 = new DownloadJob("Version & Libraries", false, this);
+            this.addJob(var2);
+            this.getLauncher().getVersionManager().downloadVersion(var1, var2);
+            var2.startDownloading(this.getLauncher().getDownloaderExecutorService());
+            DownloadJob var3 = new DownloadJob("Resources", true, this);
+            this.addJob(var3);
+            this.getLauncher().getVersionManager().downloadResources(var3, this.version);
+            var3.startDownloading(this.getLauncher().getDownloaderExecutorService());
+        } catch (IOException var4) {
+            LOGGER.error("Couldn't get version info for " + var1.getLatestVersion(), var4);
+            this.setStatus(GameInstanceStatus.IDLE);
+        }
+
+    }
+
+    protected void updateProgressBar() {
+        synchronized(this.lock) {
+            if (this.hasRemainingJobs()) {
+                long var2 = 0L;
+                long var4 = 0L;
+                Downloadable var6 = null;
+                Iterator var7 = this.jobs.iterator();
+
+                label49:
+                while(var7.hasNext()) {
+                    DownloadJob var8 = (DownloadJob)var7.next();
+                    Iterator var9 = var8.getAllFiles().iterator();
+
+                    while(true) {
+                        Downloadable var10;
+                        do {
+                            if (!var9.hasNext()) {
+                                continue label49;
+                            }
+
+                            var10 = (Downloadable)var9.next();
+                            var2 += var10.getMonitor().getTotal();
+                            var4 += var10.getMonitor().getCurrent();
+                        } while(var6 != null && var6.getEndTime() <= 0L && (var10.getStartTime() >= var6.getStartTime() || var10.getEndTime() != 0L));
+
+                        var6 = var10;
+                    }
+                }
+
+                this.getLauncher().getUserInterface().setDownloadProgress(new DownloadProgress(var4, var2, var6 == null ? null : var6.getStatus()));
+            } else {
+                this.jobs.clear();
+                this.getLauncher().getUserInterface().hideDownloadProgress();
+            }
+
+        }
+    }
+
+    public boolean hasRemainingJobs() {
+        synchronized(this.lock) {
+            Iterator var2 = this.jobs.iterator();
+
+            DownloadJob var3;
+            do {
+                if (!var2.hasNext()) {
+                    return false;
+                }
+
+                var3 = (DownloadJob)var2.next();
+            } while(var3.isComplete());
+
+            return true;
+        }
+    }
+
+    public void addJob(DownloadJob var1) {
+        synchronized(this.lock) {
+            this.jobs.add(var1);
+        }
+    }
+
+    public void onDownloadJobFinished(DownloadJob var1) {
+        this.updateProgressBar();
+        synchronized(this.lock) {
+            if (var1.getFailures() > 0) {
+                LOGGER.error("Job '" + var1.getName() + "' finished with " + var1.getFailures() + " failure(s)! (took " + var1.getStopWatch().toString() + ")");
+                this.setStatus(GameInstanceStatus.IDLE);
+            } else {
+                LOGGER.info("Job '" + var1.getName() + "' finished successfully (took " + var1.getStopWatch().toString() + ")");
+                if (this.getStatus() != GameInstanceStatus.IDLE && !this.hasRemainingJobs()) {
+                    try {
+                        this.setStatus(GameInstanceStatus.LAUNCHING);
+                        this.launchGame();
+                    } catch (Throwable var5) {
+                        LOGGER.fatal("Fatal error launching game. Report this to http://bugs.mojang.com please!", var5);
+                    }
+                }
+            }
+
+        }
+    }
+
+    protected abstract void launchGame() throws IOException;
+
+    public void onDownloadJobProgressChanged(DownloadJob var1) {
+        this.updateProgressBar();
+    }
+
+    public void addListener(GameRunnerListener var1) {
+        synchronized(this.lock) {
+            this.listeners.add(var1);
+        }
+    }
+}
diff --git a/com/mojang/launcher/game/runner/GameRunner.java b/com/mojang/launcher/game/runner/GameRunner.java
new file mode 100644
index 0000000..7bd69c9
--- /dev/null
+++ b/com/mojang/launcher/game/runner/GameRunner.java
@@ -0,0 +1,15 @@
+package com.mojang.launcher.game.runner;
+
+import com.mojang.launcher.game.GameInstanceStatus;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.DownloadJob;
+
+public interface GameRunner {
+    GameInstanceStatus getStatus();
+
+    void playGame(VersionSyncInfo var1);
+
+    boolean hasRemainingJobs();
+
+    void addJob(DownloadJob var1);
+}
diff --git a/com/mojang/launcher/game/runner/GameRunnerListener.java b/com/mojang/launcher/game/runner/GameRunnerListener.java
new file mode 100644
index 0000000..eae6a56
--- /dev/null
+++ b/com/mojang/launcher/game/runner/GameRunnerListener.java
@@ -0,0 +1,7 @@
+package com.mojang.launcher.game.runner;
+
+import com.mojang.launcher.game.GameInstanceStatus;
+
+public interface GameRunnerListener {
+    void onGameInstanceChangedState(GameRunner var1, GameInstanceStatus var2);
+}
diff --git a/com/mojang/launcher/updater/DateTypeAdapter.java b/com/mojang/launcher/updater/DateTypeAdapter.java
new file mode 100644
index 0000000..2a2c319
--- /dev/null
+++ b/com/mojang/launcher/updater/DateTypeAdapter.java
@@ -0,0 +1,79 @@
+package com.mojang.launcher.updater;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.google.gson.JsonSyntaxException;
+import java.lang.reflect.Type;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+public class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {
+    private final DateFormat enUsFormat;
+    private final DateFormat iso8601Format;
+
+    public DateTypeAdapter() {
+        this.enUsFormat = DateFormat.getDateTimeInstance(2, 2, Locale.US);
+        this.iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
+    }
+
+    public Date deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+        if (!(var1 instanceof JsonPrimitive)) {
+            throw new JsonParseException("The date should be a string value");
+        } else {
+            Date var4 = this.deserializeToDate(var1.getAsString());
+            if (var2 == Date.class) {
+                return var4;
+            } else {
+                throw new IllegalArgumentException(this.getClass() + " cannot deserialize to " + var2);
+            }
+        }
+    }
+
+    public JsonElement serialize(Date var1, Type var2, JsonSerializationContext var3) {
+        synchronized(this.enUsFormat) {
+            return new JsonPrimitive(this.serializeToString(var1));
+        }
+    }
+
+    public Date deserializeToDate(String var1) {
+        synchronized(this.enUsFormat) {
+            Date var10000;
+            try {
+                var10000 = this.enUsFormat.parse(var1);
+            } catch (ParseException var7) {
+                try {
+                    var10000 = this.iso8601Format.parse(var1);
+                } catch (ParseException var6) {
+                    try {
+                        String var3 = var1.replace("Z", "+00:00");
+                        var3 = var3.substring(0, 22) + var3.substring(23);
+                        var10000 = this.iso8601Format.parse(var3);
+                    } catch (Exception var5) {
+                        throw new JsonSyntaxException("Invalid date: " + var1, var5);
+                    }
+
+                    return var10000;
+                }
+
+                return var10000;
+            }
+
+            return var10000;
+        }
+    }
+
+    public String serializeToString(Date var1) {
+        synchronized(this.enUsFormat) {
+            String var3 = this.iso8601Format.format(var1);
+            return var3.substring(0, 22) + ":" + var3.substring(22);
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/DownloadProgress.java b/com/mojang/launcher/updater/DownloadProgress.java
new file mode 100644
index 0000000..a6e7057
--- /dev/null
+++ b/com/mojang/launcher/updater/DownloadProgress.java
@@ -0,0 +1,31 @@
+package com.mojang.launcher.updater;
+
+public class DownloadProgress {
+    private final long current;
+    private final long total;
+    private final float percent;
+    private final String status;
+
+    public DownloadProgress(long var1, long var3, String var5) {
+        this.current = var1;
+        this.total = var3;
+        this.percent = (float)var1 / (float)var3;
+        this.status = var5;
+    }
+
+    public long getCurrent() {
+        return this.current;
+    }
+
+    public long getTotal() {
+        return this.total;
+    }
+
+    public float getPercent() {
+        return this.percent;
+    }
+
+    public String getStatus() {
+        return this.status;
+    }
+}
diff --git a/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java b/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
new file mode 100644
index 0000000..4fae7d5
--- /dev/null
+++ b/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
@@ -0,0 +1,67 @@
+package com.mojang.launcher.updater;
+
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import java.util.concurrent.Callable;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.RunnableFuture;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ExceptionalThreadPoolExecutor extends ThreadPoolExecutor {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    public ExceptionalThreadPoolExecutor(int var1, int var2, long var3, TimeUnit var5) {
+        super(var1, var2, var3, var5, new LinkedBlockingQueue(), (new ThreadFactoryBuilder()).setDaemon(true).build());
+    }
+
+    protected void afterExecute(Runnable var1, Throwable var2) {
+        super.afterExecute(var1, var2);
+        if (var2 == null && var1 instanceof Future) {
+            try {
+                Future var3 = (Future)var1;
+                if (var3.isDone()) {
+                    var3.get();
+                }
+            } catch (CancellationException var4) {
+            } catch (ExecutionException var5) {
+                var2 = var5.getCause();
+            } catch (InterruptedException var6) {
+                Thread.currentThread().interrupt();
+            }
+        }
+
+    }
+
+    protected <T> RunnableFuture<T> newTaskFor(Runnable var1, T var2) {
+        return new ExceptionalThreadPoolExecutor.ExceptionalFutureTask(var1, var2);
+    }
+
+    protected <T> RunnableFuture<T> newTaskFor(Callable<T> var1) {
+        return new ExceptionalThreadPoolExecutor.ExceptionalFutureTask(var1);
+    }
+
+    public class ExceptionalFutureTask<T> extends FutureTask<T> {
+        public ExceptionalFutureTask(Callable<T> var2) {
+            super(var2);
+        }
+
+        public ExceptionalFutureTask(Runnable var2, T var3) {
+            super(var2, var3);
+        }
+
+        protected void done() {
+            try {
+                this.get();
+            } catch (Throwable var2) {
+                ExceptionalThreadPoolExecutor.LOGGER.error("Unhandled exception in executor " + this, var2);
+            }
+
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/FileTypeAdapter.java b/com/mojang/launcher/updater/FileTypeAdapter.java
new file mode 100644
index 0000000..49ab81a
--- /dev/null
+++ b/com/mojang/launcher/updater/FileTypeAdapter.java
@@ -0,0 +1,30 @@
+package com.mojang.launcher.updater;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import java.io.File;
+import java.io.IOException;
+
+public class FileTypeAdapter extends TypeAdapter<File> {
+    public FileTypeAdapter() {
+    }
+
+    public void write(JsonWriter var1, File var2) throws IOException {
+        if (var2 == null) {
+            var1.nullValue();
+        } else {
+            var1.value(var2.getAbsolutePath());
+        }
+
+    }
+
+    public File read(JsonReader var1) throws IOException {
+        if (var1.hasNext()) {
+            String var2 = var1.nextString();
+            return var2 != null ? new File(var2) : null;
+        } else {
+            return null;
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java b/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
new file mode 100644
index 0000000..d53c3af
--- /dev/null
+++ b/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
@@ -0,0 +1,57 @@
+package com.mojang.launcher.updater;
+
+import com.google.gson.Gson;
+import com.google.gson.TypeAdapter;
+import com.google.gson.TypeAdapterFactory;
+import com.google.gson.reflect.TypeToken;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonToken;
+import com.google.gson.stream.JsonWriter;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
+    public LowerCaseEnumTypeAdapterFactory() {
+    }
+
+    public <T> TypeAdapter<T> create(Gson var1, TypeToken<T> var2) {
+        Class var3 = var2.getRawType();
+        if (!var3.isEnum()) {
+            return null;
+        } else {
+            final HashMap var4 = new HashMap();
+            Object[] var5 = var3.getEnumConstants();
+            int var6 = var5.length;
+
+            for(int var7 = 0; var7 < var6; ++var7) {
+                Object var8 = var5[var7];
+                var4.put(this.toLowercase(var8), var8);
+            }
+
+            return new TypeAdapter<T>() {
+                public void write(JsonWriter var1, T var2) throws IOException {
+                    if (var2 == null) {
+                        var1.nullValue();
+                    } else {
+                        var1.value(LowerCaseEnumTypeAdapterFactory.this.toLowercase(var2));
+                    }
+
+                }
+
+                public T read(JsonReader var1) throws IOException {
+                    if (var1.peek() == JsonToken.NULL) {
+                        var1.nextNull();
+                        return null;
+                    } else {
+                        return var4.get(var1.nextString());
+                    }
+                }
+            };
+        }
+    }
+
+    private String toLowercase(Object var1) {
+        return var1.toString().toLowerCase(Locale.US);
+    }
+}
diff --git a/com/mojang/launcher/updater/VersionFilter.java b/com/mojang/launcher/updater/VersionFilter.java
new file mode 100644
index 0000000..f2784c4
--- /dev/null
+++ b/com/mojang/launcher/updater/VersionFilter.java
@@ -0,0 +1,58 @@
+package com.mojang.launcher.updater;
+
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Sets;
+import com.mojang.launcher.versions.ReleaseType;
+import com.mojang.launcher.versions.ReleaseTypeFactory;
+import java.util.Collections;
+import java.util.Set;
+
+public class VersionFilter<T extends ReleaseType> {
+    private final Set<T> types = Sets.newHashSet();
+    private int maxCount = 5;
+
+    public VersionFilter(ReleaseTypeFactory<T> var1) {
+        Iterables.addAll(this.types, var1);
+    }
+
+    public Set<T> getTypes() {
+        return this.types;
+    }
+
+    public VersionFilter<T> onlyForTypes(T... var1) {
+        this.types.clear();
+        this.includeTypes(var1);
+        return this;
+    }
+
+    public VersionFilter<T> includeTypes(T... var1) {
+        if (var1 != null) {
+            Collections.addAll(this.types, var1);
+        }
+
+        return this;
+    }
+
+    public VersionFilter<T> excludeTypes(T... var1) {
+        if (var1 != null) {
+            ReleaseType[] var2 = var1;
+            int var3 = var1.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+                ReleaseType var5 = var2[var4];
+                this.types.remove(var5);
+            }
+        }
+
+        return this;
+    }
+
+    public int getMaxCount() {
+        return this.maxCount;
+    }
+
+    public VersionFilter<T> setMaxCount(int var1) {
+        this.maxCount = var1;
+        return this;
+    }
+}
diff --git a/com/mojang/launcher/updater/VersionManager.java b/com/mojang/launcher/updater/VersionManager.java
new file mode 100644
index 0000000..d594f22
--- /dev/null
+++ b/com/mojang/launcher/updater/VersionManager.java
@@ -0,0 +1,44 @@
+package com.mojang.launcher.updater;
+
+import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.updater.download.DownloadJob;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.ReleaseType;
+import com.mojang.launcher.versions.Version;
+import java.io.IOException;
+import java.util.List;
+import java.util.concurrent.ThreadPoolExecutor;
+
+public interface VersionManager {
+    void refreshVersions() throws IOException;
+
+    List<VersionSyncInfo> getVersions();
+
+    List<VersionSyncInfo> getVersions(VersionFilter<? extends ReleaseType> var1);
+
+    VersionSyncInfo getVersionSyncInfo(Version var1);
+
+    VersionSyncInfo getVersionSyncInfo(String var1);
+
+    VersionSyncInfo getVersionSyncInfo(Version var1, Version var2);
+
+    List<VersionSyncInfo> getInstalledVersions();
+
+    CompleteVersion getLatestCompleteVersion(VersionSyncInfo var1) throws IOException;
+
+    DownloadJob downloadVersion(VersionSyncInfo var1, DownloadJob var2) throws IOException;
+
+    DownloadJob downloadResources(DownloadJob var1, CompleteVersion var2) throws IOException;
+
+    ThreadPoolExecutor getExecutorService();
+
+    void addRefreshedVersionsListener(RefreshedVersionsListener var1);
+
+    void removeRefreshedVersionsListener(RefreshedVersionsListener var1);
+
+    VersionSyncInfo syncVersion(VersionSyncInfo var1) throws IOException;
+
+    void installVersion(CompleteVersion var1) throws IOException;
+
+    void uninstallVersion(CompleteVersion var1) throws IOException;
+}
diff --git a/com/mojang/launcher/updater/VersionSyncInfo.java b/com/mojang/launcher/updater/VersionSyncInfo.java
new file mode 100644
index 0000000..dc2a298
--- /dev/null
+++ b/com/mojang/launcher/updater/VersionSyncInfo.java
@@ -0,0 +1,63 @@
+package com.mojang.launcher.updater;
+
+import com.mojang.launcher.versions.Version;
+
+public class VersionSyncInfo {
+    private final Version localVersion;
+    private final Version remoteVersion;
+    private final boolean isInstalled;
+    private final boolean isUpToDate;
+
+    public VersionSyncInfo(Version var1, Version var2, boolean var3, boolean var4) {
+        this.localVersion = var1;
+        this.remoteVersion = var2;
+        this.isInstalled = var3;
+        this.isUpToDate = var4;
+    }
+
+    public Version getLocalVersion() {
+        return this.localVersion;
+    }
+
+    public Version getRemoteVersion() {
+        return this.remoteVersion;
+    }
+
+    public Version getLatestVersion() {
+        return this.getLatestSource() == VersionSyncInfo.VersionSource.REMOTE ? this.remoteVersion : this.localVersion;
+    }
+
+    public VersionSyncInfo.VersionSource getLatestSource() {
+        if (this.getLocalVersion() == null) {
+            return VersionSyncInfo.VersionSource.REMOTE;
+        } else if (this.getRemoteVersion() == null) {
+            return VersionSyncInfo.VersionSource.LOCAL;
+        } else {
+            return this.getRemoteVersion().getUpdatedTime().after(this.getLocalVersion().getUpdatedTime()) ? VersionSyncInfo.VersionSource.REMOTE : VersionSyncInfo.VersionSource.LOCAL;
+        }
+    }
+
+    public boolean isInstalled() {
+        return this.isInstalled;
+    }
+
+    public boolean isOnRemote() {
+        return this.remoteVersion != null;
+    }
+
+    public boolean isUpToDate() {
+        return this.isUpToDate;
+    }
+
+    public String toString() {
+        return "VersionSyncInfo{localVersion=" + this.localVersion + ", remoteVersion=" + this.remoteVersion + ", isInstalled=" + this.isInstalled + ", isUpToDate=" + this.isUpToDate + '}';
+    }
+
+    public static enum VersionSource {
+        REMOTE,
+        LOCAL;
+
+        private VersionSource() {
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/download/ChecksummedDownloadable.java b/com/mojang/launcher/updater/download/ChecksummedDownloadable.java
new file mode 100644
index 0000000..1340aca
--- /dev/null
+++ b/com/mojang/launcher/updater/download/ChecksummedDownloadable.java
@@ -0,0 +1,87 @@
+package com.mojang.launcher.updater.download;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import org.apache.commons.io.Charsets;
+import org.apache.commons.io.IOUtils;
+
+public class ChecksummedDownloadable extends Downloadable {
+    private String localHash;
+    private String expectedHash;
+
+    public ChecksummedDownloadable(Proxy var1, URL var2, File var3, boolean var4) {
+        super(var1, var2, var3, var4);
+    }
+
+    public String download() throws IOException {
+        ++this.numAttempts;
+        this.ensureFileWritable(this.getTarget());
+        File var1 = this.getTarget();
+        if (this.localHash == null && var1.isFile()) {
+            this.localHash = getDigest(var1, "SHA-1", 40);
+        }
+
+        HttpURLConnection var2;
+        int var3;
+        if (this.expectedHash == null) {
+            try {
+                var2 = this.makeConnection(new URL(this.getUrl().toString() + ".sha1"));
+                var3 = var2.getResponseCode();
+                if (var3 / 100 == 2) {
+                    InputStream var4 = var2.getInputStream();
+
+                    try {
+                        this.expectedHash = IOUtils.toString(var4, Charsets.UTF_8).trim();
+                    } catch (IOException var11) {
+                        this.expectedHash = "";
+                    } finally {
+                        IOUtils.closeQuietly(var4);
+                    }
+                } else {
+                    this.expectedHash = "";
+                }
+            } catch (IOException var13) {
+                this.expectedHash = "";
+            }
+        }
+
+        if (this.expectedHash.length() == 0 && var1.isFile()) {
+            return "Couldn't find a checksum so assuming our copy is good";
+        } else if (this.expectedHash.equalsIgnoreCase(this.localHash)) {
+            return "Remote checksum matches local file";
+        } else {
+            try {
+                var2 = this.makeConnection(this.getUrl());
+                var3 = var2.getResponseCode();
+                if (var3 / 100 == 2) {
+                    this.updateExpectedSize(var2);
+                    MonitoringInputStream var15 = new MonitoringInputStream(var2.getInputStream(), this.getMonitor());
+                    FileOutputStream var5 = new FileOutputStream(this.getTarget());
+                    String var6 = copyAndDigest(var15, var5, "SHA", 40);
+                    if (this.expectedHash.length() == 0) {
+                        return "Didn't have checksum so assuming the downloaded file is good";
+                    } else if (this.expectedHash.equalsIgnoreCase(var6)) {
+                        return "Downloaded successfully and checksum matched";
+                    } else {
+                        throw new RuntimeException(String.format("Checksum did not match downloaded file (Checksum was %s, downloaded %s)", this.expectedHash, var6));
+                    }
+                } else if (this.getTarget().isFile()) {
+                    return "Couldn't connect to server (responded with " + var3 + ") but have local file, assuming it's good";
+                } else {
+                    throw new RuntimeException("Server responded with " + var3);
+                }
+            } catch (IOException var14) {
+                if (!this.getTarget().isFile() || this.expectedHash != null && this.expectedHash.length() != 0) {
+                    throw var14;
+                } else {
+                    return "Couldn't connect to server (" + var14.getClass().getSimpleName() + ": '" + var14.getMessage() + "') but have local file, assuming it's good";
+                }
+            }
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/download/DownloadJob.java b/com/mojang/launcher/updater/download/DownloadJob.java
new file mode 100644
index 0000000..20ebcf0
--- /dev/null
+++ b/com/mojang/launcher/updater/download/DownloadJob.java
@@ -0,0 +1,190 @@
+package com.mojang.launcher.updater.download;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.commons.lang3.time.StopWatch;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class DownloadJob {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final int MAX_ATTEMPTS_PER_FILE = 5;
+    private static final int ASSUMED_AVERAGE_FILE_SIZE = 5242880;
+    private final Queue<Downloadable> remainingFiles;
+    private final List<Downloadable> allFiles;
+    private final List<Downloadable> failures;
+    private final List<Downloadable> successful;
+    private final DownloadListener listener;
+    private final String name;
+    private final boolean ignoreFailures;
+    private final AtomicInteger remainingThreads;
+    private final StopWatch stopWatch;
+    private boolean started;
+
+    public DownloadJob(String var1, boolean var2, DownloadListener var3, Collection<Downloadable> var4) {
+        this.remainingFiles = new ConcurrentLinkedQueue();
+        this.allFiles = Collections.synchronizedList(new ArrayList());
+        this.failures = Collections.synchronizedList(new ArrayList());
+        this.successful = Collections.synchronizedList(new ArrayList());
+        this.remainingThreads = new AtomicInteger();
+        this.stopWatch = new StopWatch();
+        this.name = var1;
+        this.ignoreFailures = var2;
+        this.listener = var3;
+        if (var4 != null) {
+            this.addDownloadables(var4);
+        }
+
+    }
+
+    public DownloadJob(String var1, boolean var2, DownloadListener var3) {
+        this(var1, var2, var3, (Collection)null);
+    }
+
+    public void addDownloadables(Collection<Downloadable> var1) {
+        if (this.started) {
+            throw new IllegalStateException("Cannot add to download job that has already started");
+        } else {
+            this.allFiles.addAll(var1);
+            this.remainingFiles.addAll(var1);
+
+            Downloadable var3;
+            for(Iterator var2 = var1.iterator(); var2.hasNext(); var3.getMonitor().setJob(this)) {
+                var3 = (Downloadable)var2.next();
+                if (var3.getExpectedSize() == 0L) {
+                    var3.getMonitor().setTotal(5242880L);
+                } else {
+                    var3.getMonitor().setTotal(var3.getExpectedSize());
+                }
+            }
+
+        }
+    }
+
+    public void addDownloadables(Downloadable... var1) {
+        if (this.started) {
+            throw new IllegalStateException("Cannot add to download job that has already started");
+        } else {
+            Downloadable[] var2 = var1;
+            int var3 = var1.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+                Downloadable var5 = var2[var4];
+                this.allFiles.add(var5);
+                this.remainingFiles.add(var5);
+                if (var5.getExpectedSize() == 0L) {
+                    var5.getMonitor().setTotal(5242880L);
+                } else {
+                    var5.getMonitor().setTotal(var5.getExpectedSize());
+                }
+
+                var5.getMonitor().setJob(this);
+            }
+
+        }
+    }
+
+    public void startDownloading(ThreadPoolExecutor var1) {
+        if (this.started) {
+            throw new IllegalStateException("Cannot start download job that has already started");
+        } else {
+            this.started = true;
+            this.stopWatch.start();
+            if (this.allFiles.isEmpty()) {
+                LOGGER.info("Download job '" + this.name + "' skipped as there are no files to download");
+                this.listener.onDownloadJobFinished(this);
+            } else {
+                int var2 = var1.getMaximumPoolSize();
+                this.remainingThreads.set(var2);
+                LOGGER.info("Download job '" + this.name + "' started (" + var2 + " threads, " + this.allFiles.size() + " files)");
+
+                for(int var3 = 0; var3 < var2; ++var3) {
+                    var1.submit(new Runnable() {
+                        public void run() {
+                            DownloadJob.this.popAndDownload();
+                        }
+                    });
+                }
+            }
+
+        }
+    }
+
+    private void popAndDownload() {
+        Downloadable var1;
+        while((var1 = (Downloadable)this.remainingFiles.poll()) != null) {
+            if (var1.getStartTime() == 0L) {
+                var1.setStartTime(System.currentTimeMillis());
+            }
+
+            if (var1.getNumAttempts() > 5) {
+                if (!this.ignoreFailures) {
+                    this.failures.add(var1);
+                }
+
+                LOGGER.error("Gave up trying to download " + var1.getUrl() + " for job '" + this.name + "'");
+            } else {
+                try {
+                    LOGGER.info("Attempting to download " + var1.getTarget() + " for job '" + this.name + "'... (try " + var1.getNumAttempts() + ")");
+                    String var2 = var1.download();
+                    this.successful.add(var1);
+                    var1.setEndTime(System.currentTimeMillis());
+                    var1.getMonitor().setCurrent(var1.getMonitor().getTotal());
+                    LOGGER.info("Finished downloading " + var1.getTarget() + " for job '" + this.name + "'" + ": " + var2);
+                } catch (Throwable var3) {
+                    LOGGER.warn("Couldn't download " + var1.getUrl() + " for job '" + this.name + "'", var3);
+                    var1.getMonitor().setCurrent(var1.getMonitor().getTotal());
+                    this.remainingFiles.add(var1);
+                }
+            }
+        }
+
+        if (this.remainingThreads.decrementAndGet() <= 0) {
+            this.listener.onDownloadJobFinished(this);
+        }
+
+    }
+
+    public boolean shouldIgnoreFailures() {
+        return this.ignoreFailures;
+    }
+
+    public boolean isStarted() {
+        return this.started;
+    }
+
+    public boolean isComplete() {
+        return this.started && this.remainingFiles.isEmpty() && this.remainingThreads.get() == 0;
+    }
+
+    public int getFailures() {
+        return this.failures.size();
+    }
+
+    public int getSuccessful() {
+        return this.successful.size();
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void updateProgress() {
+        this.listener.onDownloadJobProgressChanged(this);
+    }
+
+    public List<Downloadable> getAllFiles() {
+        return this.allFiles;
+    }
+
+    public StopWatch getStopWatch() {
+        return this.stopWatch;
+    }
+}
diff --git a/com/mojang/launcher/updater/download/DownloadListener.java b/com/mojang/launcher/updater/download/DownloadListener.java
new file mode 100644
index 0000000..4cde609
--- /dev/null
+++ b/com/mojang/launcher/updater/download/DownloadListener.java
@@ -0,0 +1,7 @@
+package com.mojang.launcher.updater.download;
+
+public interface DownloadListener {
+    void onDownloadJobFinished(DownloadJob var1);
+
+    void onDownloadJobProgressChanged(DownloadJob var1);
+}
diff --git a/com/mojang/launcher/updater/download/Downloadable.java b/com/mojang/launcher/updater/download/Downloadable.java
new file mode 100644
index 0000000..018dd50
--- /dev/null
+++ b/com/mojang/launcher/updater/download/Downloadable.java
@@ -0,0 +1,185 @@
+package com.mojang.launcher.updater.download;
+
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.math.BigInteger;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import java.security.DigestInputStream;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public abstract class Downloadable {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final URL url;
+    private final File target;
+    private final boolean forceDownload;
+    private final Proxy proxy;
+    private final ProgressContainer monitor;
+    private long startTime;
+    protected int numAttempts;
+    private long expectedSize;
+    private long endTime;
+
+    public Downloadable(Proxy var1, URL var2, File var3, boolean var4) {
+        this.proxy = var1;
+        this.url = var2;
+        this.target = var3;
+        this.forceDownload = var4;
+        this.monitor = new ProgressContainer();
+    }
+
+    public ProgressContainer getMonitor() {
+        return this.monitor;
+    }
+
+    public long getExpectedSize() {
+        return this.expectedSize;
+    }
+
+    public void setExpectedSize(long var1) {
+        this.expectedSize = var1;
+    }
+
+    public static String getDigest(File var0, String var1, int var2) {
+        DigestInputStream var3 = null;
+
+        Object var5;
+        try {
+            var3 = new DigestInputStream(new FileInputStream(var0), MessageDigest.getInstance(var1));
+            byte[] var4 = new byte[65536];
+
+            int var11;
+            do {
+                var11 = var3.read(var4);
+            } while(var11 > 0);
+
+            return String.format("%1$0" + var2 + "x", new BigInteger(1, var3.getMessageDigest().digest()));
+        } catch (Exception var9) {
+            var5 = null;
+        } finally {
+            closeSilently(var3);
+        }
+
+        return (String)var5;
+    }
+
+    public abstract String download() throws IOException;
+
+    protected void updateExpectedSize(HttpURLConnection var1) {
+        if (this.expectedSize == 0L) {
+            this.monitor.setTotal((long)var1.getContentLength());
+            this.setExpectedSize((long)var1.getContentLength());
+        } else {
+            this.monitor.setTotal(this.expectedSize);
+        }
+
+    }
+
+    protected HttpURLConnection makeConnection(URL var1) throws IOException {
+        HttpURLConnection var2 = (HttpURLConnection)var1.openConnection(this.proxy);
+        var2.setUseCaches(false);
+        var2.setDefaultUseCaches(false);
+        var2.setRequestProperty("Cache-Control", "no-store,max-age=0,no-cache");
+        var2.setRequestProperty("Expires", "0");
+        var2.setRequestProperty("Pragma", "no-cache");
+        var2.setConnectTimeout(5000);
+        var2.setReadTimeout(30000);
+        return var2;
+    }
+
+    public URL getUrl() {
+        return this.url;
+    }
+
+    public File getTarget() {
+        return this.target;
+    }
+
+    public boolean shouldIgnoreLocal() {
+        return this.forceDownload;
+    }
+
+    public int getNumAttempts() {
+        return this.numAttempts;
+    }
+
+    public Proxy getProxy() {
+        return this.proxy;
+    }
+
+    public static void closeSilently(Closeable var0) {
+        if (var0 != null) {
+            try {
+                var0.close();
+            } catch (IOException var2) {
+            }
+        }
+
+    }
+
+    public static String copyAndDigest(InputStream var0, OutputStream var1, String var2, int var3) throws IOException {
+        MessageDigest var4;
+        try {
+            var4 = MessageDigest.getInstance(var2);
+        } catch (NoSuchAlgorithmException var10) {
+            closeSilently(var0);
+            closeSilently(var1);
+            throw new RuntimeException("Missing Digest." + var2, var10);
+        }
+
+        byte[] var5 = new byte[65536];
+
+        try {
+            for(int var6 = var0.read(var5); var6 >= 1; var6 = var0.read(var5)) {
+                var4.update(var5, 0, var6);
+                var1.write(var5, 0, var6);
+            }
+        } finally {
+            closeSilently(var0);
+            closeSilently(var1);
+        }
+
+        return String.format("%1$0" + var3 + "x", new BigInteger(1, var4.digest()));
+    }
+
+    protected void ensureFileWritable(File var1) {
+        if (var1.getParentFile() != null && !var1.getParentFile().isDirectory()) {
+            LOGGER.info("Making directory " + var1.getParentFile());
+            if (!var1.getParentFile().mkdirs() && !var1.getParentFile().isDirectory()) {
+                throw new RuntimeException("Could not create directory " + var1.getParentFile());
+            }
+        }
+
+        if (var1.isFile() && !var1.canWrite()) {
+            throw new RuntimeException("Do not have write permissions for " + var1 + " - aborting!");
+        }
+    }
+
+    public long getStartTime() {
+        return this.startTime;
+    }
+
+    public void setStartTime(long var1) {
+        this.startTime = var1;
+    }
+
+    public String getStatus() {
+        return "Downloading " + this.getTarget().getName();
+    }
+
+    public long getEndTime() {
+        return this.endTime;
+    }
+
+    public void setEndTime(long var1) {
+        this.endTime = var1;
+    }
+}
diff --git a/com/mojang/launcher/updater/download/EtagDownloadable.java b/com/mojang/launcher/updater/download/EtagDownloadable.java
new file mode 100644
index 0000000..ca05edd
--- /dev/null
+++ b/com/mojang/launcher/updater/download/EtagDownloadable.java
@@ -0,0 +1,69 @@
+package com.mojang.launcher.updater.download;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+
+public class EtagDownloadable extends Downloadable {
+    public EtagDownloadable(Proxy var1, URL var2, File var3, boolean var4) {
+        super(var1, var2, var3, var4);
+    }
+
+    public String download() throws IOException {
+        ++this.numAttempts;
+        this.ensureFileWritable(this.getTarget());
+
+        try {
+            HttpURLConnection var1 = this.makeConnection(this.getUrl());
+            int var2 = var1.getResponseCode();
+            if (var2 == 304) {
+                return "Used own copy as it matched etag";
+            } else if (var2 / 100 == 2) {
+                this.updateExpectedSize(var1);
+                MonitoringInputStream var3 = new MonitoringInputStream(var1.getInputStream(), this.getMonitor());
+                FileOutputStream var4 = new FileOutputStream(this.getTarget());
+                String var5 = copyAndDigest(var3, var4, "MD5", 32);
+                String var6 = getEtag(var1.getHeaderField("ETag"));
+                if (var6.contains("-")) {
+                    return "Didn't have etag so assuming our copy is good";
+                } else if (var6.equalsIgnoreCase(var5)) {
+                    return "Downloaded successfully and etag matched";
+                } else {
+                    throw new RuntimeException(String.format("E-tag did not match downloaded MD5 (ETag was %s, downloaded %s)", var6, var5));
+                }
+            } else if (this.getTarget().isFile()) {
+                return "Couldn't connect to server (responded with " + var2 + ") but have local file, assuming it's good";
+            } else {
+                throw new RuntimeException("Server responded with " + var2);
+            }
+        } catch (IOException var7) {
+            if (this.getTarget().isFile()) {
+                return "Couldn't connect to server (" + var7.getClass().getSimpleName() + ": '" + var7.getMessage() + "') but have local file, assuming it's good";
+            } else {
+                throw var7;
+            }
+        }
+    }
+
+    protected HttpURLConnection makeConnection(URL var1) throws IOException {
+        HttpURLConnection var2 = super.makeConnection(var1);
+        if (!this.shouldIgnoreLocal() && this.getTarget().isFile()) {
+            var2.setRequestProperty("If-None-Match", getDigest(this.getTarget(), "MD5", 32));
+        }
+
+        return var2;
+    }
+
+    public static String getEtag(String var0) {
+        if (var0 == null) {
+            var0 = "-";
+        } else if (var0.startsWith("\"") && var0.endsWith("\"")) {
+            var0 = var0.substring(1, var0.length() - 1);
+        }
+
+        return var0;
+    }
+}
diff --git a/com/mojang/launcher/updater/download/MonitoringInputStream.java b/com/mojang/launcher/updater/download/MonitoringInputStream.java
new file mode 100644
index 0000000..4638d0d
--- /dev/null
+++ b/com/mojang/launcher/updater/download/MonitoringInputStream.java
@@ -0,0 +1,50 @@
+package com.mojang.launcher.updater.download;
+
+import java.io.FilterInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class MonitoringInputStream extends FilterInputStream {
+    private final ProgressContainer monitor;
+
+    public MonitoringInputStream(InputStream var1, ProgressContainer var2) {
+        super(var1);
+        this.monitor = var2;
+    }
+
+    public int read() throws IOException {
+        int var1 = this.in.read();
+        if (var1 >= 0) {
+            this.monitor.addProgress(1L);
+        }
+
+        return var1;
+    }
+
+    public int read(byte[] var1) throws IOException {
+        int var2 = this.in.read(var1);
+        if (var2 >= 0) {
+            this.monitor.addProgress((long)var2);
+        }
+
+        return var2;
+    }
+
+    public int read(byte[] var1, int var2, int var3) throws IOException {
+        int var4 = this.in.read(var1, var2, var3);
+        if (var4 > 0) {
+            this.monitor.addProgress((long)var4);
+        }
+
+        return var4;
+    }
+
+    public long skip(long var1) throws IOException {
+        long var3 = super.skip(var1);
+        if (var3 > 0L) {
+            this.monitor.addProgress(var3);
+        }
+
+        return var3;
+    }
+}
diff --git a/com/mojang/launcher/updater/download/ProgressContainer.java b/com/mojang/launcher/updater/download/ProgressContainer.java
new file mode 100644
index 0000000..a8b85ba
--- /dev/null
+++ b/com/mojang/launcher/updater/download/ProgressContainer.java
@@ -0,0 +1,62 @@
+package com.mojang.launcher.updater.download;
+
+public class ProgressContainer {
+    private long total;
+    private long current;
+    private DownloadJob job;
+
+    public ProgressContainer() {
+    }
+
+    public DownloadJob getJob() {
+        return this.job;
+    }
+
+    public void setJob(DownloadJob var1) {
+        this.job = var1;
+        if (var1 != null) {
+            var1.updateProgress();
+        }
+
+    }
+
+    public long getTotal() {
+        return this.total;
+    }
+
+    public void setTotal(long var1) {
+        this.total = var1;
+        if (this.job != null) {
+            this.job.updateProgress();
+        }
+
+    }
+
+    public long getCurrent() {
+        return this.current;
+    }
+
+    public void setCurrent(long var1) {
+        this.current = var1;
+        if (var1 > this.total) {
+            this.total = var1;
+        }
+
+        if (this.job != null) {
+            this.job.updateProgress();
+        }
+
+    }
+
+    public void addProgress(long var1) {
+        this.setCurrent(this.getCurrent() + var1);
+    }
+
+    public float getProgress() {
+        return this.total == 0L ? 0.0F : (float)this.current / (float)this.total;
+    }
+
+    public String toString() {
+        return "ProgressContainer{current=" + this.current + ", total=" + this.total + '}';
+    }
+}
diff --git a/com/mojang/launcher/updater/download/assets/AssetDownloadable.java b/com/mojang/launcher/updater/download/assets/AssetDownloadable.java
new file mode 100644
index 0000000..634ead1
--- /dev/null
+++ b/com/mojang/launcher/updater/download/assets/AssetDownloadable.java
@@ -0,0 +1,149 @@
+package com.mojang.launcher.updater.download.assets;
+
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.updater.download.MonitoringInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.zip.GZIPInputStream;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class AssetDownloadable extends Downloadable {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final String name;
+    private final AssetIndex.AssetObject asset;
+    private final String urlBase;
+    private final File destination;
+    private AssetDownloadable.Status status;
+
+    public AssetDownloadable(Proxy var1, String var2, AssetIndex.AssetObject var3, String var4, File var5) throws MalformedURLException {
+        super(var1, new URL(var4 + createPathFromHash(var3.getHash())), new File(var5, createPathFromHash(var3.getHash())), false);
+        this.status = AssetDownloadable.Status.DOWNLOADING;
+        this.name = var2;
+        this.asset = var3;
+        this.urlBase = var4;
+        this.destination = var5;
+    }
+
+    protected static String createPathFromHash(String var0) {
+        return var0.substring(0, 2) + "/" + var0;
+    }
+
+    public String download() throws IOException {
+        this.status = AssetDownloadable.Status.DOWNLOADING;
+        ++this.numAttempts;
+        File var1 = this.getTarget();
+        File var2 = this.asset.hasCompressedAlternative() ? new File(this.destination, createPathFromHash(this.asset.getCompressedHash())) : null;
+        URL var3 = this.getUrl();
+        URL var4 = this.asset.hasCompressedAlternative() ? new URL(this.urlBase + createPathFromHash(this.asset.getCompressedHash())) : null;
+        this.ensureFileWritable(var1);
+        if (var2 != null) {
+            this.ensureFileWritable(var2);
+        }
+
+        if (var1.isFile()) {
+            if (FileUtils.sizeOf(var1) == this.asset.getSize()) {
+                return "Have local file and it's the same size; assuming it's okay!";
+            }
+
+            LOGGER.warn("Had local file but it was the wrong size... had {} but expected {}", new Object[]{FileUtils.sizeOf(var1), this.asset.getSize()});
+            FileUtils.deleteQuietly(var1);
+            this.status = AssetDownloadable.Status.DOWNLOADING;
+        }
+
+        if (var2 != null && var2.isFile()) {
+            String var5 = getDigest(var2, "SHA", 40);
+            if (var5.equalsIgnoreCase(this.asset.getCompressedHash())) {
+                return this.decompressAsset(var1, var2);
+            }
+
+            LOGGER.warn("Had local compressed but it was the wrong hash... expected {} but had {}", new Object[]{this.asset.getCompressedHash(), var5});
+            FileUtils.deleteQuietly(var2);
+        }
+
+        int var6;
+        MonitoringInputStream var7;
+        FileOutputStream var8;
+        String var9;
+        HttpURLConnection var10;
+        if (var4 != null && var2 != null) {
+            var10 = this.makeConnection(var4);
+            var6 = var10.getResponseCode();
+            if (var6 / 100 == 2) {
+                this.updateExpectedSize(var10);
+                var7 = new MonitoringInputStream(var10.getInputStream(), this.getMonitor());
+                var8 = new FileOutputStream(var2);
+                var9 = copyAndDigest(var7, var8, "SHA", 40);
+                if (var9.equalsIgnoreCase(this.asset.getCompressedHash())) {
+                    return this.decompressAsset(var1, var2);
+                } else {
+                    FileUtils.deleteQuietly(var2);
+                    throw new RuntimeException(String.format("Hash did not match downloaded compressed asset (Expected %s, downloaded %s)", this.asset.getCompressedHash(), var9));
+                }
+            } else {
+                throw new RuntimeException("Server responded with " + var6);
+            }
+        } else {
+            var10 = this.makeConnection(var3);
+            var6 = var10.getResponseCode();
+            if (var6 / 100 == 2) {
+                this.updateExpectedSize(var10);
+                var7 = new MonitoringInputStream(var10.getInputStream(), this.getMonitor());
+                var8 = new FileOutputStream(var1);
+                var9 = copyAndDigest(var7, var8, "SHA", 40);
+                if (var9.equalsIgnoreCase(this.asset.getHash())) {
+                    return "Downloaded asset and hash matched successfully";
+                } else {
+                    FileUtils.deleteQuietly(var1);
+                    throw new RuntimeException(String.format("Hash did not match downloaded asset (Expected %s, downloaded %s)", this.asset.getHash(), var9));
+                }
+            } else {
+                throw new RuntimeException("Server responded with " + var6);
+            }
+        }
+    }
+
+    public String getStatus() {
+        return this.status.name + " " + this.name;
+    }
+
+    protected String decompressAsset(File var1, File var2) throws IOException {
+        this.status = AssetDownloadable.Status.EXTRACTING;
+        FileOutputStream var3 = FileUtils.openOutputStream(var1);
+        GZIPInputStream var4 = new GZIPInputStream(FileUtils.openInputStream(var2));
+
+        String var5;
+        try {
+            var5 = copyAndDigest(var4, var3, "SHA", 40);
+        } finally {
+            IOUtils.closeQuietly(var3);
+            IOUtils.closeQuietly(var4);
+        }
+
+        this.status = AssetDownloadable.Status.DOWNLOADING;
+        if (var5.equalsIgnoreCase(this.asset.getHash())) {
+            return "Had local compressed asset, unpacked successfully and hash matched";
+        } else {
+            FileUtils.deleteQuietly(var1);
+            throw new RuntimeException("Had local compressed asset but unpacked hash did not match (expected " + this.asset.getHash() + " but had " + var5 + ")");
+        }
+    }
+
+    private static enum Status {
+        DOWNLOADING("Downloading"),
+        EXTRACTING("Extracting");
+
+        private final String name;
+
+        private Status(String var3) {
+            this.name = var3;
+        }
+    }
+}
diff --git a/com/mojang/launcher/updater/download/assets/AssetIndex.java b/com/mojang/launcher/updater/download/assets/AssetIndex.java
new file mode 100644
index 0000000..188db4f
--- /dev/null
+++ b/com/mojang/launcher/updater/download/assets/AssetIndex.java
@@ -0,0 +1,116 @@
+package com.mojang.launcher.updater.download.assets;
+
+import com.google.common.collect.Maps;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class AssetIndex {
+    public static final String DEFAULT_ASSET_NAME = "legacy";
+    private Map<String, AssetIndex.AssetObject> objects = new LinkedHashMap();
+    private boolean virtual;
+
+    public AssetIndex() {
+    }
+
+    public Map<String, AssetIndex.AssetObject> getFileMap() {
+        return this.objects;
+    }
+
+    public Map<AssetIndex.AssetObject, String> getUniqueObjects() {
+        HashMap var1 = Maps.newHashMap();
+        Iterator var2 = this.objects.entrySet().iterator();
+
+        while(var2.hasNext()) {
+            Entry var3 = (Entry)var2.next();
+            var1.put(var3.getValue(), var3.getKey());
+        }
+
+        return var1;
+    }
+
+    public boolean isVirtual() {
+        return this.virtual;
+    }
+
+    public class AssetObject {
+        private String hash;
+        private long size;
+        private boolean reconstruct;
+        private String compressedHash;
+        private long compressedSize;
+
+        public AssetObject() {
+        }
+
+        public String getHash() {
+            return this.hash;
+        }
+
+        public long getSize() {
+            return this.size;
+        }
+
+        public boolean shouldReconstruct() {
+            return this.reconstruct;
+        }
+
+        public boolean hasCompressedAlternative() {
+            return this.compressedHash != null;
+        }
+
+        public String getCompressedHash() {
+            return this.compressedHash;
+        }
+
+        public long getCompressedSize() {
+            return this.compressedSize;
+        }
+
+        public boolean equals(Object var1) {
+            if (this == var1) {
+                return true;
+            } else if (var1 != null && this.getClass() == var1.getClass()) {
+                AssetIndex.AssetObject var2 = (AssetIndex.AssetObject)var1;
+                if (this.compressedSize != var2.compressedSize) {
+                    return false;
+                } else if (this.reconstruct != var2.reconstruct) {
+                    return false;
+                } else if (this.size != var2.size) {
+                    return false;
+                } else {
+                    if (this.compressedHash != null) {
+                        if (!this.compressedHash.equals(var2.compressedHash)) {
+                            return false;
+                        }
+                    } else if (var2.compressedHash != null) {
+                        return false;
+                    }
+
+                    if (this.hash != null) {
+                        if (!this.hash.equals(var2.hash)) {
+                            return false;
+                        }
+                    } else if (var2.hash != null) {
+                        return false;
+                    }
+
+                    return true;
+                }
+            } else {
+                return false;
+            }
+        }
+
+        public int hashCode() {
+            int var1 = this.hash != null ? this.hash.hashCode() : 0;
+            var1 = 31 * var1 + (int)(this.size ^ this.size >>> 32);
+            var1 = 31 * var1 + (this.reconstruct ? 1 : 0);
+            var1 = 31 * var1 + (this.compressedHash != null ? this.compressedHash.hashCode() : 0);
+            var1 = 31 * var1 + (int)(this.compressedSize ^ this.compressedSize >>> 32);
+            return var1;
+        }
+    }
+}
diff --git a/com/mojang/launcher/versions/CompatibilityRule.java b/com/mojang/launcher/versions/CompatibilityRule.java
new file mode 100644
index 0000000..4e1d55e
--- /dev/null
+++ b/com/mojang/launcher/versions/CompatibilityRule.java
@@ -0,0 +1,110 @@
+package com.mojang.launcher.versions;
+
+import com.mojang.launcher.OperatingSystem;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class CompatibilityRule {
+    private CompatibilityRule.Action action;
+    private CompatibilityRule.OSRestriction os;
+
+    public CompatibilityRule() {
+        this.action = CompatibilityRule.Action.ALLOW;
+    }
+
+    public CompatibilityRule(CompatibilityRule var1) {
+        this.action = CompatibilityRule.Action.ALLOW;
+        this.action = var1.action;
+        if (var1.os != null) {
+            this.os = new CompatibilityRule.OSRestriction(var1.os);
+        }
+
+    }
+
+    public CompatibilityRule.Action getAppliedAction() {
+        return this.os != null && !this.os.isCurrentOperatingSystem() ? null : this.action;
+    }
+
+    public CompatibilityRule.Action getAction() {
+        return this.action;
+    }
+
+    public CompatibilityRule.OSRestriction getOs() {
+        return this.os;
+    }
+
+    public String toString() {
+        return "Rule{action=" + this.action + ", os=" + this.os + '}';
+    }
+
+    public static enum Action {
+        ALLOW,
+        DISALLOW;
+
+        private Action() {
+        }
+    }
+
+    public class OSRestriction {
+        private OperatingSystem name;
+        private String version;
+        private String arch;
+
+        public OSRestriction() {
+        }
+
+        public OperatingSystem getName() {
+            return this.name;
+        }
+
+        public String getVersion() {
+            return this.version;
+        }
+
+        public String getArch() {
+            return this.arch;
+        }
+
+        public OSRestriction(CompatibilityRule.OSRestriction var2) {
+            this.name = var2.name;
+            this.version = var2.version;
+            this.arch = var2.arch;
+        }
+
+        public boolean isCurrentOperatingSystem() {
+            if (this.name != null && this.name != OperatingSystem.getCurrentPlatform()) {
+                return false;
+            } else {
+                Pattern var1;
+                Matcher var2;
+                if (this.version != null) {
+                    try {
+                        var1 = Pattern.compile(this.version);
+                        var2 = var1.matcher(System.getProperty("os.version"));
+                        if (!var2.matches()) {
+                            return false;
+                        }
+                    } catch (Throwable var4) {
+                    }
+                }
+
+                if (this.arch != null) {
+                    try {
+                        var1 = Pattern.compile(this.arch);
+                        var2 = var1.matcher(System.getProperty("os.arch"));
+                        if (!var2.matches()) {
+                            return false;
+                        }
+                    } catch (Throwable var3) {
+                    }
+                }
+
+                return true;
+            }
+        }
+
+        public String toString() {
+            return "OSRestriction{name=" + this.name + ", version='" + this.version + '\'' + ", arch='" + this.arch + '\'' + '}';
+        }
+    }
+}
diff --git a/com/mojang/launcher/versions/CompleteVersion.java b/com/mojang/launcher/versions/CompleteVersion.java
new file mode 100644
index 0000000..afa4dd4
--- /dev/null
+++ b/com/mojang/launcher/versions/CompleteVersion.java
@@ -0,0 +1,23 @@
+package com.mojang.launcher.versions;
+
+import java.util.Date;
+
+public interface CompleteVersion extends Version {
+    String getId();
+
+    ReleaseType getType();
+
+    Date getUpdatedTime();
+
+    Date getReleaseTime();
+
+    int getMinimumLauncherVersion();
+
+    boolean appliesToCurrentEnvironment();
+
+    String getIncompatibilityReason();
+
+    boolean isSynced();
+
+    void setSynced(boolean var1);
+}
diff --git a/com/mojang/launcher/versions/ExtractRules.java b/com/mojang/launcher/versions/ExtractRules.java
new file mode 100644
index 0000000..360c192
--- /dev/null
+++ b/com/mojang/launcher/versions/ExtractRules.java
@@ -0,0 +1,49 @@
+package com.mojang.launcher.versions;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class ExtractRules {
+    private List<String> exclude = new ArrayList();
+
+    public ExtractRules() {
+    }
+
+    public ExtractRules(String... var1) {
+        if (var1 != null) {
+            Collections.addAll(this.exclude, var1);
+        }
+
+    }
+
+    public ExtractRules(ExtractRules var1) {
+        Iterator var2 = var1.exclude.iterator();
+
+        while(var2.hasNext()) {
+            String var3 = (String)var2.next();
+            this.exclude.add(var3);
+        }
+
+    }
+
+    public List<String> getExcludes() {
+        return this.exclude;
+    }
+
+    public boolean shouldExtract(String var1) {
+        if (this.exclude != null) {
+            Iterator var2 = this.exclude.iterator();
+
+            while(var2.hasNext()) {
+                String var3 = (String)var2.next();
+                if (var1.startsWith(var3)) {
+                    return false;
+                }
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/com/mojang/launcher/versions/ReleaseType.java b/com/mojang/launcher/versions/ReleaseType.java
new file mode 100644
index 0000000..8cede75
--- /dev/null
+++ b/com/mojang/launcher/versions/ReleaseType.java
@@ -0,0 +1,5 @@
+package com.mojang.launcher.versions;
+
+public interface ReleaseType {
+    String getName();
+}
diff --git a/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java b/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
new file mode 100644
index 0000000..58e848b
--- /dev/null
+++ b/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
@@ -0,0 +1,22 @@
+package com.mojang.launcher.versions;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import java.io.IOException;
+
+public class ReleaseTypeAdapterFactory<T extends ReleaseType> extends TypeAdapter<T> {
+    private final ReleaseTypeFactory<T> factory;
+
+    public ReleaseTypeAdapterFactory(ReleaseTypeFactory<T> var1) {
+        this.factory = var1;
+    }
+
+    public void write(JsonWriter var1, T var2) throws IOException {
+        var1.value(var2.getName());
+    }
+
+    public T read(JsonReader var1) throws IOException {
+        return this.factory.getTypeByName(var1.nextString());
+    }
+}
diff --git a/com/mojang/launcher/versions/ReleaseTypeFactory.java b/com/mojang/launcher/versions/ReleaseTypeFactory.java
new file mode 100644
index 0000000..694e3d5
--- /dev/null
+++ b/com/mojang/launcher/versions/ReleaseTypeFactory.java
@@ -0,0 +1,9 @@
+package com.mojang.launcher.versions;
+
+public interface ReleaseTypeFactory<T extends ReleaseType> extends Iterable<T> {
+    T getTypeByName(String var1);
+
+    T[] getAllTypes();
+
+    Class<T> getTypeClass();
+}
diff --git a/com/mojang/launcher/versions/Version.java b/com/mojang/launcher/versions/Version.java
new file mode 100644
index 0000000..4900107
--- /dev/null
+++ b/com/mojang/launcher/versions/Version.java
@@ -0,0 +1,13 @@
+package com.mojang.launcher.versions;
+
+import java.util.Date;
+
+public interface Version {
+    String getId();
+
+    ReleaseType getType();
+
+    Date getUpdatedTime();
+
+    Date getReleaseTime();
+}
diff --git a/com/mojang/util/QueueLogAppender.java b/com/mojang/util/QueueLogAppender.java
new file mode 100644
index 0000000..cfa709b
--- /dev/null
+++ b/com/mojang/util/QueueLogAppender.java
@@ -0,0 +1,87 @@
+package com.mojang.util;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import org.apache.logging.log4j.core.Filter;
+import org.apache.logging.log4j.core.Layout;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.appender.AbstractAppender;
+import org.apache.logging.log4j.core.config.Configuration;
+import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
+import org.apache.logging.log4j.core.config.plugins.PluginElement;
+import org.apache.logging.log4j.core.config.plugins.PluginFactory;
+import org.apache.logging.log4j.core.layout.PatternLayout;
+import org.apache.logging.log4j.core.pattern.RegexReplacement;
+
+@Plugin(
+    name = "Queue",
+    category = "Core",
+    elementType = "appender",
+    printObject = true
+)
+public class QueueLogAppender extends AbstractAppender {
+    private static final int MAX_CAPACITY = 250;
+    private static final Map<String, BlockingQueue<String>> QUEUES = new HashMap();
+    private static final ReadWriteLock QUEUE_LOCK = new ReentrantReadWriteLock();
+    private final BlockingQueue<String> queue;
+
+    public QueueLogAppender(String var1, Filter var2, Layout<? extends Serializable> var3, boolean var4, BlockingQueue<String> var5) {
+        super(var1, var2, var3, var4);
+        this.queue = var5;
+    }
+
+    public void append(LogEvent var1) {
+        if (this.queue.size() >= 250) {
+            this.queue.clear();
+        }
+
+        this.queue.add(this.getLayout().toSerializable(var1).toString());
+    }
+
+    @PluginFactory
+    public static QueueLogAppender createAppender(@PluginAttribute("name") String var0, @PluginAttribute("ignoreExceptions") String var1, @PluginElement("Layout") Layout<? extends Serializable> var2, @PluginElement("Filters") Filter var3, @PluginAttribute("target") String var4) {
+        boolean var5 = Boolean.parseBoolean(var1);
+        if (var0 == null) {
+            LOGGER.error("No name provided for QueueLogAppender");
+            return null;
+        } else {
+            if (var4 == null) {
+                var4 = var0;
+            }
+
+            QUEUE_LOCK.writeLock().lock();
+            Object var6 = (BlockingQueue)QUEUES.get(var4);
+            if (var6 == null) {
+                var6 = new LinkedBlockingQueue();
+                QUEUES.put(var4, var6);
+            }
+
+            QUEUE_LOCK.writeLock().unlock();
+            if (var2 == null) {
+                var2 = PatternLayout.createLayout((String)null, (Configuration)null, (RegexReplacement)null, (String)null, (String)null);
+            }
+
+            return new QueueLogAppender(var0, var3, (Layout)var2, var5, (BlockingQueue)var6);
+        }
+    }
+
+    public static String getNextLogEvent(String var0) {
+        QUEUE_LOCK.readLock().lock();
+        BlockingQueue var1 = (BlockingQueue)QUEUES.get(var0);
+        QUEUE_LOCK.readLock().unlock();
+        if (var1 != null) {
+            try {
+                return (String)var1.take();
+            } catch (InterruptedException var3) {
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/com/mojang/util/UUIDTypeAdapter.java b/com/mojang/util/UUIDTypeAdapter.java
new file mode 100644
index 0000000..ecdbf21
--- /dev/null
+++ b/com/mojang/util/UUIDTypeAdapter.java
@@ -0,0 +1,28 @@
+package com.mojang.util;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import java.io.IOException;
+import java.util.UUID;
+
+public class UUIDTypeAdapter extends TypeAdapter<UUID> {
+    public UUIDTypeAdapter() {
+    }
+
+    public void write(JsonWriter var1, UUID var2) throws IOException {
+        var1.value(fromUUID(var2));
+    }
+
+    public UUID read(JsonReader var1) throws IOException {
+        return fromString(var1.nextString());
+    }
+
+    public static String fromUUID(UUID var0) {
+        return var0.toString().replace("-", "");
+    }
+
+    public static UUID fromString(String var0) {
+        return UUID.fromString(var0.replaceFirst("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})", "$1-$2-$3-$4-$5"));
+    }
+}
diff --git a/dirt.png b/dirt.png
new file mode 100644
index 0000000000000000000000000000000000000000..ef5288f8745f887eeda0b188d62843e6e29c2d2e
GIT binary patch
literal 360
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`Ea{HEjtmSN`?>!lvI6;>1s;*b
z3=DjSL74G){)!Z!pk#?_L`iUdT1k0gQ7S_~VrE{6o}X)oLYc9ish+84*PjPKMNd6l
z978Ppb0^z!GZ_lF1V^vnNEZ~@bLi6l|DUID?s>X1rch=3{msUb^RNH?J#YJ0+wGr!
z_2t}t`sKNL-jhiw>`&_Nf8P{1f$fNT`jJj$w*Qw|>(3pr$Xjx2&SoK7-*zS+|1De$
z%6%c<?P3git)6UUo)ps)xL5jqc4rA|`m}Vj8=ije@<O~-76fy(C|BofW!~^J<;gsr
zH*;1yTxa~@dtY$PtOH*pj9abiTEc`Q5(}#$7oHRF`5d$;lVyLm%)y33CabnPJV@R>
zEux{VByyE#lupEbma>Om*uT3cU$13h{ic`e|Bd<A4|lff-sUra9%k@#^>bP0l+XkK
DMir4A

literal 0
HcmV?d00001

diff --git a/favicon.png b/favicon.png
new file mode 100644
index 0000000000000000000000000000000000000000..727eb7685bfe22474be9e7fddc1704552bb86b48
GIT binary patch
literal 1374
zcmV-k1)=(hP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D02y>eSaefwW^{L9
za%BKeVQFr3E>1;MAa*k@H7+$tiu~XJ00hoSL_t(oN4;15Q&eRX_CIKv$-qHvq|3U<
z0%F2~!g66@`4WjqVfhje5=3N0K_e%e7>%@P8Y_Vj%5U=vHAB;KoYIPEnyH!kslVoF
zpF?No?Q%Cj%bj`Vy!T_@^PJ~A=kDHR%bx9HMZZow_mB1dOfwGN+k)Xo+i>(&J)Rd4
zYxGVd-n_IK6SLj;`1_sMbG-<o_v*3lb_mVm+5a06tKrlJw4d{1*X4Xc>zQo9@%s%p
z{B5mZ@NSi0YButp5wRkZ!C10)Zd6P4eK$*R{O4A5T*$-dYzumC6r=ykGQkJmGzkuT
zRe_#M!KWr-wN2(>$LAZ-eI<bKM22iW_Tw&5q3eqR>^z@~PoH$kc^+T;^KFpe?yH5^
zf2UlC@><*39GraExo9F*>*-w7kEaVFw@L*kziSte%$Z*!l5qT|E*$#08t>h$6OasX
z_P2ckUL$(0*@C(;A8Jl`;}WqBU*3xCr_!VXR!Iq&ghtyt9Td5F{o)@3Lg3iUc4-Ya
zKl(!>ny2PGLY3GOe&?e{twMsHQNlbPf3jyD5zFpgi$JFZN<VZZ+P~<=9J5azcSxdv
znM!eb(_|J}K6?%O&lSrg@E#_n?7Xg1K@~`ntzuG|w12u1YYP+L2_(1^XdK#%x`7-7
zds2l6C1*7R*CwbGd(6$L4lATr-nze4T0;M53#qQJWF^*>tPofQFU=>Aosx*IV<90x
zl=P*7sx*zw8IjNteD`)Oh|Y_fF!f8Xs72F}$jIX`h91-iiN334@Y;#+*vpY$<3(o0
zYJn>O+qQ*3ajyrZk<>W?Jt+uuC!=97KSqRV&>zH!2aTf6h2Ib0!-p*bCMW6CqC~0I
zTO5`AZvuhZbs*Lxyf9yZiVd$~lQ&6FIglaXddtD}Xg^Yf9m9nv?M;)X9jm7gNP^yA
z^-Ml8U5Avw%gC-shPC3wIk}^eRZ{`3iS$>NySJbtv>rqC`LX0mVB4@CZAWZW4Q57F
zv7|MJ&Q}TnR^Kv_BU0y9S=d;<CPpB=d}S=DFO;-60wlr2j5U6bw1CHD{XTSz1ZADq
zu?oSxUf5k8q?IIrn-lgMK9O82*NQdzd_E9y6<|V5tWn!S0=g!F!rgN%%dCu=Dk>|J
z6I^GMuacORoDi$pT)Ps8yzUqINg^B$3lUAIF%$~P^?#hN_QaBy6*HkG)pb=)3J6yM
zO}0-65L&$^V<eP-lH)lhrL2qvzSWYzB*J47VB~coE&;a|s49%CT<_7fO0An~)TBy?
z=T(Wg1kB2vDyTZD1|!dLW3ApyqRC8Rdag7pdHxu(1v-YN^g0pdWGFcjaQ4~n_X{aa
z#^^lGjVkH<3ulplR;9A5%qqL7ik?%6oqcvQpsL|YfKNguFsn2BZF<2}NKIx|%9g0<
zXi%pD|7t?*v9^Pe?pF^uy`Y<`8J(^t0ka)kyLy1n0j*4{b(&HYV$^4ao9j(goDU-&
zyD6YA78Z%bn+8)Iy~iYAI$m2~K9JmcAMcGuOvx(Mh>WU?>5X`f*YRAa;)PzRV$-1$
zViIva2b^**rQ$^sQ37g4=eY6M?GML72^M?Z;<%b#(DCCGxVd|=8!z=fX$_4S@5g1S
g8$Rv*&-{A+7cw8>Cx&5FXaE2J07*qoM6N<$f;4r41poj5

literal 0
HcmV?d00001

diff --git a/launcher_properties.json b/launcher_properties.json
new file mode 100644
index 0000000..05095f8
--- /dev/null
+++ b/launcher_properties.json
@@ -0,0 +1 @@
+{"environment":"production","versionManifest":"https://launchermeta.mojang.com/mc/game/version_manifest.json"}
\ No newline at end of file
diff --git a/log4j2.xml b/log4j2.xml
new file mode 100644
index 0000000..b1484fa
--- /dev/null
+++ b/log4j2.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN" packages="com.mojang">
+    <Appenders>
+        <Console name="SysOut" target="SYSTEM_OUT">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Console>
+        <Queue name="DevelopmentConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Queue>
+        <Async name="Async">
+            <AppenderRef ref="SysOut"/>
+            <AppenderRef ref="DevelopmentConsole"/>
+        </Async>
+    </Appenders>
+    <Loggers>
+        <Root level="info">
+            <AppenderRef ref="Async"/>
+        </Root>
+    </Loggers>
+</Configuration>
\ No newline at end of file
diff --git a/minecraft_logo.png b/minecraft_logo.png
new file mode 100644
index 0000000000000000000000000000000000000000..236dcaca11a5a3d02398552b4621cb190215a922
GIT binary patch
literal 3656
zcmeH}`9BkmAICRG%L=iS66U7dxh6;0*s?}*Mv^nl9J#Mps5DV*V~*T6LnU&jNREuT
zTCUvr2$B2z`urQ;$LIZcyxx!Z^Zj`L@_POBer}2};sjp=0{{R{6cUaF0DzF=S?(n3
zaj)}^m<9k?0j6kk#4)k}fkKyr#e{?q`UYmEW>H~b`ROS|ndudISzkXlA0PZz|0VGM
zngHj>ruDHmpdS`v2Dm==-SuB^G&X_*V%P<d$H3u@yzL7BoZ|UczzApigySX14|Nj(
z8UwL%@UVh@W)cAaa0?2qXYMw>WV28=TLOL&ko#fc=&=_YxR?4{=g6x`$TG<n*!Htd
zKH^45`9Ar*%Og3u!-)Fq!47WE^B{dI8KG;{IFwt{Gdi1{U;HZkn(aJh<;eQ(&hq`Z
zK!Lz}jHLvx8>HK?x*fcWnvIEU)=>}lTgCw+49dNp_7^wb6O3Kb=<9}zN2IQ&(HURI
z3h-)S{U@%CQjO(<I=<X4{9ubbmm(+?aGe1#2xNY2tgnxHT{w;OWltfvR5^X(dX8`A
z18xZoFoJ37x5Y*bt8!`m)87R@By{VlU*F=P@+AP?6+?siPuPbD$w%c(B`Pg>nnvf@
z%UR!vcc*S&u%IRW>c9FjE6xDuG}6d<j&Jc*cDF(n=S~f9kswnr8;mytxTaAX+O;B`
z+|0(mRk!m&>^wK!V_jPO28xykvtBu2GARRSCUn?qbijPeK&5O*Y2A4J;rf8qcV{=F
z;qj8`eo2`3FA<G|OTWtu#C{EVK@BCNUCqWBOP+7iQmLB^A_qRBtqANpBo)cHipE%~
z{G}XbtCglyg7?Pfk@ZGKeULWsKWpQ@E?oSf^z=63bHCFPWomDr1p;TP^6!_1T)(SW
zYw}5V&Cg~bt>_KPv58ZctyE$m!$u5iS>gZjE+WC&5LuDAUYQVSyUX}-n$#iN1MUmO
zlnJB=Bvov%mUdi*$o8MpPWN`~SC!^3tW*%74%jT{H0tz{bC8LVP(z9Il9ij7bggGF
zwz@)wc8RF}_KU(A)q*o~`OoO)eed%UKNsDi1$;6nsqYjWJpHjdw;uaiSb3DX*K*-J
zE``P)>dN!>MWe3F>zGdTduY3}+Bn-)>-JG^nT9&p;04k$u|wsLQhI##A9$gp+i1)<
z8>^|o)+D2xrY08{{?bsRAkQdF`GUK&>mLPhUbnF;g=**@!f*R=h|`!auhaJ*O4e|y
z?^c1-J?lAENdr8(v7-Al1V=!=p^lw~@KDX3O0ztYCX#e?_0@vVgO*lKf5Dvbm#N=e
zMXrUZx3cH|a>RMCAx+SdOHsTTRJ3oC2xW(o(!C-b=VQ5e<AK;)|A3RaXAuWnaGxcr
zThY(&X_%hkG@m9zsmZ`~K67RM^kt!FUdcjQ$J-p_`|7BSqHtc>D|@su4)qAk>S!H{
zqw08+#<&v4rfW#a^S`_Itfnt?oD>iXF{k4SJv9r#@HqF~LmjPOh8mEk8@&+b`lVZo
z5J;O%f>IDoJv7U2>rX-x&nz7XG7%2Raj@Nbb@fR};EZlvW{<cB#!cr0>iKr427F9a
z%;*%<FrX>r3fdlNdL(|zRnzCUd6RQE^F-QBtw<pa>=|b})`x3ytqUi4uSQ#G&1j~Y
z*3S96thAo88>lxd0hn3u6|$MgHj6v1e~2rMtAw7PQ_NT>bu|*D@+|1Ntwzb?#bRo{
z36D&83OP;glC_s{%HNd%+A}e|8d@qA#(;Vw0rKwrY4ylQpRC?QM*Bq>>2+6cAH6{R
zFflkw{Mn(>!l=XXzKg5sg+zQ=`uN*gAbZ_O^&Z2F0YLi6&Z`g+yB@djCJ4eCXXidK
zW#~iPcnIb60S9F65dC|SJzaP({^Artes1QPuVE2hfhkZZ=LK8!5OCcV!&ExoGDXrI
z<cNX}pRa;ZwV<n;oQu6fbB~V%wQGjV<~Az@tJnQynlvQ;f!~*P%Vzn+5xWet^6-@Z
z!n5F@HMcxWp!FyD2-tB2BwLOyRgU0$_VWjoy}6kz&}0xcA!h^fB8ycrSa)pGsdEmP
z%1>re0@)^gI=S4nTQZ4!%pjucj89lc4?b}xILI(QhSUD+OGI8o6wK($Ibe_xR7qGL
z{Odi-S+v^JGvNeI<HM&rOfeBS_ajwX@GhCN+r?dPGo`pImalX*CcgS?NkMP|o0#J%
zZk9rZfrsp>A=k@w=|NtuH`<B2AjxF*Z_9V2EzY6kNWpnFz#Gy@Dt?DCKcq{*93*9n
z))Ftp7}&!Nx+7|6CZ!qA7$^zEh<nzSOI0{E%oG~aeiBft`WKKERqS0xeWF$B{`Z5h
zt9uoLUM3^&R%3!};kWOeNNeMz&m<SzmKfYGf1s6|!#8BZQuy`x>;SD{80;G4^Rd;q
ztS&4TG<glr(Ux$>VIZz~J6OyAdvBi^0=3ZUFLM3_R+4@)W02b${)U$>W6-0R{lLFH
zQc-F4PE#n2FMXrcod>sP?D9Afs~?-|2JGthUfL*k@(i|&uc}UH?2%=}V_<s4NT_+w
zP0o-kOVbw~zZ<^7E;7NfZYeKaUX*4LYAg;2&$}zCs5o^`s<e%@_H|T4J*n!9O?89a
zq&RZF^^(lXwRf${?{g0OM5qZ}{c)d54S&eimtm&s+_9MaWy;&|R=CwqUkSaAW`v{C
z_eYQB6uc{$YjS-3YegYmH8zi*J3A*;?^ry&r(ZtSdW)Pdv|vZXH0Zo87s-;2={xCi
zOD%J#@uGtgi@autM#0&Gul{Z3(MkNG6D)F%ckb2X7oR8eD#U(hwzC|<iZY(OO<nNY
zHd9p;5BvI!C;o#MK7)#b+Oj|vOaw*J=*vpciO%-!?31dds#xs@C&`W0iXn*!&pM20
z*B3!z4Js=eLj>^>u(G@PclcsiG*1@%#xMnA8h9ti+A24!<@yj}&HT#a2R)Z9t~HBy
zGu3mSd78kIG{BiN@ojblD^{Y5P<Pj$r8=g7#`apVV^UiN80s?(@-@ZwAf%c1&4{T2
z3L7yaeitv_&{xxzT3(U>RS8j8NedJE0We;*=vTKMt(vxw5Gy^#dJb)Q1-P6EZ{shM
zHMK76PeLaC_QJrFvMHDoIkRu#S8IvBMe&d$JJNQVl<xA+lhP%l_2`Z(cBmX73S!e!
zM1o&~IfMo39@>arPVFE0AxNaXRgR#^fbb!~qNn4Da{1{z269_Jrz(qIBwgtvvvz`)
zEKzII`Uh|mTo<fB9FOOCO2VBrT*@HlPR%a-`aI}0xVJ6xu~mGmi}o0upPB#d?(7_4
zodsB-%fCmGAN!+|E0km1o`g?4Pv^EMu~?Ea*%k|bhKr5W8=c^bDD?ZBJU+avOFz}b
zNvhlMT~o9o>B-oVSe_Wd2@>2J%fZNef4)rKQb-#TeP=`2iP@s8V|k^jsY2k(9!N5@
z*{2n*sgt?}tQp2RSZZ2d#18ulQ)dD)r+%m{QnjF2SH)*pd4c&EBEbZ#ar$zRG$r20
zR%yqaEJ)(y{WPZr18oTpOg%;&SVAnwAy1t_`SQin$;v`(5YoYUwB_#wD>SB_DIz^m
zHmvJ_O`16C9A?J0pB*P<TCR?e0l~)=i;wt7taA8y?dv`iDd|0KIW?W&{_Mb8BBzdc
z=K_d}y%+s_JR;>sysa7CyIi3t<ZCDgf}@4@jjCO}mt!#TC7Kfcxz%HynW1!B!cM1Z
zPE%8`wk1yi-SoRuD`v89O{MvnHy&_7!nsq!$w!+K&hAhg_sDT=er2M$_I+4l$9vRD
z_a|;KYuiq}u^LuNlyH6c=b4)~70L1BP=cH7Mj%oR9Z!BI&{FFX@!BimCfvmF@Qe7?
z!CqtsEb($?R~eP8jy}xpZ&xU@kEjv!ia6Zgp*PFfUpxvsI<YTYv$_^?5HPiPM4$hw
Yn-tcrv^aoiKmKn4C<F#xu75A`e}fc(Hvj+t

literal 0
HcmV?d00001

diff --git a/net/minecraft/hopper/Crash.java b/net/minecraft/hopper/Crash.java
new file mode 100644
index 0000000..10319fe
--- /dev/null
+++ b/net/minecraft/hopper/Crash.java
@@ -0,0 +1,22 @@
+package net.minecraft.hopper;
+
+public class Crash {
+    private int id;
+    private String jira_issue;
+    private String title;
+
+    public Crash() {
+    }
+
+    public int getId() {
+        return this.id;
+    }
+
+    public String getJira_issue() {
+        return this.jira_issue;
+    }
+
+    public String getTitle() {
+        return this.title;
+    }
+}
diff --git a/net/minecraft/hopper/HopperService.java b/net/minecraft/hopper/HopperService.java
new file mode 100644
index 0000000..90d2aca
--- /dev/null
+++ b/net/minecraft/hopper/HopperService.java
@@ -0,0 +1,61 @@
+package net.minecraft.hopper;
+
+import com.google.gson.Gson;
+import java.io.IOException;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+public final class HopperService {
+    private static final String BASE_URL = "http://hopper.minecraft.net/crashes/";
+    private static final URL ROUTE_SUBMIT = Util.constantURL("http://hopper.minecraft.net/crashes/submit_report/");
+    private static final URL ROUTE_PUBLISH = Util.constantURL("http://hopper.minecraft.net/crashes/publish_report/");
+    private static final String[] INTERESTING_SYSTEM_PROPERTY_KEYS = new String[]{"os.version", "os.name", "os.arch", "java.version", "java.vendor", "sun.arch.data.model"};
+    private static final Gson GSON = new Gson();
+
+    public HopperService() {
+    }
+
+    public static SubmitResponse submitReport(Proxy var0, String var1, String var2, String var3) throws IOException {
+        return submitReport(var0, var1, var2, var3, (Map)null);
+    }
+
+    public static SubmitResponse submitReport(Proxy var0, String var1, String var2, String var3, Map<String, String> var4) throws IOException {
+        HashMap var5 = new HashMap();
+        if (var4 != null) {
+            var5.putAll(var4);
+        }
+
+        String[] var6 = INTERESTING_SYSTEM_PROPERTY_KEYS;
+        int var7 = var6.length;
+
+        for(int var8 = 0; var8 < var7; ++var8) {
+            String var9 = var6[var8];
+            String var10 = System.getProperty(var9);
+            if (var10 != null) {
+                var5.put(var9, var10);
+            }
+        }
+
+        SubmitRequest var11 = new SubmitRequest(var1, var2, var3, var5);
+        return (SubmitResponse)makeRequest(var0, ROUTE_SUBMIT, var11, SubmitResponse.class);
+    }
+
+    public static PublishResponse publishReport(Proxy var0, Report var1) throws IOException {
+        PublishRequest var2 = new PublishRequest(var1);
+        return (PublishResponse)makeRequest(var0, ROUTE_PUBLISH, var2, PublishResponse.class);
+    }
+
+    private static <T extends Response> T makeRequest(Proxy var0, URL var1, Object var2, Class<T> var3) throws IOException {
+        String var4 = Util.performPost(var1, GSON.toJson(var2), var0, "application/json", true);
+        Response var5 = (Response)GSON.fromJson(var4, var3);
+        if (var5 == null) {
+            return null;
+        } else if (var5.getError() != null) {
+            throw new IOException(var5.getError());
+        } else {
+            return var5;
+        }
+    }
+}
diff --git a/net/minecraft/hopper/Problem.java b/net/minecraft/hopper/Problem.java
new file mode 100644
index 0000000..049d2e0
--- /dev/null
+++ b/net/minecraft/hopper/Problem.java
@@ -0,0 +1,22 @@
+package net.minecraft.hopper;
+
+public class Problem {
+    private String title;
+    private String description;
+    private String url;
+
+    public Problem() {
+    }
+
+    public String getTitle() {
+        return this.title;
+    }
+
+    public String getDescription() {
+        return this.description;
+    }
+
+    public String getUrl() {
+        return this.url;
+    }
+}
diff --git a/net/minecraft/hopper/PublishRequest.java b/net/minecraft/hopper/PublishRequest.java
new file mode 100644
index 0000000..37a97b9
--- /dev/null
+++ b/net/minecraft/hopper/PublishRequest.java
@@ -0,0 +1,11 @@
+package net.minecraft.hopper;
+
+public class PublishRequest {
+    private String token;
+    private int report_id;
+
+    public PublishRequest(Report var1) {
+        this.report_id = var1.getId();
+        this.token = var1.getToken();
+    }
+}
diff --git a/net/minecraft/hopper/PublishResponse.java b/net/minecraft/hopper/PublishResponse.java
new file mode 100644
index 0000000..82bd45e
--- /dev/null
+++ b/net/minecraft/hopper/PublishResponse.java
@@ -0,0 +1,22 @@
+package net.minecraft.hopper;
+
+public class PublishResponse extends Response {
+    private Report report;
+    private Crash crash;
+    private Problem problem;
+
+    public PublishResponse() {
+    }
+
+    public Report getReport() {
+        return this.report;
+    }
+
+    public Crash getCrash() {
+        return this.crash;
+    }
+
+    public Problem getProblem() {
+        return this.problem;
+    }
+}
diff --git a/net/minecraft/hopper/Report.java b/net/minecraft/hopper/Report.java
new file mode 100644
index 0000000..00d09e5
--- /dev/null
+++ b/net/minecraft/hopper/Report.java
@@ -0,0 +1,26 @@
+package net.minecraft.hopper;
+
+public class Report {
+    private int id;
+    private boolean published;
+    private String token;
+
+    public Report() {
+    }
+
+    public int getId() {
+        return this.id;
+    }
+
+    public boolean isPublished() {
+        return this.published;
+    }
+
+    public String getToken() {
+        return this.token;
+    }
+
+    public boolean canBePublished() {
+        return this.getToken() != null;
+    }
+}
diff --git a/net/minecraft/hopper/Response.java b/net/minecraft/hopper/Response.java
new file mode 100644
index 0000000..4ab585f
--- /dev/null
+++ b/net/minecraft/hopper/Response.java
@@ -0,0 +1,12 @@
+package net.minecraft.hopper;
+
+public class Response {
+    private String error;
+
+    public Response() {
+    }
+
+    public String getError() {
+        return this.error;
+    }
+}
diff --git a/net/minecraft/hopper/SubmitRequest.java b/net/minecraft/hopper/SubmitRequest.java
new file mode 100644
index 0000000..135229f
--- /dev/null
+++ b/net/minecraft/hopper/SubmitRequest.java
@@ -0,0 +1,17 @@
+package net.minecraft.hopper;
+
+import java.util.Map;
+
+public class SubmitRequest {
+    private String report;
+    private String version;
+    private String product;
+    private Map<String, String> environment;
+
+    public SubmitRequest(String var1, String var2, String var3, Map<String, String> var4) {
+        this.report = var1;
+        this.version = var3;
+        this.product = var2;
+        this.environment = var4;
+    }
+}
diff --git a/net/minecraft/hopper/SubmitResponse.java b/net/minecraft/hopper/SubmitResponse.java
new file mode 100644
index 0000000..74a13b4
--- /dev/null
+++ b/net/minecraft/hopper/SubmitResponse.java
@@ -0,0 +1,22 @@
+package net.minecraft.hopper;
+
+public class SubmitResponse extends Response {
+    private Report report;
+    private Crash crash;
+    private Problem problem;
+
+    public SubmitResponse() {
+    }
+
+    public Report getReport() {
+        return this.report;
+    }
+
+    public Crash getCrash() {
+        return this.crash;
+    }
+
+    public Problem getProblem() {
+        return this.problem;
+    }
+}
diff --git a/net/minecraft/hopper/Util.java b/net/minecraft/hopper/Util.java
new file mode 100644
index 0000000..d5cd795
--- /dev/null
+++ b/net/minecraft/hopper/Util.java
@@ -0,0 +1,58 @@
+package net.minecraft.hopper;
+
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.Proxy;
+import java.net.URL;
+import java.nio.charset.Charset;
+import org.apache.commons.io.IOUtils;
+
+public class Util {
+    public Util() {
+    }
+
+    public static String performPost(URL var0, String var1, Proxy var2, String var3, boolean var4) throws IOException {
+        HttpURLConnection var5 = (HttpURLConnection)var0.openConnection(var2);
+        byte[] var6 = var1.getBytes(Charset.forName("UTF-8"));
+        var5.setConnectTimeout(15000);
+        var5.setReadTimeout(15000);
+        var5.setRequestMethod("POST");
+        var5.setRequestProperty("Content-Type", var3 + "; charset=utf-8");
+        var5.setRequestProperty("Content-Length", "" + var6.length);
+        var5.setRequestProperty("Content-Language", "en-US");
+        var5.setUseCaches(false);
+        var5.setDoInput(true);
+        var5.setDoOutput(true);
+        DataOutputStream var7 = new DataOutputStream(var5.getOutputStream());
+        var7.write(var6);
+        var7.flush();
+        var7.close();
+        InputStream var8 = null;
+
+        try {
+            var8 = var5.getInputStream();
+        } catch (IOException var10) {
+            if (!var4) {
+                throw var10;
+            }
+
+            var8 = var5.getErrorStream();
+            if (var8 == null) {
+                throw var10;
+            }
+        }
+
+        return IOUtils.toString(var8);
+    }
+
+    public static URL constantURL(String var0) {
+        try {
+            return new URL(var0);
+        } catch (MalformedURLException var2) {
+            throw new Error(var2);
+        }
+    }
+}
diff --git a/net/minecraft/launcher/CompatibilityRule.java b/net/minecraft/launcher/CompatibilityRule.java
new file mode 100644
index 0000000..52fe0e5
--- /dev/null
+++ b/net/minecraft/launcher/CompatibilityRule.java
@@ -0,0 +1,145 @@
+package net.minecraft.launcher;
+
+import com.mojang.launcher.OperatingSystem;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class CompatibilityRule {
+    private CompatibilityRule.Action action;
+    private CompatibilityRule.OSRestriction os;
+    private Map<String, Object> features;
+
+    public CompatibilityRule() {
+        this.action = CompatibilityRule.Action.ALLOW;
+    }
+
+    public CompatibilityRule(CompatibilityRule var1) {
+        this.action = CompatibilityRule.Action.ALLOW;
+        this.action = var1.action;
+        if (var1.os != null) {
+            this.os = new CompatibilityRule.OSRestriction(var1.os);
+        }
+
+        if (var1.features != null) {
+            this.features = var1.features;
+        }
+
+    }
+
+    public CompatibilityRule.Action getAppliedAction(CompatibilityRule.FeatureMatcher var1) {
+        if (this.os != null && !this.os.isCurrentOperatingSystem()) {
+            return null;
+        } else {
+            if (this.features != null) {
+                if (var1 == null) {
+                    return null;
+                }
+
+                Iterator var2 = this.features.entrySet().iterator();
+
+                while(var2.hasNext()) {
+                    Entry var3 = (Entry)var2.next();
+                    if (!var1.hasFeature((String)var3.getKey(), var3.getValue())) {
+                        return null;
+                    }
+                }
+            }
+
+            return this.action;
+        }
+    }
+
+    public CompatibilityRule.Action getAction() {
+        return this.action;
+    }
+
+    public CompatibilityRule.OSRestriction getOs() {
+        return this.os;
+    }
+
+    public Map<String, Object> getFeatures() {
+        return this.features;
+    }
+
+    public String toString() {
+        return "Rule{action=" + this.action + ", os=" + this.os + ", features=" + this.features + '}';
+    }
+
+    public static enum Action {
+        ALLOW,
+        DISALLOW;
+
+        private Action() {
+        }
+    }
+
+    public interface FeatureMatcher {
+        boolean hasFeature(String var1, Object var2);
+    }
+
+    public class OSRestriction {
+        private OperatingSystem name;
+        private String version;
+        private String arch;
+
+        public OSRestriction() {
+        }
+
+        public OperatingSystem getName() {
+            return this.name;
+        }
+
+        public String getVersion() {
+            return this.version;
+        }
+
+        public String getArch() {
+            return this.arch;
+        }
+
+        public OSRestriction(CompatibilityRule.OSRestriction var2) {
+            this.name = var2.name;
+            this.version = var2.version;
+            this.arch = var2.arch;
+        }
+
+        public boolean isCurrentOperatingSystem() {
+            if (this.name != null && this.name != OperatingSystem.getCurrentPlatform()) {
+                return false;
+            } else {
+                Pattern var1;
+                Matcher var2;
+                if (this.version != null) {
+                    try {
+                        var1 = Pattern.compile(this.version);
+                        var2 = var1.matcher(System.getProperty("os.version"));
+                        if (!var2.matches()) {
+                            return false;
+                        }
+                    } catch (Throwable var4) {
+                    }
+                }
+
+                if (this.arch != null) {
+                    try {
+                        var1 = Pattern.compile(this.arch);
+                        var2 = var1.matcher(System.getProperty("os.arch"));
+                        if (!var2.matches()) {
+                            return false;
+                        }
+                    } catch (Throwable var3) {
+                    }
+                }
+
+                return true;
+            }
+        }
+
+        public String toString() {
+            return "OSRestriction{name=" + this.name + ", version='" + this.version + '\'' + ", arch='" + this.arch + '\'' + '}';
+        }
+    }
+}
diff --git a/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java b/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
new file mode 100644
index 0000000..0865012
--- /dev/null
+++ b/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
@@ -0,0 +1,26 @@
+package net.minecraft.launcher;
+
+import com.google.common.base.Objects;
+import com.mojang.authlib.UserAuthentication;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.updater.CompleteMinecraftVersion;
+
+public class CurrentLaunchFeatureMatcher implements CompatibilityRule.FeatureMatcher {
+    private final Profile profile;
+    private final CompleteMinecraftVersion version;
+    private final UserAuthentication auth;
+
+    public CurrentLaunchFeatureMatcher(Profile var1, CompleteMinecraftVersion var2, UserAuthentication var3) {
+        this.profile = var1;
+        this.version = var2;
+        this.auth = var3;
+    }
+
+    public boolean hasFeature(String var1, Object var2) {
+        if (var1.equals("is_demo_user")) {
+            return Objects.equal(this.auth.getSelectedProfile() == null, var2);
+        } else {
+            return var1.equals("has_custom_resolution") ? Objects.equal(this.profile.getResolution() != null, var2) : false;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/Launcher.java b/net/minecraft/launcher/Launcher.java
new file mode 100644
index 0000000..a4849b1
--- /dev/null
+++ b/net/minecraft/launcher/Launcher.java
@@ -0,0 +1,612 @@
+package net.minecraft.launcher;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import com.google.gson.Gson;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.InvalidCredentialsException;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.assets.AssetIndex;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.Version;
+import com.mojang.util.UUIDTypeAdapter;
+import java.io.File;
+import java.io.IOException;
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.net.PasswordAuthentication;
+import java.net.Proxy;
+import java.text.DateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Collection;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.UUID;
+import javax.swing.JFrame;
+import joptsimple.ArgumentAcceptingOptionSpec;
+import joptsimple.NonOptionArgumentSpec;
+import joptsimple.OptionException;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import net.minecraft.launcher.game.GameLaunchDispatcher;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
+import net.minecraft.launcher.profile.AuthenticationDatabase;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.updater.CompleteMinecraftVersion;
+import net.minecraft.launcher.updater.Library;
+import net.minecraft.launcher.updater.LocalVersionList;
+import net.minecraft.launcher.updater.MinecraftVersionManager;
+import net.minecraft.launcher.updater.RemoteVersionList;
+import org.apache.commons.io.Charsets;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.filefilter.AgeFileFilter;
+import org.apache.commons.io.filefilter.DirectoryFileFilter;
+import org.apache.commons.io.filefilter.FileFileFilter;
+import org.apache.commons.io.filefilter.FileFilterUtils;
+import org.apache.commons.io.filefilter.IOFileFilter;
+import org.apache.commons.io.filefilter.PrefixFileFilter;
+import org.apache.commons.io.filefilter.TrueFileFilter;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class Launcher {
+    private static Launcher INSTANCE;
+    private static final Logger LOGGER;
+    private final com.mojang.launcher.Launcher launcher;
+    private final Integer bootstrapVersion;
+    private final MinecraftUserInterface userInterface;
+    private final ProfileManager profileManager;
+    private final Gson gson;
+    private final GameLaunchDispatcher launchDispatcher;
+    private boolean winTenHack;
+    private UUID clientToken;
+    private String requestedUser;
+
+    public static Launcher getCurrentInstance() {
+        return INSTANCE;
+    }
+
+    public Launcher(JFrame var1, File var2, Proxy var3, PasswordAuthentication var4, String[] var5) {
+        this(var1, var2, var3, var4, var5, 0);
+    }
+
+    public Launcher(JFrame var1, File var2, Proxy var3, PasswordAuthentication var4, String[] var5, Integer var6) {
+        this.gson = new Gson();
+        this.winTenHack = false;
+        this.clientToken = UUID.randomUUID();
+        INSTANCE = this;
+        this.setupErrorHandling();
+        this.bootstrapVersion = var6;
+        this.userInterface = this.selectUserInterface(var1);
+        if (var6 < 4) {
+            this.userInterface.showOutdatedNotice();
+            System.exit(0);
+            throw new Error("Outdated bootstrap");
+        } else {
+            LOGGER.info(this.userInterface.getTitle() + " (through bootstrap " + var6 + ") started on " + OperatingSystem.getCurrentPlatform().getName() + "...");
+            LOGGER.info("Current time is " + DateFormat.getDateTimeInstance(2, 2, Locale.US).format(new Date()));
+            if (!OperatingSystem.getCurrentPlatform().isSupported()) {
+                LOGGER.fatal("This operating system is unknown or unsupported, we cannot guarantee that the game will launch successfully.");
+            }
+
+            LOGGER.info("System.getProperty('os.name') == '" + System.getProperty("os.name") + "'");
+            LOGGER.info("System.getProperty('os.version') == '" + System.getProperty("os.version") + "'");
+            LOGGER.info("System.getProperty('os.arch') == '" + System.getProperty("os.arch") + "'");
+            LOGGER.info("System.getProperty('java.version') == '" + System.getProperty("java.version") + "'");
+            LOGGER.info("System.getProperty('java.vendor') == '" + System.getProperty("java.vendor") + "'");
+            LOGGER.info("System.getProperty('sun.arch.data.model') == '" + System.getProperty("sun.arch.data.model") + "'");
+            LOGGER.info("proxy == " + var3);
+            this.launchDispatcher = new GameLaunchDispatcher(this, this.processArgs(var5));
+            this.launcher = new com.mojang.launcher.Launcher(this.userInterface, var2, var3, var4, new MinecraftVersionManager(new LocalVersionList(var2), new RemoteVersionList(LauncherConstants.PROPERTIES.getVersionManifest(), var3)), Agent.MINECRAFT, MinecraftReleaseTypeFactory.instance(), 21);
+            this.profileManager = new ProfileManager(this);
+            ((SwingUserInterface)this.userInterface).initializeFrame();
+            this.refreshVersionsAndProfiles();
+        }
+    }
+
+    public File findNativeLauncher() {
+        String var1 = System.getenv("ProgramData");
+        if (var1 == null) {
+            var1 = System.getenv("ALLUSERSPROFILE");
+        }
+
+        if (var1 != null) {
+            File var2 = new File(var1, "Microsoft\\Windows\\Start Menu\\Programs\\Minecraft\\Minecraft.lnk");
+            if (var2.isFile()) {
+                return var2;
+            }
+        }
+
+        return null;
+    }
+
+    public void runNativeLauncher(File var1, String[] var2) {
+        ProcessBuilder var3 = new ProcessBuilder(new String[]{"cmd", "/c", var1.getAbsolutePath()});
+
+        try {
+            var3.start();
+        } catch (IOException var5) {
+            var5.printStackTrace();
+        }
+
+        System.exit(0);
+    }
+
+    private void setupErrorHandling() {
+        Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {
+            public void uncaughtException(Thread var1, Throwable var2) {
+                Launcher.LOGGER.fatal("Unhandled exception in thread " + var1, var2);
+            }
+        });
+    }
+
+    private String[] processArgs(String[] var1) {
+        OptionParser var2 = new OptionParser();
+        var2.allowsUnrecognizedOptions();
+        ArgumentAcceptingOptionSpec var3 = var2.accepts("user").withRequiredArg().ofType(String.class);
+        NonOptionArgumentSpec var4 = var2.nonOptions();
+
+        OptionSet var5;
+        try {
+            var5 = var2.parse(var1);
+        } catch (OptionException var7) {
+            return var1;
+        }
+
+        if (var5.has(var3)) {
+            this.requestedUser = (String)var5.valueOf(var3);
+        }
+
+        List var6 = var5.valuesOf(var4);
+        return (String[])var6.toArray(new String[var6.size()]);
+    }
+
+    public void refreshVersionsAndProfiles() {
+        this.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
+            public void run() {
+                try {
+                    Launcher.this.getLauncher().getVersionManager().refreshVersions();
+                } catch (Throwable var7) {
+                    Launcher.LOGGER.error("Unexpected exception refreshing version list", var7);
+                }
+
+                try {
+                    Launcher.this.profileManager.loadProfiles();
+                    Launcher.LOGGER.info("Loaded " + Launcher.this.profileManager.getProfiles().size() + " profile(s); selected '" + Launcher.this.profileManager.getSelectedProfile().getName() + "'");
+                } catch (Throwable var6) {
+                    Launcher.LOGGER.error("Unexpected exception refreshing profile list", var6);
+                }
+
+                if (Launcher.this.requestedUser != null) {
+                    AuthenticationDatabase var1 = Launcher.this.profileManager.getAuthDatabase();
+                    boolean var2 = false;
+
+                    try {
+                        String var3 = UUIDTypeAdapter.fromUUID(UUIDTypeAdapter.fromString(Launcher.this.requestedUser));
+                        UserAuthentication var4 = var1.getByUUID(var3);
+                        if (var4 != null) {
+                            Launcher.this.profileManager.setSelectedUser(var3);
+                            var2 = true;
+                        }
+                    } catch (RuntimeException var5) {
+                    }
+
+                    if (!var2 && var1.getByName(Launcher.this.requestedUser) != null) {
+                        UserAuthentication var8 = var1.getByName(Launcher.this.requestedUser);
+                        if (var8.getSelectedProfile() != null) {
+                            Launcher.this.profileManager.setSelectedUser(UUIDTypeAdapter.fromUUID(var8.getSelectedProfile().getId()));
+                        } else {
+                            Launcher.this.profileManager.setSelectedUser("demo-" + var8.getUserID());
+                        }
+                    }
+                }
+
+                Launcher.this.ensureLoggedIn();
+            }
+        });
+    }
+
+    private MinecraftUserInterface selectUserInterface(JFrame var1) {
+        return new SwingUserInterface(this, var1);
+    }
+
+    public com.mojang.launcher.Launcher getLauncher() {
+        return this.launcher;
+    }
+
+    public MinecraftUserInterface getUserInterface() {
+        return this.userInterface;
+    }
+
+    public Integer getBootstrapVersion() {
+        return this.bootstrapVersion;
+    }
+
+    public void ensureLoggedIn() {
+        UserAuthentication var1 = this.profileManager.getAuthDatabase().getByUUID(this.profileManager.getSelectedUser());
+        if (var1 == null) {
+            this.getUserInterface().showLoginPrompt();
+        } else if (!var1.isLoggedIn()) {
+            if (var1.canLogIn()) {
+                try {
+                    var1.logIn();
+
+                    try {
+                        this.profileManager.saveProfiles();
+                    } catch (IOException var6) {
+                        LOGGER.error("Couldn't save profiles after refreshing auth!", var6);
+                    }
+
+                    this.profileManager.fireRefreshEvent();
+                } catch (AuthenticationException var7) {
+                    LOGGER.error("Exception whilst logging into profile", var7);
+                    this.getUserInterface().showLoginPrompt();
+                }
+            } else {
+                this.getUserInterface().showLoginPrompt();
+            }
+        } else if (!var1.canPlayOnline()) {
+            try {
+                LOGGER.info("Refreshing auth...");
+                var1.logIn();
+
+                try {
+                    this.profileManager.saveProfiles();
+                } catch (IOException var3) {
+                    LOGGER.error("Couldn't save profiles after refreshing auth!", var3);
+                }
+
+                this.profileManager.fireRefreshEvent();
+            } catch (InvalidCredentialsException var4) {
+                LOGGER.error("Exception whilst logging into profile", var4);
+                this.getUserInterface().showLoginPrompt();
+            } catch (AuthenticationException var5) {
+                LOGGER.error("Exception whilst logging into profile", var5);
+            }
+        }
+
+    }
+
+    public UUID getClientToken() {
+        return this.clientToken;
+    }
+
+    public void setClientToken(UUID var1) {
+        this.clientToken = var1;
+    }
+
+    public void cleanupOrphanedAssets() throws IOException {
+        File var1 = new File(this.getLauncher().getWorkingDirectory(), "assets");
+        File var2 = new File(var1, "indexes");
+        File var3 = new File(var1, "objects");
+        HashSet var4 = Sets.newHashSet();
+        if (var3.isDirectory()) {
+            Iterator var5 = this.getLauncher().getVersionManager().getInstalledVersions().iterator();
+
+            while(true) {
+                VersionSyncInfo var6;
+                File var9;
+                do {
+                    if (!var5.hasNext()) {
+                        File[] var15 = var3.listFiles(DirectoryFileFilter.DIRECTORY);
+                        if (var15 != null) {
+                            File[] var16 = var15;
+                            int var17 = var15.length;
+
+                            for(int var18 = 0; var18 < var17; ++var18) {
+                                var9 = var16[var18];
+                                File[] var19 = var9.listFiles(FileFileFilter.FILE);
+                                if (var19 != null) {
+                                    File[] var20 = var19;
+                                    int var21 = var19.length;
+
+                                    for(int var13 = 0; var13 < var21; ++var13) {
+                                        File var14 = var20[var13];
+                                        if (!var4.contains(var14.getName().toLowerCase())) {
+                                            LOGGER.info("Cleaning up orphaned object {}", new Object[]{var14.getName()});
+                                            FileUtils.deleteQuietly(var14);
+                                        }
+                                    }
+                                }
+                            }
+                        }
+
+                        deleteEmptyDirectories(var3);
+                        return;
+                    }
+
+                    var6 = (VersionSyncInfo)var5.next();
+                } while(!(var6.getLocalVersion() instanceof CompleteMinecraftVersion));
+
+                CompleteMinecraftVersion var7 = (CompleteMinecraftVersion)var6.getLocalVersion();
+                String var8 = var7.getAssetIndex().getId();
+                var9 = new File(var2, var8 + ".json");
+                AssetIndex var10 = (AssetIndex)this.gson.fromJson(FileUtils.readFileToString(var9, Charsets.UTF_8), AssetIndex.class);
+                Iterator var11 = var10.getUniqueObjects().keySet().iterator();
+
+                while(var11.hasNext()) {
+                    AssetIndex.AssetObject var12 = (AssetIndex.AssetObject)var11.next();
+                    var4.add(var12.getHash().toLowerCase());
+                }
+            }
+        }
+    }
+
+    public void cleanupOrphanedLibraries() throws IOException {
+        File var1 = new File(this.getLauncher().getWorkingDirectory(), "libraries");
+        HashSet var2 = Sets.newHashSet();
+        if (var1.isDirectory()) {
+            Iterator var3 = this.getLauncher().getVersionManager().getInstalledVersions().iterator();
+
+            while(true) {
+                VersionSyncInfo var4;
+                do {
+                    if (!var3.hasNext()) {
+                        Collection var10 = FileUtils.listFiles(var1, TrueFileFilter.TRUE, TrueFileFilter.TRUE);
+                        if (var10 != null) {
+                            Iterator var11 = var10.iterator();
+
+                            while(var11.hasNext()) {
+                                File var12 = (File)var11.next();
+                                if (!var2.contains(var12)) {
+                                    LOGGER.info("Cleaning up orphaned library {}", new Object[]{var12});
+                                    FileUtils.deleteQuietly(var12);
+                                }
+                            }
+                        }
+
+                        deleteEmptyDirectories(var1);
+                        return;
+                    }
+
+                    var4 = (VersionSyncInfo)var3.next();
+                } while(!(var4.getLocalVersion() instanceof CompleteMinecraftVersion));
+
+                CompleteMinecraftVersion var5 = (CompleteMinecraftVersion)var4.getLocalVersion();
+                Iterator var6 = var5.getRelevantLibraries(var5.createFeatureMatcher()).iterator();
+
+                while(var6.hasNext()) {
+                    Library var7 = (Library)var6.next();
+                    String var8 = null;
+                    if (var7.getNatives() != null) {
+                        String var9 = (String)var7.getNatives().get(OperatingSystem.getCurrentPlatform());
+                        if (var9 != null) {
+                            var8 = var7.getArtifactPath(var9);
+                        }
+                    } else {
+                        var8 = var7.getArtifactPath();
+                    }
+
+                    if (var8 != null) {
+                        var2.add(new File(var1, var8));
+                        var2.add(new File(var1, var8 + ".sha"));
+                    }
+                }
+            }
+        }
+    }
+
+    public void cleanupOldSkins() {
+        File var1 = new File(this.getLauncher().getWorkingDirectory(), "assets");
+        File var2 = new File(var1, "skins");
+        if (var2.isDirectory()) {
+            Collection var3 = FileUtils.listFiles(var2, new AgeFileFilter(System.currentTimeMillis() - 604800000L), TrueFileFilter.TRUE);
+            if (var3 != null) {
+                Iterator var4 = var3.iterator();
+
+                while(var4.hasNext()) {
+                    File var5 = (File)var4.next();
+                    LOGGER.info("Cleaning up old skin {}", new Object[]{var5.getName()});
+                    FileUtils.deleteQuietly(var5);
+                }
+            }
+
+            deleteEmptyDirectories(var2);
+        }
+    }
+
+    public void cleanupOldVirtuals() throws IOException {
+        File var1 = new File(this.getLauncher().getWorkingDirectory(), "assets");
+        File var2 = new File(var1, "virtual");
+        DateTypeAdapter var3 = new DateTypeAdapter();
+        Calendar var4 = Calendar.getInstance();
+        var4.add(5, -5);
+        Date var5 = var4.getTime();
+        if (var2.isDirectory()) {
+            File[] var6 = var2.listFiles(DirectoryFileFilter.DIRECTORY);
+            if (var6 != null) {
+                File[] var7 = var6;
+                int var8 = var6.length;
+
+                for(int var9 = 0; var9 < var8; ++var9) {
+                    File var10 = var7[var9];
+                    File var11 = new File(var10, ".lastused");
+                    if (var11.isFile()) {
+                        Date var12 = var3.deserializeToDate(FileUtils.readFileToString(var11));
+                        if (var5.after(var12)) {
+                            LOGGER.info("Cleaning up old virtual directory {}", new Object[]{var10});
+                            FileUtils.deleteQuietly(var10);
+                        }
+                    } else {
+                        LOGGER.info("Cleaning up strange virtual directory {}", new Object[]{var10});
+                        FileUtils.deleteQuietly(var10);
+                    }
+                }
+            }
+
+            deleteEmptyDirectories(var2);
+        }
+    }
+
+    public void cleanupOldNatives() {
+        File var1 = new File(this.launcher.getWorkingDirectory(), "versions/");
+        LOGGER.info("Looking for old natives & assets to clean up...");
+        AgeFileFilter var2 = new AgeFileFilter(System.currentTimeMillis() - 3600000L);
+        if (var1.isDirectory()) {
+            File[] var3 = var1.listFiles(DirectoryFileFilter.DIRECTORY);
+            if (var3 != null) {
+                File[] var4 = var3;
+                int var5 = var3.length;
+
+                for(int var6 = 0; var6 < var5; ++var6) {
+                    File var7 = var4[var6];
+                    File[] var8 = var7.listFiles(FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2}));
+                    if (var8 != null) {
+                        File[] var9 = var8;
+                        int var10 = var8.length;
+
+                        for(int var11 = 0; var11 < var10; ++var11) {
+                            File var12 = var9[var11];
+                            LOGGER.debug("Deleting " + var12);
+                            FileUtils.deleteQuietly(var12);
+                        }
+                    }
+                }
+            }
+
+        }
+    }
+
+    public void cleanupOrphanedVersions() {
+        LOGGER.info("Looking for orphaned versions to clean up...");
+        HashSet var1 = Sets.newHashSet();
+        Iterator var2 = this.getProfileManager().getProfiles().values().iterator();
+
+        VersionSyncInfo var5;
+        while(var2.hasNext()) {
+            Profile var3 = (Profile)var2.next();
+            String var4 = var3.getLastVersionId();
+            var5 = null;
+            if (var4 != null) {
+                var5 = this.getLauncher().getVersionManager().getVersionSyncInfo(var4);
+            }
+
+            if (var5 == null || var5.getLatestVersion() == null) {
+                var5 = (VersionSyncInfo)this.getLauncher().getVersionManager().getVersions(var3.getVersionFilter()).get(0);
+            }
+
+            if (var5 != null) {
+                Version var6 = var5.getLatestVersion();
+                var1.add(var6.getId());
+                if (var6 instanceof CompleteMinecraftVersion) {
+                    CompleteMinecraftVersion var7 = (CompleteMinecraftVersion)var6;
+                    var1.add(var7.getInheritsFrom());
+                    var1.add(var7.getJar());
+                }
+            }
+        }
+
+        Calendar var10 = Calendar.getInstance();
+        var10.add(5, -7);
+        Date var11 = var10.getTime();
+        Iterator var12 = this.getLauncher().getVersionManager().getInstalledVersions().iterator();
+
+        while(var12.hasNext()) {
+            var5 = (VersionSyncInfo)var12.next();
+            if (var5.getLocalVersion() instanceof CompleteMinecraftVersion) {
+                CompleteVersion var13 = (CompleteVersion)var5.getLocalVersion();
+                if (!var1.contains(var13.getId()) && var13.getType() == MinecraftReleaseType.SNAPSHOT) {
+                    if (var5.isOnRemote()) {
+                        LOGGER.info("Deleting orphaned version {} because it's a snapshot available on remote", new Object[]{var13.getId()});
+
+                        try {
+                            this.getLauncher().getVersionManager().uninstallVersion(var13);
+                        } catch (IOException var8) {
+                            LOGGER.warn("Couldn't uninstall version " + var13.getId(), var8);
+                        }
+                    } else if (var13.getUpdatedTime().before(var11)) {
+                        LOGGER.info("Deleting orphaned version {} because it's an unsupported old snapshot", new Object[]{var13.getId()});
+
+                        try {
+                            this.getLauncher().getVersionManager().uninstallVersion(var13);
+                        } catch (IOException var9) {
+                            LOGGER.warn("Couldn't uninstall version " + var13.getId(), var9);
+                        }
+                    }
+                }
+            }
+        }
+
+    }
+
+    private static Collection<File> listEmptyDirectories(File var0) {
+        ArrayList var1 = Lists.newArrayList();
+        File[] var2 = var0.listFiles();
+        if (var2 != null) {
+            File[] var3 = var2;
+            int var4 = var2.length;
+
+            for(int var5 = 0; var5 < var4; ++var5) {
+                File var6 = var3[var5];
+                if (var6.isDirectory()) {
+                    File[] var7 = var6.listFiles();
+                    if (var7 != null && var7.length != 0) {
+                        var1.addAll(listEmptyDirectories(var6));
+                    } else {
+                        var1.add(var6);
+                    }
+                }
+            }
+        }
+
+        return var1;
+    }
+
+    private static void deleteEmptyDirectories(File var0) {
+        while(true) {
+            Collection var1 = listEmptyDirectories(var0);
+            if (var1.isEmpty()) {
+                return;
+            }
+
+            Iterator var2 = var1.iterator();
+
+            while(var2.hasNext()) {
+                File var3 = (File)var2.next();
+                if (!FileUtils.deleteQuietly(var3)) {
+                    return;
+                }
+
+                LOGGER.info("Deleted empty directory {}", new Object[]{var3});
+            }
+        }
+    }
+
+    public void performCleanups() throws IOException {
+        this.cleanupOrphanedVersions();
+        this.cleanupOrphanedAssets();
+        this.cleanupOldSkins();
+        this.cleanupOldNatives();
+        this.cleanupOldVirtuals();
+    }
+
+    public ProfileManager getProfileManager() {
+        return this.profileManager;
+    }
+
+    public GameLaunchDispatcher getLaunchDispatcher() {
+        return this.launchDispatcher;
+    }
+
+    public boolean usesWinTenHack() {
+        return this.winTenHack;
+    }
+
+    public void setWinTenHack() {
+        this.winTenHack = true;
+    }
+
+    static {
+        Thread.currentThread().setContextClassLoader(Launcher.class.getClassLoader());
+        LOGGER = LogManager.getLogger();
+    }
+}
diff --git a/net/minecraft/launcher/LauncherConstants.java b/net/minecraft/launcher/LauncherConstants.java
new file mode 100644
index 0000000..fe2d1c0
--- /dev/null
+++ b/net/minecraft/launcher/LauncherConstants.java
@@ -0,0 +1,120 @@
+package net.minecraft.launcher;
+
+import com.google.common.base.Objects;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import org.apache.commons.io.IOUtils;
+
+public class LauncherConstants {
+    public static final int VERSION_FORMAT = 21;
+    public static final int PROFILES_FORMAT = 1;
+    public static final URI URL_REGISTER = constantURI("https://account.mojang.com/register");
+    public static final String URL_JAR_FALLBACK = "https://s3.amazonaws.com/Minecraft.Download/";
+    public static final String URL_RESOURCE_BASE = "http://resources.download.minecraft.net/";
+    public static final String URL_LIBRARY_BASE = "https://libraries.minecraft.net/";
+    public static final String URL_BLOG = "http://mcupdate.tumblr.com";
+    public static final String URL_SUPPORT = "http://help.mojang.com/?ref=launcher";
+    public static final String URL_STATUS_CHECKER = "http://status.mojang.com/check";
+    public static final int UNVERSIONED_BOOTSTRAP_VERSION = 0;
+    public static final int MINIMUM_BOOTSTRAP_SUPPORTED = 4;
+    public static final int SUPER_COOL_BOOTSTRAP_VERSION = 100;
+    public static final String URL_BOOTSTRAP_DOWNLOAD = "https://mojang.com/2013/06/minecraft-1-6-pre-release/";
+    public static final String[] BOOTSTRAP_OUT_OF_DATE_BUTTONS = new String[]{"Go to URL", "Close"};
+    public static final String LAUNCHER_OUT_OF_DATE_MESSAGE = "It looks like you've used a newer launcher than this one! If you go back to using this one, we will need to reset your configuration.";
+    public static final String[] LAUNCHER_OUT_OF_DATE_BUTTONS = new String[]{"Nevermind, close this launcher", "I'm sure. Reset my settings."};
+    public static final String LAUNCHER_NOT_NATIVE_MESSAGE = "This shortcut to the launcher is out of date. Please delete it and remake it to the new launcher, which we will start for you now.";
+    public static final String[] CONFIRM_PROFILE_DELETION_OPTIONS = new String[]{"Delete profile", "Cancel"};
+    public static final URI URL_FORGOT_USERNAME = constantURI("http://help.mojang.com/customer/portal/articles/1233873?ref=launcher");
+    public static final URI URL_FORGOT_PASSWORD_MINECRAFT = constantURI("http://help.mojang.com/customer/portal/articles/329524-change-or-forgot-password?ref=launcher");
+    public static final URI URL_FORGOT_MIGRATED_EMAIL = constantURI("http://help.mojang.com/customer/portal/articles/1205055-minecraft-launcher-error---migrated-account?ref=launcher");
+    public static final URI URL_DEMO_HELP = constantURI("https://help.mojang.com/customer/portal/articles/1218766-can-only-play-minecraft-demo?ref=launcher");
+    public static final URI URL_UPGRADE_WINDOWS = constantURI("https://launcher.mojang.com/download/MinecraftInstaller.msi");
+    public static final URI URL_UPGRADE_OSX = constantURI("https://launcher.mojang.com/download/Minecraft.dmg");
+    public static final int MAX_NATIVES_LIFE_IN_SECONDS = 3600;
+    public static final int MAX_SKIN_LIFE_IN_SECONDS = 604800;
+    public static final LauncherConstants.LauncherProperties PROPERTIES = getProperties();
+
+    public LauncherConstants() {
+    }
+
+    public static URI constantURI(String var0) {
+        try {
+            return new URI(var0);
+        } catch (URISyntaxException var2) {
+            throw new Error(var2);
+        }
+    }
+
+    public static URL constantURL(String var0) {
+        try {
+            return new URL(var0);
+        } catch (MalformedURLException var2) {
+            throw new Error(var2);
+        }
+    }
+
+    public static String getVersionName() {
+        return (String)Objects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown");
+    }
+
+    private static LauncherConstants.LauncherProperties getProperties() {
+        Gson var0 = (new GsonBuilder()).registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory()).create();
+        InputStream var1 = LauncherConstants.class.getResourceAsStream("/launcher_properties.json");
+        if (var1 != null) {
+            LauncherConstants.LauncherProperties var2;
+            try {
+                var2 = (LauncherConstants.LauncherProperties)var0.fromJson(IOUtils.toString(var1), LauncherConstants.LauncherProperties.class);
+            } catch (IOException var6) {
+                var6.printStackTrace();
+                return new LauncherConstants.LauncherProperties();
+            } finally {
+                IOUtils.closeQuietly(var1);
+            }
+
+            return var2;
+        } else {
+            return new LauncherConstants.LauncherProperties();
+        }
+    }
+
+    public static enum LauncherEnvironment {
+        PRODUCTION(""),
+        STAGING(" (STAGING VERSION, NOT FINAL)"),
+        DEV(" (DEV VERSION, NOT FINAL)");
+
+        private final String title;
+
+        private LauncherEnvironment(String var3) {
+            this.title = var3;
+        }
+
+        public String getTitle() {
+            return this.title;
+        }
+    }
+
+    public static class LauncherProperties {
+        private LauncherConstants.LauncherEnvironment environment;
+        private URL versionManifest;
+
+        public LauncherProperties() {
+            this.environment = LauncherConstants.LauncherEnvironment.PRODUCTION;
+            this.versionManifest = LauncherConstants.constantURL("https://launchermeta.mojang.com/mc/game/version_manifest.json");
+        }
+
+        public LauncherConstants.LauncherEnvironment getEnvironment() {
+            return this.environment;
+        }
+
+        public URL getVersionManifest() {
+            return this.versionManifest;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/Main.java b/net/minecraft/launcher/Main.java
new file mode 100644
index 0000000..3da8cfb
--- /dev/null
+++ b/net/minecraft/launcher/Main.java
@@ -0,0 +1,107 @@
+package net.minecraft.launcher;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.InetSocketAddress;
+import java.net.PasswordAuthentication;
+import java.net.Proxy;
+import java.net.Proxy.Type;
+import java.util.List;
+import javax.imageio.ImageIO;
+import javax.swing.JFrame;
+import joptsimple.ArgumentAcceptingOptionSpec;
+import joptsimple.NonOptionArgumentSpec;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class Main {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    public Main() {
+    }
+
+    public static void main(String[] var0) {
+        LOGGER.debug("main() called!");
+        startLauncher(var0);
+    }
+
+    private static void startLauncher(String[] var0) {
+        OptionParser var1 = new OptionParser();
+        var1.allowsUnrecognizedOptions();
+        var1.accepts("winTen");
+        ArgumentAcceptingOptionSpec var2 = var1.accepts("proxyHost").withRequiredArg();
+        ArgumentAcceptingOptionSpec var3 = var1.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
+        ArgumentAcceptingOptionSpec var4 = var1.accepts("workDir").withRequiredArg().ofType(File.class).defaultsTo(getWorkingDirectory(), new File[0]);
+        NonOptionArgumentSpec var5 = var1.nonOptions();
+        OptionSet var6 = var1.parse(var0);
+        List var7 = var6.valuesOf(var5);
+        String var8 = (String)var6.valueOf(var2);
+        Proxy var9 = Proxy.NO_PROXY;
+        if (var8 != null) {
+            try {
+                var9 = new Proxy(Type.SOCKS, new InetSocketAddress(var8, (Integer)var6.valueOf(var3)));
+            } catch (Exception var15) {
+            }
+        }
+
+        File var10 = (File)var6.valueOf(var4);
+        var10.mkdirs();
+        LOGGER.debug("About to create JFrame.");
+        JFrame var12 = new JFrame();
+        var12.setTitle("Minecraft Launcher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        var12.setPreferredSize(new Dimension(900, 580));
+
+        try {
+            InputStream var13 = Launcher.class.getResourceAsStream("/favicon.png");
+            if (var13 != null) {
+                var12.setIconImage(ImageIO.read(var13));
+            }
+        } catch (IOException var14) {
+        }
+
+        var12.pack();
+        var12.setLocationRelativeTo((Component)null);
+        var12.setVisible(true);
+        if (var6.has("winTen")) {
+            System.setProperty("os.name", "Windows 10");
+            System.setProperty("os.version", "10.0");
+        }
+
+        LOGGER.debug("Starting up launcher.");
+        Launcher var16 = new Launcher(var12, var10, var9, (PasswordAuthentication)null, (String[])var7.toArray(new String[var7.size()]), 100);
+        if (var6.has("winTen")) {
+            var16.setWinTenHack();
+        }
+
+        var12.setLocationRelativeTo((Component)null);
+        LOGGER.debug("End of main.");
+    }
+
+    public static File getWorkingDirectory() {
+        String var0 = System.getProperty("user.home", ".");
+        File var1;
+        switch(OperatingSystem.getCurrentPlatform()) {
+        case LINUX:
+            var1 = new File(var0, ".minecraft/");
+            break;
+        case WINDOWS:
+            String var2 = System.getenv("APPDATA");
+            String var3 = var2 != null ? var2 : var0;
+            var1 = new File(var3, ".minecraft/");
+            break;
+        case OSX:
+            var1 = new File(var0, "Library/Application Support/minecraft");
+            break;
+        default:
+            var1 = new File(var0, "minecraft/");
+        }
+
+        return var1;
+    }
+}
diff --git a/net/minecraft/launcher/MinecraftUserInterface.java b/net/minecraft/launcher/MinecraftUserInterface.java
new file mode 100644
index 0000000..a7b8efc
--- /dev/null
+++ b/net/minecraft/launcher/MinecraftUserInterface.java
@@ -0,0 +1,15 @@
+package net.minecraft.launcher;
+
+import com.mojang.launcher.UserInterface;
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import net.minecraft.launcher.game.MinecraftGameRunner;
+
+public interface MinecraftUserInterface extends UserInterface {
+    void showOutdatedNotice();
+
+    String getTitle();
+
+    GameOutputLogProcessor showGameOutputTab(MinecraftGameRunner var1);
+
+    boolean shouldDowngradeProfiles();
+}
diff --git a/net/minecraft/launcher/SwingUserInterface.java b/net/minecraft/launcher/SwingUserInterface.java
new file mode 100644
index 0000000..06e506a
--- /dev/null
+++ b/net/minecraft/launcher/SwingUserInterface.java
@@ -0,0 +1,309 @@
+package net.minecraft.launcher;
+
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.SettableFuture;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import com.mojang.launcher.updater.DownloadProgress;
+import com.mojang.launcher.versions.CompleteVersion;
+import java.awt.Dimension;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.concurrent.TimeUnit;
+import javax.imageio.ImageIO;
+import javax.swing.BorderFactory;
+import javax.swing.Icon;
+import javax.swing.JFrame;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.UIManager;
+import net.minecraft.launcher.game.MinecraftGameRunner;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.ui.LauncherPanel;
+import net.minecraft.launcher.ui.popups.login.LogInPopup;
+import net.minecraft.launcher.ui.tabs.CrashReportTab;
+import net.minecraft.launcher.ui.tabs.GameOutputTab;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class SwingUserInterface implements MinecraftUserInterface {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final long MAX_SHUTDOWN_TIME = 10000L;
+    private final Launcher minecraftLauncher;
+    private LauncherPanel launcherPanel;
+    private final JFrame frame;
+
+    public SwingUserInterface(Launcher var1, JFrame var2) {
+        this.minecraftLauncher = var1;
+        this.frame = var2;
+        setLookAndFeel();
+    }
+
+    private static void setLookAndFeel() {
+        JFrame var0 = new JFrame();
+
+        try {
+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
+        } catch (Throwable var7) {
+            try {
+                LOGGER.error("Your java failed to provide normal look and feel, trying the old fallback now");
+                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
+            } catch (Throwable var6) {
+                LOGGER.error("Unexpected exception setting look and feel", var6);
+            }
+        }
+
+        JPanel var1 = new JPanel();
+        var1.setBorder(BorderFactory.createTitledBorder("test"));
+        var0.add(var1);
+
+        try {
+            var0.pack();
+        } catch (Throwable var5) {
+            LOGGER.error("Custom (broken) theme detected, falling back onto x-platform theme");
+
+            try {
+                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
+            } catch (Throwable var4) {
+                LOGGER.error("Unexpected exception setting look and feel", var4);
+            }
+        }
+
+        var0.dispose();
+    }
+
+    public void showLoginPrompt(final Launcher var1, final LogInPopup.Callback var2) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                LogInPopup var1x = new LogInPopup(var1, var2);
+                SwingUserInterface.this.launcherPanel.setCard("login", var1x);
+            }
+        });
+    }
+
+    public void initializeFrame() {
+        this.frame.getContentPane().removeAll();
+        this.frame.setTitle("Minecraft Launcher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        this.frame.setPreferredSize(new Dimension(900, 580));
+        this.frame.setDefaultCloseOperation(2);
+        this.frame.addWindowListener(new WindowAdapter() {
+            public void windowClosing(WindowEvent var1) {
+                SwingUserInterface.LOGGER.info("Window closed, shutting down.");
+                SwingUserInterface.this.frame.setVisible(false);
+                SwingUserInterface.this.frame.dispose();
+                SwingUserInterface.LOGGER.info("Halting executors");
+                SwingUserInterface.this.minecraftLauncher.getLauncher().getVersionManager().getExecutorService().shutdown();
+                SwingUserInterface.LOGGER.info("Awaiting termination.");
+
+                try {
+                    SwingUserInterface.this.minecraftLauncher.getLauncher().getVersionManager().getExecutorService().awaitTermination(10L, TimeUnit.SECONDS);
+                } catch (InterruptedException var3) {
+                    SwingUserInterface.LOGGER.info("Termination took too long.");
+                }
+
+                SwingUserInterface.LOGGER.info("Goodbye.");
+                SwingUserInterface.this.forcefullyShutdown();
+            }
+        });
+
+        try {
+            InputStream var1 = Launcher.class.getResourceAsStream("/favicon.png");
+            if (var1 != null) {
+                this.frame.setIconImage(ImageIO.read(var1));
+            }
+        } catch (IOException var2) {
+        }
+
+        this.launcherPanel = new LauncherPanel(this.minecraftLauncher);
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.frame.add(SwingUserInterface.this.launcherPanel);
+                SwingUserInterface.this.frame.pack();
+                SwingUserInterface.this.frame.setVisible(true);
+                SwingUserInterface.this.frame.setAlwaysOnTop(true);
+                SwingUserInterface.this.frame.setAlwaysOnTop(false);
+            }
+        });
+    }
+
+    private void forcefullyShutdown() {
+        try {
+            Timer var1 = new Timer();
+            var1.schedule(new TimerTask() {
+                public void run() {
+                    Runtime.getRuntime().halt(0);
+                }
+            }, 10000L);
+            System.exit(0);
+        } catch (Throwable var2) {
+            Runtime.getRuntime().halt(0);
+        }
+
+    }
+
+    public void showOutdatedNotice() {
+        String var1 = "Sorry, but your launcher is outdated! Please redownload it at https://mojang.com/2013/06/minecraft-1-6-pre-release/";
+        this.frame.getContentPane().removeAll();
+        int var2 = JOptionPane.showOptionDialog(this.frame, var1, "Outdated launcher", 0, 0, (Icon)null, LauncherConstants.BOOTSTRAP_OUT_OF_DATE_BUTTONS, LauncherConstants.BOOTSTRAP_OUT_OF_DATE_BUTTONS[0]);
+        if (var2 == 0) {
+            try {
+                OperatingSystem.openLink(new URI("https://mojang.com/2013/06/minecraft-1-6-pre-release/"));
+            } catch (URISyntaxException var4) {
+                LOGGER.error("Couldn't open bootstrap download link. Please visit https://mojang.com/2013/06/minecraft-1-6-pre-release/ manually.", var4);
+            }
+        }
+
+        this.minecraftLauncher.getLauncher().shutdownLauncher();
+    }
+
+    public void showLoginPrompt() {
+        final ProfileManager var1 = this.minecraftLauncher.getProfileManager();
+
+        try {
+            var1.saveProfiles();
+        } catch (IOException var3) {
+            LOGGER.error("Couldn't save profiles before logging in!", var3);
+        }
+
+        final Profile var2 = var1.getSelectedProfile();
+        this.showLoginPrompt(this.minecraftLauncher, new LogInPopup.Callback() {
+            public void onLogIn(String var1x) {
+                UserAuthentication var2x = var1.getAuthDatabase().getByUUID(var1x);
+                var1.setSelectedUser(var1x);
+                if (var2.getName().equals("(Default)") && var2x.getSelectedProfile() != null) {
+                    String var3 = var2x.getSelectedProfile().getName();
+                    String var4 = var2x.getSelectedProfile().getName();
+
+                    StringBuilder var10000;
+                    for(int var5 = 1; var1.getProfiles().containsKey(var4); var4 = var10000.append(var5).toString()) {
+                        var10000 = (new StringBuilder()).append(var3).append(" ");
+                        ++var5;
+                    }
+
+                    Profile var6 = new Profile(var2);
+                    var6.setName(var4);
+                    var1.getProfiles().put(var4, var6);
+                    var1.getProfiles().remove("(Default)");
+                    var1.setSelectedProfile(var4);
+                }
+
+                try {
+                    var1.saveProfiles();
+                } catch (IOException var7) {
+                    SwingUserInterface.LOGGER.error("Couldn't save profiles after logging in!", var7);
+                }
+
+                if (var1x == null) {
+                    SwingUserInterface.this.minecraftLauncher.getLauncher().shutdownLauncher();
+                } else {
+                    var1.fireRefreshEvent();
+                }
+
+                SwingUserInterface.this.launcherPanel.setCard("launcher", (JPanel)null);
+            }
+        });
+    }
+
+    public void setVisible(final boolean var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.frame.setVisible(var1);
+            }
+        });
+    }
+
+    public void shutdownLauncher() {
+        if (SwingUtilities.isEventDispatchThread()) {
+            LOGGER.info("Requesting window close");
+            this.frame.dispatchEvent(new WindowEvent(this.frame, 201));
+        } else {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    SwingUserInterface.this.shutdownLauncher();
+                }
+            });
+        }
+
+    }
+
+    public void setDownloadProgress(final DownloadProgress var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.launcherPanel.getProgressBar().setVisible(true);
+                SwingUserInterface.this.launcherPanel.getProgressBar().setValue((int)(var1.getPercent() * 100.0F));
+                SwingUserInterface.this.launcherPanel.getProgressBar().setString(var1.getStatus());
+            }
+        });
+    }
+
+    public void hideDownloadProgress() {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.launcherPanel.getProgressBar().setVisible(false);
+            }
+        });
+    }
+
+    public void showCrashReport(final CompleteVersion var1, final File var2, final String var3) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.launcherPanel.getTabPanel().setCrashReport(new CrashReportTab(SwingUserInterface.this.minecraftLauncher, var1, var2, var3));
+            }
+        });
+    }
+
+    public void gameLaunchFailure(final String var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                JOptionPane.showMessageDialog(SwingUserInterface.this.frame, var1, "Cannot play game", 0);
+            }
+        });
+    }
+
+    public void updatePlayState() {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                SwingUserInterface.this.launcherPanel.getBottomBar().getPlayButtonPanel().checkState();
+            }
+        });
+    }
+
+    public GameOutputLogProcessor showGameOutputTab(final MinecraftGameRunner var1) {
+        final SettableFuture var2 = SettableFuture.create();
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                GameOutputTab var1x = new GameOutputTab(SwingUserInterface.this.minecraftLauncher);
+                var2.set(var1x);
+                UserAuthentication var2x = var1.getAuth();
+                String var3 = var2x.getSelectedProfile() == null ? "Demo" : var2x.getSelectedProfile().getName();
+                SwingUserInterface.this.launcherPanel.getTabPanel().removeTab("Game Output (" + var3 + ")");
+                SwingUserInterface.this.launcherPanel.getTabPanel().addTab("Game Output (" + var3 + ")", var1x);
+                SwingUserInterface.this.launcherPanel.getTabPanel().setSelectedComponent(var1x);
+            }
+        });
+        return (GameOutputLogProcessor)Futures.getUnchecked(var2);
+    }
+
+    public boolean shouldDowngradeProfiles() {
+        int var1 = JOptionPane.showOptionDialog(this.frame, "It looks like you've used a newer launcher than this one! If you go back to using this one, we will need to reset your configuration.", "Outdated launcher", 0, 0, (Icon)null, LauncherConstants.LAUNCHER_OUT_OF_DATE_BUTTONS, LauncherConstants.LAUNCHER_OUT_OF_DATE_BUTTONS[0]);
+        return var1 == 1;
+    }
+
+    public String getTitle() {
+        return "Minecraft Launcher " + LauncherConstants.getVersionName();
+    }
+
+    public JFrame getFrame() {
+        return this.frame;
+    }
+}
diff --git a/net/minecraft/launcher/game/GameLaunchDispatcher.java b/net/minecraft/launcher/game/GameLaunchDispatcher.java
new file mode 100644
index 0000000..49e9797
--- /dev/null
+++ b/net/minecraft/launcher/game/GameLaunchDispatcher.java
@@ -0,0 +1,208 @@
+package net.minecraft.launcher.game;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.launcher.game.GameInstanceStatus;
+import com.mojang.launcher.game.runner.GameRunner;
+import com.mojang.launcher.game.runner.GameRunnerListener;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import java.io.File;
+import java.util.Iterator;
+import java.util.concurrent.locks.ReentrantLock;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.profile.LauncherVisibilityRule;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+
+public class GameLaunchDispatcher implements GameRunnerListener {
+    private final Launcher launcher;
+    private final String[] additionalLaunchArgs;
+    private final ReentrantLock lock = new ReentrantLock();
+    private final BiMap<UserAuthentication, MinecraftGameRunner> instances = HashBiMap.create();
+    private boolean downloadInProgress = false;
+
+    public GameLaunchDispatcher(Launcher var1, String[] var2) {
+        this.launcher = var1;
+        this.additionalLaunchArgs = var2;
+    }
+
+    public GameLaunchDispatcher.PlayStatus getStatus() {
+        ProfileManager var1 = this.launcher.getProfileManager();
+        Profile var2 = var1.getProfiles().isEmpty() ? null : var1.getSelectedProfile();
+        UserAuthentication var3 = var1.getSelectedUser() == null ? null : var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
+        if (var3 != null && var3.isLoggedIn() && var2 != null && !this.launcher.getLauncher().getVersionManager().getVersions(var2.getVersionFilter()).isEmpty()) {
+            this.lock.lock();
+
+            label107: {
+                GameLaunchDispatcher.PlayStatus var4;
+                try {
+                    if (this.downloadInProgress) {
+                        var4 = GameLaunchDispatcher.PlayStatus.DOWNLOADING;
+                        return var4;
+                    }
+
+                    if (!this.instances.containsKey(var3)) {
+                        break label107;
+                    }
+
+                    var4 = GameLaunchDispatcher.PlayStatus.ALREADY_PLAYING;
+                } finally {
+                    this.lock.unlock();
+                }
+
+                return var4;
+            }
+
+            if (var3.getSelectedProfile() == null) {
+                return GameLaunchDispatcher.PlayStatus.CAN_PLAY_DEMO;
+            } else if (var3.canPlayOnline()) {
+                return GameLaunchDispatcher.PlayStatus.CAN_PLAY_ONLINE;
+            } else {
+                return GameLaunchDispatcher.PlayStatus.CAN_PLAY_OFFLINE;
+            }
+        } else {
+            return GameLaunchDispatcher.PlayStatus.LOADING;
+        }
+    }
+
+    public GameInstanceStatus getInstanceStatus() {
+        ProfileManager var1 = this.launcher.getProfileManager();
+        UserAuthentication var2 = var1.getSelectedUser() == null ? null : var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
+        this.lock.lock();
+
+        try {
+            GameRunner var3 = (GameRunner)this.instances.get(var2);
+            if (var3 != null) {
+                GameInstanceStatus var4 = var3.getStatus();
+                return var4;
+            }
+        } finally {
+            this.lock.unlock();
+        }
+
+        return GameInstanceStatus.IDLE;
+    }
+
+    public void play() {
+        ProfileManager var1 = this.launcher.getProfileManager();
+        final Profile var2 = var1.getSelectedProfile();
+        UserAuthentication var3 = var1.getSelectedUser() == null ? null : var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
+        final String var4 = var2.getLastVersionId();
+        final MinecraftGameRunner var5 = new MinecraftGameRunner(this.launcher, this.additionalLaunchArgs);
+        var5.setStatus(GameInstanceStatus.PREPARING);
+        this.lock.lock();
+
+        label55: {
+            try {
+                if (!this.instances.containsKey(var3) && !this.downloadInProgress) {
+                    this.instances.put(var3, var5);
+                    this.downloadInProgress = true;
+                    break label55;
+                }
+            } finally {
+                this.lock.unlock();
+            }
+
+            return;
+        }
+
+        this.launcher.getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
+            public void run() {
+                var5.setVisibility((LauncherVisibilityRule)Objects.firstNonNull(var2.getLauncherVisibilityOnGameClose(), Profile.DEFAULT_LAUNCHER_VISIBILITY));
+                VersionSyncInfo var1 = null;
+                if (var4 != null) {
+                    var1 = GameLaunchDispatcher.this.launcher.getLauncher().getVersionManager().getVersionSyncInfo(var4);
+                }
+
+                if (var1 == null || var1.getLatestVersion() == null) {
+                    var1 = (VersionSyncInfo)GameLaunchDispatcher.this.launcher.getLauncher().getVersionManager().getVersions(var2.getVersionFilter()).get(0);
+                }
+
+                var5.setStatus(GameInstanceStatus.IDLE);
+                var5.addListener(GameLaunchDispatcher.this);
+                var5.playGame(var1);
+            }
+        });
+    }
+
+    public void onGameInstanceChangedState(GameRunner var1, GameInstanceStatus var2) {
+        this.lock.lock();
+
+        try {
+            if (var2 == GameInstanceStatus.IDLE) {
+                this.instances.inverse().remove(var1);
+            }
+
+            this.downloadInProgress = false;
+            Iterator var3 = this.instances.values().iterator();
+
+            while(true) {
+                if (var3.hasNext()) {
+                    GameRunner var4 = (GameRunner)var3.next();
+                    if (var4.getStatus() == GameInstanceStatus.PLAYING) {
+                        continue;
+                    }
+
+                    this.downloadInProgress = true;
+                }
+
+                this.launcher.getUserInterface().updatePlayState();
+                return;
+            }
+        } finally {
+            this.lock.unlock();
+        }
+    }
+
+    public boolean isRunningInSameFolder() {
+        this.lock.lock();
+
+        try {
+            File var1 = (File)Objects.firstNonNull(this.launcher.getProfileManager().getSelectedProfile().getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+            Iterator var2 = this.instances.values().iterator();
+
+            while(var2.hasNext()) {
+                MinecraftGameRunner var3 = (MinecraftGameRunner)var2.next();
+                Profile var4 = var3.getSelectedProfile();
+                if (var4 != null) {
+                    File var5 = (File)Objects.firstNonNull(var4.getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+                    if (var1.equals(var5)) {
+                        boolean var6 = true;
+                        return var6;
+                    }
+                }
+            }
+        } finally {
+            this.lock.unlock();
+        }
+
+        return false;
+    }
+
+    public static enum PlayStatus {
+        LOADING("Loading...", false),
+        CAN_PLAY_DEMO("Play Demo", true),
+        CAN_PLAY_ONLINE("Play", true),
+        CAN_PLAY_OFFLINE("Play Offline", true),
+        ALREADY_PLAYING("Already Playing...", false),
+        DOWNLOADING("Installing...", false);
+
+        private final String name;
+        private final boolean canPlay;
+
+        private PlayStatus(String var3, boolean var4) {
+            this.name = var3;
+            this.canPlay = var4;
+        }
+
+        public String getName() {
+            return this.name;
+        }
+
+        public boolean canPlay() {
+            return this.canPlay;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/game/MinecraftGameRunner.java b/net/minecraft/launcher/game/MinecraftGameRunner.java
new file mode 100644
index 0000000..2ddba9a
--- /dev/null
+++ b/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -0,0 +1,526 @@
+package net.minecraft.launcher.game;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Predicate;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.UserType;
+import com.mojang.authlib.properties.PropertyMap;
+import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+import com.mojang.launcher.LegacyPropertyMapSerializer;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.game.GameInstanceStatus;
+import com.mojang.launcher.game.process.GameProcess;
+import com.mojang.launcher.game.process.GameProcessBuilder;
+import com.mojang.launcher.game.process.GameProcessFactory;
+import com.mojang.launcher.game.process.GameProcessRunnable;
+import com.mojang.launcher.game.process.direct.DirectGameProcessFactory;
+import com.mojang.launcher.game.runner.AbstractGameRunner;
+import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.updater.download.assets.AssetIndex;
+import com.mojang.launcher.versions.ExtractRules;
+import com.mojang.util.UUIDTypeAdapter;
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.InetSocketAddress;
+import java.net.PasswordAuthentication;
+import java.net.Proxy;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.TreeSet;
+import java.util.UUID;
+import java.util.Map.Entry;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import net.minecraft.launcher.CompatibilityRule;
+import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.profile.LauncherVisibilityRule;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.updater.ArgumentType;
+import net.minecraft.launcher.updater.CompleteMinecraftVersion;
+import net.minecraft.launcher.updater.Library;
+import org.apache.commons.io.Charsets;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.filefilter.FileFilterUtils;
+import org.apache.commons.io.filefilter.IOFileFilter;
+import org.apache.commons.io.filefilter.TrueFileFilter;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.text.StrSubstitutor;
+
+public class MinecraftGameRunner extends AbstractGameRunner implements GameProcessRunnable {
+    private static final String CRASH_IDENTIFIER_MAGIC = "#@!@#";
+    private final Gson gson = new Gson();
+    private final DateTypeAdapter dateAdapter = new DateTypeAdapter();
+    private final Launcher minecraftLauncher;
+    private final String[] additionalLaunchArgs;
+    private final GameProcessFactory processFactory = new DirectGameProcessFactory();
+    private File nativeDir;
+    private LauncherVisibilityRule visibilityRule;
+    private UserAuthentication auth;
+    private Profile selectedProfile;
+
+    public MinecraftGameRunner(Launcher var1, String[] var2) {
+        this.visibilityRule = LauncherVisibilityRule.CLOSE_LAUNCHER;
+        this.minecraftLauncher = var1;
+        this.additionalLaunchArgs = var2;
+    }
+
+    protected void setStatus(GameInstanceStatus var1) {
+        synchronized(this.lock) {
+            if (this.nativeDir != null && var1 == GameInstanceStatus.IDLE) {
+                LOGGER.info("Deleting " + this.nativeDir);
+                if (this.nativeDir.isDirectory() && !FileUtils.deleteQuietly(this.nativeDir)) {
+                    LOGGER.warn("Couldn't delete " + this.nativeDir + " - scheduling for deletion upon exit");
+
+                    try {
+                        FileUtils.forceDeleteOnExit(this.nativeDir);
+                    } catch (Throwable var5) {
+                    }
+                } else {
+                    this.nativeDir = null;
+                }
+            }
+
+            super.setStatus(var1);
+        }
+    }
+
+    protected com.mojang.launcher.Launcher getLauncher() {
+        return this.minecraftLauncher.getLauncher();
+    }
+
+    protected void downloadRequiredFiles(VersionSyncInfo var1) {
+        this.migrateOldAssets();
+        super.downloadRequiredFiles(var1);
+    }
+
+    protected void launchGame() throws IOException {
+        LOGGER.info("Launching game");
+        this.selectedProfile = this.minecraftLauncher.getProfileManager().getSelectedProfile();
+        this.auth = this.minecraftLauncher.getProfileManager().getAuthDatabase().getByUUID(this.minecraftLauncher.getProfileManager().getSelectedUser());
+        if (this.getVersion() == null) {
+            LOGGER.error("Aborting launch; version is null?");
+        } else {
+            this.nativeDir = new File(this.getLauncher().getWorkingDirectory(), "versions/" + this.getVersion().getId() + "/" + this.getVersion().getId() + "-natives-" + System.nanoTime());
+            if (!this.nativeDir.isDirectory()) {
+                this.nativeDir.mkdirs();
+            }
+
+            LOGGER.info("Unpacking natives to " + this.nativeDir);
+
+            try {
+                this.unpackNatives(this.nativeDir);
+            } catch (IOException var12) {
+                LOGGER.error("Couldn't unpack natives!", var12);
+                return;
+            }
+
+            File var1;
+            try {
+                var1 = this.reconstructAssets();
+            } catch (IOException var11) {
+                LOGGER.error("Couldn't unpack natives!", var11);
+                return;
+            }
+
+            File var2 = this.selectedProfile.getGameDir() == null ? this.getLauncher().getWorkingDirectory() : this.selectedProfile.getGameDir();
+            LOGGER.info("Launching in " + var2);
+            if (!var2.exists()) {
+                if (!var2.mkdirs()) {
+                    LOGGER.error("Aborting launch; couldn't create game directory");
+                    return;
+                }
+            } else if (!var2.isDirectory()) {
+                LOGGER.error("Aborting launch; game directory is not actually a directory");
+                return;
+            }
+
+            File var3 = new File(var2, "server-resource-packs");
+            if (!var3.exists()) {
+                var3.mkdirs();
+            }
+
+            GameProcessBuilder var4 = new GameProcessBuilder((String)Objects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir()));
+            var4.withSysOutFilter(new Predicate<String>() {
+                public boolean apply(String var1) {
+                    return var1.contains("#@!@#");
+                }
+            });
+            var4.directory(var2);
+            var4.withLogProcessor(this.minecraftLauncher.getUserInterface().showGameOutputTab(this));
+            String var5 = this.selectedProfile.getJavaArgs();
+            if (var5 != null) {
+                var4.withArguments(var5.split(" "));
+            } else {
+                boolean var6 = "32".equals(System.getProperty("sun.arch.data.model"));
+                String var7 = var6 ? "-Xmx512M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M" : "-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
+                var4.withArguments(var7.split(" "));
+            }
+
+            CompatibilityRule.FeatureMatcher var14 = this.createFeatureMatcher();
+            StrSubstitutor var15 = this.createArgumentsSubstitutor(this.getVersion(), this.selectedProfile, var2, var1, this.auth);
+            this.getVersion().addArguments(ArgumentType.JVM, var14, var4, var15);
+            var4.withArguments(this.getVersion().getMainClass());
+            LOGGER.info("Half command: " + StringUtils.join(var4.getFullCommands(), " "));
+            this.getVersion().addArguments(ArgumentType.GAME, var14, var4, var15);
+            Proxy var8 = this.getLauncher().getProxy();
+            PasswordAuthentication var9 = this.getLauncher().getProxyAuth();
+            if (!var8.equals(Proxy.NO_PROXY)) {
+                InetSocketAddress var10 = (InetSocketAddress)var8.address();
+                var4.withArguments("--proxyHost", var10.getHostName());
+                var4.withArguments("--proxyPort", Integer.toString(var10.getPort()));
+                if (var9 != null) {
+                    var4.withArguments("--proxyUser", var9.getUserName());
+                    var4.withArguments("--proxyPass", new String(var9.getPassword()));
+                }
+            }
+
+            var4.withArguments(this.additionalLaunchArgs);
+
+            try {
+                LOGGER.debug("Running " + StringUtils.join(var4.getFullCommands(), " "));
+                GameProcess var16 = this.processFactory.startGame(var4);
+                var16.setExitRunnable(this);
+                this.setStatus(GameInstanceStatus.PLAYING);
+                if (this.visibilityRule != LauncherVisibilityRule.DO_NOTHING) {
+                    this.minecraftLauncher.getUserInterface().setVisible(false);
+                }
+            } catch (IOException var13) {
+                LOGGER.error("Couldn't launch game", var13);
+                this.setStatus(GameInstanceStatus.IDLE);
+                return;
+            }
+
+            this.minecraftLauncher.performCleanups();
+        }
+    }
+
+    protected CompleteMinecraftVersion getVersion() {
+        return (CompleteMinecraftVersion)this.version;
+    }
+
+    private AssetIndex getAssetIndex() throws IOException {
+        String var1 = this.getVersion().getAssetIndex().getId();
+        File var2 = new File(new File(this.getAssetsDir(), "indexes"), var1 + ".json");
+        return (AssetIndex)this.gson.fromJson(FileUtils.readFileToString(var2, Charsets.UTF_8), AssetIndex.class);
+    }
+
+    private File getAssetsDir() {
+        return new File(this.getLauncher().getWorkingDirectory(), "assets");
+    }
+
+    private File reconstructAssets() throws IOException {
+        File var1 = this.getAssetsDir();
+        File var2 = new File(var1, "indexes");
+        File var3 = new File(var1, "objects");
+        String var4 = this.getVersion().getAssetIndex().getId();
+        File var5 = new File(var2, var4 + ".json");
+        File var6 = new File(new File(var1, "virtual"), var4);
+        if (!var5.isFile()) {
+            LOGGER.warn("No assets index file " + var6 + "; can't reconstruct assets");
+            return var6;
+        } else {
+            AssetIndex var7 = (AssetIndex)this.gson.fromJson(FileUtils.readFileToString(var5, Charsets.UTF_8), AssetIndex.class);
+            if (var7.isVirtual()) {
+                LOGGER.info("Reconstructing virtual assets folder at " + var6);
+                Iterator var8 = var7.getFileMap().entrySet().iterator();
+
+                while(var8.hasNext()) {
+                    Entry var9 = (Entry)var8.next();
+                    File var10 = new File(var6, (String)var9.getKey());
+                    File var11 = new File(new File(var3, ((AssetIndex.AssetObject)var9.getValue()).getHash().substring(0, 2)), ((AssetIndex.AssetObject)var9.getValue()).getHash());
+                    if (!var10.isFile()) {
+                        FileUtils.copyFile(var11, var10, false);
+                    }
+                }
+
+                FileUtils.writeStringToFile(new File(var6, ".lastused"), this.dateAdapter.serializeToString(new Date()));
+            }
+
+            return var6;
+        }
+    }
+
+    public StrSubstitutor createArgumentsSubstitutor(CompleteMinecraftVersion var1, Profile var2, File var3, File var4, UserAuthentication var5) {
+        HashMap var6 = new HashMap();
+        var6.put("auth_access_token", var5.getAuthenticatedToken());
+        var6.put("user_properties", (new GsonBuilder()).registerTypeAdapter(PropertyMap.class, new LegacyPropertyMapSerializer()).create().toJson(var5.getUserProperties()));
+        var6.put("user_property_map", (new GsonBuilder()).registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create().toJson(var5.getUserProperties()));
+        if (var5.isLoggedIn() && var5.canPlayOnline()) {
+            if (var5 instanceof YggdrasilUserAuthentication) {
+                var6.put("auth_session", String.format("token:%s:%s", var5.getAuthenticatedToken(), UUIDTypeAdapter.fromUUID(var5.getSelectedProfile().getId())));
+            } else {
+                var6.put("auth_session", var5.getAuthenticatedToken());
+            }
+        } else {
+            var6.put("auth_session", "-");
+        }
+
+        if (var5.getSelectedProfile() != null) {
+            var6.put("auth_player_name", var5.getSelectedProfile().getName());
+            var6.put("auth_uuid", UUIDTypeAdapter.fromUUID(var5.getSelectedProfile().getId()));
+            var6.put("user_type", var5.getUserType().getName());
+        } else {
+            var6.put("auth_player_name", "Player");
+            var6.put("auth_uuid", (new UUID(0L, 0L)).toString());
+            var6.put("user_type", UserType.LEGACY.getName());
+        }
+
+        var6.put("profile_name", var2.getName());
+        var6.put("version_name", var1.getId());
+        var6.put("game_directory", var3.getAbsolutePath());
+        var6.put("game_assets", var4.getAbsolutePath());
+        var6.put("assets_root", this.getAssetsDir().getAbsolutePath());
+        var6.put("assets_index_name", this.getVersion().getAssetIndex().getId());
+        var6.put("version_type", this.getVersion().getType().getName());
+        if (var2.getResolution() != null) {
+            var6.put("resolution_width", String.valueOf(var2.getResolution().getWidth()));
+            var6.put("resolution_height", String.valueOf(var2.getResolution().getHeight()));
+        } else {
+            var6.put("resolution_width", "");
+            var6.put("resolution_height", "");
+        }
+
+        var6.put("language", "en-us");
+
+        try {
+            AssetIndex var7 = this.getAssetIndex();
+            Iterator var8 = var7.getFileMap().entrySet().iterator();
+
+            while(var8.hasNext()) {
+                Entry var9 = (Entry)var8.next();
+                String var10 = ((AssetIndex.AssetObject)var9.getValue()).getHash();
+                String var11 = (new File(new File(this.getAssetsDir(), "objects"), var10.substring(0, 2) + "/" + var10)).getAbsolutePath();
+                var6.put("asset=" + (String)var9.getKey(), var11);
+            }
+        } catch (IOException var12) {
+        }
+
+        var6.put("launcher_name", "java-minecraft-launcher");
+        var6.put("launcher_version", LauncherConstants.getVersionName());
+        var6.put("natives_directory", this.nativeDir.getAbsolutePath());
+        var6.put("classpath", this.constructClassPath(this.getVersion()));
+        var6.put("classpath_separator", System.getProperty("path.separator"));
+        var6.put("primary_jar", (new File(this.getLauncher().getWorkingDirectory(), "versions/" + this.getVersion().getJar() + "/" + this.getVersion().getJar() + ".jar")).getAbsolutePath());
+        return new StrSubstitutor(var6);
+    }
+
+    private void migrateOldAssets() {
+        File var1 = this.getAssetsDir();
+        File var2 = new File(var1, "objects");
+        if (var1.isDirectory()) {
+            IOFileFilter var3 = FileFilterUtils.notFileFilter(FileFilterUtils.or(new IOFileFilter[]{FileFilterUtils.nameFileFilter("indexes"), FileFilterUtils.nameFileFilter("objects"), FileFilterUtils.nameFileFilter("virtual"), FileFilterUtils.nameFileFilter("skins")}));
+
+            File var5;
+            for(Iterator var4 = (new TreeSet(FileUtils.listFiles(var1, TrueFileFilter.TRUE, var3))).iterator(); var4.hasNext(); FileUtils.deleteQuietly(var5)) {
+                var5 = (File)var4.next();
+                String var6 = Downloadable.getDigest(var5, "SHA-1", 40);
+                File var7 = new File(var2, var6.substring(0, 2) + "/" + var6);
+                if (!var7.exists()) {
+                    LOGGER.info("Migrated old asset {} into {}", new Object[]{var5, var7});
+
+                    try {
+                        FileUtils.copyFile(var5, var7);
+                    } catch (IOException var9) {
+                        LOGGER.error("Couldn't migrate old asset", var9);
+                    }
+                }
+            }
+
+            File[] var10 = var1.listFiles();
+            if (var10 != null) {
+                File[] var11 = var10;
+                int var12 = var10.length;
+
+                for(int var13 = 0; var13 < var12; ++var13) {
+                    File var8 = var11[var13];
+                    if (!var8.getName().equals("indexes") && !var8.getName().equals("objects") && !var8.getName().equals("virtual") && !var8.getName().equals("skins")) {
+                        LOGGER.info("Cleaning up old assets directory {} after migration", new Object[]{var8});
+                        FileUtils.deleteQuietly(var8);
+                    }
+                }
+            }
+
+        }
+    }
+
+    private void unpackNatives(File var1) throws IOException {
+        OperatingSystem var2 = OperatingSystem.getCurrentPlatform();
+        Collection var3 = this.getVersion().getRelevantLibraries(this.createFeatureMatcher());
+        Iterator var4 = var3.iterator();
+
+        label195:
+        while(true) {
+            Library var5;
+            Map var6;
+            do {
+                do {
+                    if (!var4.hasNext()) {
+                        return;
+                    }
+
+                    var5 = (Library)var4.next();
+                    var6 = var5.getNatives();
+                } while(var6 == null);
+            } while(var6.get(var2) == null);
+
+            File var7 = new File(this.getLauncher().getWorkingDirectory(), "libraries/" + var5.getArtifactPath((String)var6.get(var2)));
+            ZipFile var8 = new ZipFile(var7);
+            ExtractRules var9 = var5.getExtractRules();
+
+            try {
+                Enumeration var10 = var8.entries();
+
+                while(true) {
+                    ZipEntry var11;
+                    File var12;
+                    do {
+                        do {
+                            if (!var10.hasMoreElements()) {
+                                continue label195;
+                            }
+
+                            var11 = (ZipEntry)var10.nextElement();
+                        } while(var9 != null && !var9.shouldExtract(var11.getName()));
+
+                        var12 = new File(var1, var11.getName());
+                        if (var12.getParentFile() != null) {
+                            var12.getParentFile().mkdirs();
+                        }
+                    } while(var11.isDirectory());
+
+                    BufferedInputStream var13 = new BufferedInputStream(var8.getInputStream(var11));
+                    byte[] var15 = new byte[2048];
+                    FileOutputStream var16 = new FileOutputStream(var12);
+                    BufferedOutputStream var17 = new BufferedOutputStream(var16);
+
+                    int var14;
+                    try {
+                        while((var14 = var13.read(var15, 0, var15.length)) != -1) {
+                            var17.write(var15, 0, var14);
+                        }
+                    } finally {
+                        Downloadable.closeSilently(var17);
+                        Downloadable.closeSilently(var16);
+                        Downloadable.closeSilently(var13);
+                    }
+                }
+            } finally {
+                var8.close();
+            }
+        }
+    }
+
+    private CompatibilityRule.FeatureMatcher createFeatureMatcher() {
+        return new CurrentLaunchFeatureMatcher(this.selectedProfile, this.getVersion(), this.minecraftLauncher.getProfileManager().getAuthDatabase().getByUUID(this.minecraftLauncher.getProfileManager().getSelectedUser()));
+    }
+
+    private String constructClassPath(CompleteMinecraftVersion var1) {
+        StringBuilder var2 = new StringBuilder();
+        Collection var3 = var1.getClassPath(OperatingSystem.getCurrentPlatform(), this.getLauncher().getWorkingDirectory(), this.createFeatureMatcher());
+        String var4 = System.getProperty("path.separator");
+
+        File var6;
+        for(Iterator var5 = var3.iterator(); var5.hasNext(); var2.append(var6.getAbsolutePath())) {
+            var6 = (File)var5.next();
+            if (!var6.isFile()) {
+                throw new RuntimeException("Classpath file not found: " + var6);
+            }
+
+            if (var2.length() > 0) {
+                var2.append(var4);
+            }
+        }
+
+        return var2.toString();
+    }
+
+    public void onGameProcessEnded(GameProcess var1) {
+        int var2 = var1.getExitCode();
+        if (var2 == 0) {
+            LOGGER.info("Game ended with no troubles detected (exit code " + var2 + ")");
+            if (this.visibilityRule == LauncherVisibilityRule.CLOSE_LAUNCHER) {
+                LOGGER.info("Following visibility rule and exiting launcher as the game has ended");
+                this.getLauncher().shutdownLauncher();
+            } else if (this.visibilityRule == LauncherVisibilityRule.HIDE_LAUNCHER) {
+                LOGGER.info("Following visibility rule and showing launcher as the game has ended");
+                this.minecraftLauncher.getUserInterface().setVisible(true);
+            }
+        } else {
+            LOGGER.error("Game ended with bad state (exit code " + var2 + ")");
+            LOGGER.info("Ignoring visibility rule and showing launcher due to a game crash");
+            this.minecraftLauncher.getUserInterface().setVisible(true);
+            String var3 = null;
+            Collection var4 = var1.getSysOutLines();
+            String[] var5 = (String[])var4.toArray(new String[var4.size()]);
+
+            for(int var6 = var5.length - 1; var6 >= 0; --var6) {
+                String var7 = var5[var6];
+                int var8 = var7.lastIndexOf("#@!@#");
+                if (var8 >= 0 && var8 < var7.length() - "#@!@#".length() - 1) {
+                    var3 = var7.substring(var8 + "#@!@#".length()).trim();
+                    break;
+                }
+            }
+
+            if (var3 != null) {
+                File var16 = new File(var3);
+                if (var16.isFile()) {
+                    LOGGER.info("Crash report detected, opening: " + var3);
+                    FileInputStream var17 = null;
+
+                    try {
+                        var17 = new FileInputStream(var16);
+                        BufferedReader var18 = new BufferedReader(new InputStreamReader(var17));
+
+                        StringBuilder var9;
+                        String var10;
+                        for(var9 = new StringBuilder(); (var10 = var18.readLine()) != null; var9.append(var10)) {
+                            if (var9.length() > 0) {
+                                var9.append("\n");
+                            }
+                        }
+
+                        var18.close();
+                        this.minecraftLauncher.getUserInterface().showCrashReport(this.getVersion(), var16, var9.toString());
+                    } catch (IOException var14) {
+                        LOGGER.error("Couldn't open crash report", var14);
+                    } finally {
+                        Downloadable.closeSilently(var17);
+                    }
+                } else {
+                    LOGGER.error("Crash report detected, but unknown format: " + var3);
+                }
+            }
+        }
+
+        this.setStatus(GameInstanceStatus.IDLE);
+    }
+
+    public void setVisibility(LauncherVisibilityRule var1) {
+        this.visibilityRule = var1;
+    }
+
+    public UserAuthentication getAuth() {
+        return this.auth;
+    }
+
+    public Profile getSelectedProfile() {
+        return this.selectedProfile;
+    }
+}
diff --git a/net/minecraft/launcher/game/MinecraftReleaseType.java b/net/minecraft/launcher/game/MinecraftReleaseType.java
new file mode 100644
index 0000000..01b10da
--- /dev/null
+++ b/net/minecraft/launcher/game/MinecraftReleaseType.java
@@ -0,0 +1,58 @@
+package net.minecraft.launcher.game;
+
+import com.google.common.collect.Maps;
+import com.mojang.launcher.versions.ReleaseType;
+import java.util.Map;
+
+public enum MinecraftReleaseType implements ReleaseType {
+    SNAPSHOT("snapshot", "Enable experimental development versions (\"snapshots\")"),
+    RELEASE("release", (String)null),
+    OLD_BETA("old_beta", "Allow use of old \"Beta\" Minecraft versions (From 2010-2011)"),
+    OLD_ALPHA("old_alpha", "Allow use of old \"Alpha\" Minecraft versions (From 2010)");
+
+    private static final String POPUP_DEV_VERSIONS = "Are you sure you want to enable development builds?\nThey are not guaranteed to be stable and may corrupt your world.\nYou are advised to run this in a separate directory or run regular backups.";
+    private static final String POPUP_OLD_VERSIONS = "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!";
+    private static final Map<String, MinecraftReleaseType> LOOKUP = Maps.newHashMap();
+    private final String name;
+    private final String description;
+
+    private MinecraftReleaseType(String var3, String var4) {
+        this.name = var3;
+        this.description = var4;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getDescription() {
+        return this.description;
+    }
+
+    public String getPopupWarning() {
+        if (this.description == null) {
+            return null;
+        } else if (this == SNAPSHOT) {
+            return "Are you sure you want to enable development builds?\nThey are not guaranteed to be stable and may corrupt your world.\nYou are advised to run this in a separate directory or run regular backups.";
+        } else if (this == OLD_BETA) {
+            return "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!";
+        } else {
+            return this == OLD_ALPHA ? "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!" : null;
+        }
+    }
+
+    public static MinecraftReleaseType getByName(String var0) {
+        return (MinecraftReleaseType)LOOKUP.get(var0);
+    }
+
+    static {
+        MinecraftReleaseType[] var0 = values();
+        int var1 = var0.length;
+
+        for(int var2 = 0; var2 < var1; ++var2) {
+            MinecraftReleaseType var3 = var0[var2];
+            LOOKUP.put(var3.getName(), var3);
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java b/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
new file mode 100644
index 0000000..a4cdd9d
--- /dev/null
+++ b/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
@@ -0,0 +1,32 @@
+package net.minecraft.launcher.game;
+
+import com.google.common.collect.Iterators;
+import com.mojang.launcher.versions.ReleaseTypeFactory;
+import java.util.Iterator;
+
+public class MinecraftReleaseTypeFactory implements ReleaseTypeFactory<MinecraftReleaseType> {
+    private static final MinecraftReleaseTypeFactory FACTORY = new MinecraftReleaseTypeFactory();
+
+    private MinecraftReleaseTypeFactory() {
+    }
+
+    public MinecraftReleaseType getTypeByName(String var1) {
+        return MinecraftReleaseType.getByName(var1);
+    }
+
+    public MinecraftReleaseType[] getAllTypes() {
+        return MinecraftReleaseType.values();
+    }
+
+    public Class<MinecraftReleaseType> getTypeClass() {
+        return MinecraftReleaseType.class;
+    }
+
+    public Iterator<MinecraftReleaseType> iterator() {
+        return Iterators.forArray(MinecraftReleaseType.values());
+    }
+
+    public static MinecraftReleaseTypeFactory instance() {
+        return FACTORY;
+    }
+}
diff --git a/net/minecraft/launcher/profile/AuthenticationDatabase.java b/net/minecraft/launcher/profile/AuthenticationDatabase.java
new file mode 100644
index 0000000..50dcae8
--- /dev/null
+++ b/net/minecraft/launcher/profile/AuthenticationDatabase.java
@@ -0,0 +1,188 @@
+package net.minecraft.launcher.profile;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.mojang.authlib.AuthenticationService;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.Map.Entry;
+import net.minecraft.launcher.Launcher;
+
+public class AuthenticationDatabase {
+    public static final String DEMO_UUID_PREFIX = "demo-";
+    private final Map<String, UserAuthentication> authById;
+    private final AuthenticationService authenticationService;
+
+    public AuthenticationDatabase(AuthenticationService var1) {
+        this(new HashMap(), var1);
+    }
+
+    public AuthenticationDatabase(Map<String, UserAuthentication> var1, AuthenticationService var2) {
+        this.authById = var1;
+        this.authenticationService = var2;
+    }
+
+    public UserAuthentication getByName(String var1) {
+        if (var1 == null) {
+            return null;
+        } else {
+            Iterator var2 = this.authById.entrySet().iterator();
+
+            Entry var3;
+            GameProfile var4;
+            do {
+                if (!var2.hasNext()) {
+                    return null;
+                }
+
+                var3 = (Entry)var2.next();
+                var4 = ((UserAuthentication)var3.getValue()).getSelectedProfile();
+                if (var4 != null && var4.getName().equals(var1)) {
+                    return (UserAuthentication)var3.getValue();
+                }
+            } while(var4 != null || !getUserFromDemoUUID((String)var3.getKey()).equals(var1));
+
+            return (UserAuthentication)var3.getValue();
+        }
+    }
+
+    public UserAuthentication getByUUID(String var1) {
+        return (UserAuthentication)this.authById.get(var1);
+    }
+
+    public Collection<String> getKnownNames() {
+        ArrayList var1 = new ArrayList();
+        Iterator var2 = this.authById.entrySet().iterator();
+
+        while(var2.hasNext()) {
+            Entry var3 = (Entry)var2.next();
+            GameProfile var4 = ((UserAuthentication)var3.getValue()).getSelectedProfile();
+            if (var4 != null) {
+                var1.add(var4.getName());
+            } else {
+                var1.add(getUserFromDemoUUID((String)var3.getKey()));
+            }
+        }
+
+        return var1;
+    }
+
+    public void register(String var1, UserAuthentication var2) {
+        this.authById.put(var1, var2);
+    }
+
+    public Set<String> getknownUUIDs() {
+        return this.authById.keySet();
+    }
+
+    public void removeUUID(String var1) {
+        this.authById.remove(var1);
+    }
+
+    public AuthenticationService getAuthenticationService() {
+        return this.authenticationService;
+    }
+
+    public static String getUserFromDemoUUID(String var0) {
+        return var0.startsWith("demo-") && var0.length() > "demo-".length() ? "Demo User " + var0.substring("demo-".length()) : "Demo User";
+    }
+
+    public static class Serializer implements JsonDeserializer<AuthenticationDatabase>, JsonSerializer<AuthenticationDatabase> {
+        private final Launcher launcher;
+
+        public Serializer(Launcher var1) {
+            this.launcher = var1;
+        }
+
+        public AuthenticationDatabase deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            HashMap var4 = new HashMap();
+            Map var5 = this.deserializeCredentials((JsonObject)var1, var3);
+            YggdrasilAuthenticationService var6 = new YggdrasilAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString());
+            Iterator var7 = var5.entrySet().iterator();
+
+            while(var7.hasNext()) {
+                Entry var8 = (Entry)var7.next();
+                UserAuthentication var9 = var6.createUserAuthentication(this.launcher.getLauncher().getAgent());
+                var9.loadFromStorage((Map)var8.getValue());
+                var4.put(var8.getKey(), var9);
+            }
+
+            return new AuthenticationDatabase(var4, var6);
+        }
+
+        protected Map<String, Map<String, Object>> deserializeCredentials(JsonObject var1, JsonDeserializationContext var2) {
+            LinkedHashMap var3 = new LinkedHashMap();
+            Iterator var4 = var1.entrySet().iterator();
+
+            while(var4.hasNext()) {
+                Entry var5 = (Entry)var4.next();
+                LinkedHashMap var6 = new LinkedHashMap();
+                Iterator var7 = ((JsonObject)var5.getValue()).entrySet().iterator();
+
+                while(var7.hasNext()) {
+                    Entry var8 = (Entry)var7.next();
+                    var6.put(var8.getKey(), this.deserializeCredential((JsonElement)var8.getValue()));
+                }
+
+                var3.put(var5.getKey(), var6);
+            }
+
+            return var3;
+        }
+
+        private Object deserializeCredential(JsonElement var1) {
+            Iterator var3;
+            if (var1 instanceof JsonObject) {
+                LinkedHashMap var5 = new LinkedHashMap();
+                var3 = ((JsonObject)var1).entrySet().iterator();
+
+                while(var3.hasNext()) {
+                    Entry var6 = (Entry)var3.next();
+                    var5.put(var6.getKey(), this.deserializeCredential((JsonElement)var6.getValue()));
+                }
+
+                return var5;
+            } else if (!(var1 instanceof JsonArray)) {
+                return var1.getAsString();
+            } else {
+                ArrayList var2 = new ArrayList();
+                var3 = ((JsonArray)var1).iterator();
+
+                while(var3.hasNext()) {
+                    JsonElement var4 = (JsonElement)var3.next();
+                    var2.add(this.deserializeCredential(var4));
+                }
+
+                return var2;
+            }
+        }
+
+        public JsonElement serialize(AuthenticationDatabase var1, Type var2, JsonSerializationContext var3) {
+            Map var4 = var1.authById;
+            HashMap var5 = new HashMap();
+            Iterator var6 = var4.entrySet().iterator();
+
+            while(var6.hasNext()) {
+                Entry var7 = (Entry)var6.next();
+                var5.put(var7.getKey(), ((UserAuthentication)var7.getValue()).saveForStorage());
+            }
+
+            return var3.serialize(var5);
+        }
+    }
+}
diff --git a/net/minecraft/launcher/profile/LauncherVisibilityRule.java b/net/minecraft/launcher/profile/LauncherVisibilityRule.java
new file mode 100644
index 0000000..8d2f5e7
--- /dev/null
+++ b/net/minecraft/launcher/profile/LauncherVisibilityRule.java
@@ -0,0 +1,21 @@
+package net.minecraft.launcher.profile;
+
+public enum LauncherVisibilityRule {
+    HIDE_LAUNCHER("Hide launcher and re-open when game closes"),
+    CLOSE_LAUNCHER("Close launcher when game starts"),
+    DO_NOTHING("Keep the launcher open");
+
+    private final String name;
+
+    private LauncherVisibilityRule(String var3) {
+        this.name = var3;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String toString() {
+        return this.name;
+    }
+}
diff --git a/net/minecraft/launcher/profile/Profile.java b/net/minecraft/launcher/profile/Profile.java
new file mode 100644
index 0000000..6bf1d94
--- /dev/null
+++ b/net/minecraft/launcher/profile/Profile.java
@@ -0,0 +1,177 @@
+package net.minecraft.launcher.profile;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Sets;
+import com.mojang.launcher.updater.VersionFilter;
+import com.mojang.launcher.versions.ReleaseType;
+import java.io.File;
+import java.util.Set;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
+
+public class Profile implements Comparable<Profile> {
+    public static final String DEFAULT_JRE_ARGUMENTS_64BIT = "-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
+    public static final String DEFAULT_JRE_ARGUMENTS_32BIT = "-Xmx512M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
+    public static final Profile.Resolution DEFAULT_RESOLUTION = new Profile.Resolution(854, 480);
+    public static final LauncherVisibilityRule DEFAULT_LAUNCHER_VISIBILITY;
+    public static final Set<MinecraftReleaseType> DEFAULT_RELEASE_TYPES;
+    private String name;
+    private File gameDir;
+    private String lastVersionId;
+    private String javaDir;
+    private String javaArgs;
+    private Profile.Resolution resolution;
+    private Set<MinecraftReleaseType> allowedReleaseTypes;
+    private String playerUUID;
+    private Boolean useHopperCrashService;
+    private LauncherVisibilityRule launcherVisibilityOnGameClose;
+
+    public Profile() {
+    }
+
+    public Profile(Profile var1) {
+        this.name = var1.name;
+        this.gameDir = var1.gameDir;
+        this.playerUUID = var1.playerUUID;
+        this.lastVersionId = var1.lastVersionId;
+        this.javaDir = var1.javaDir;
+        this.javaArgs = var1.javaArgs;
+        this.resolution = var1.resolution == null ? null : new Profile.Resolution(var1.resolution);
+        this.allowedReleaseTypes = var1.allowedReleaseTypes == null ? null : Sets.newHashSet(var1.allowedReleaseTypes);
+        this.useHopperCrashService = var1.useHopperCrashService;
+        this.launcherVisibilityOnGameClose = var1.launcherVisibilityOnGameClose;
+    }
+
+    public Profile(String var1) {
+        this.name = var1;
+    }
+
+    public String getName() {
+        return (String)Objects.firstNonNull(this.name, "");
+    }
+
+    public void setName(String var1) {
+        this.name = var1;
+    }
+
+    public File getGameDir() {
+        return this.gameDir;
+    }
+
+    public void setGameDir(File var1) {
+        this.gameDir = var1;
+    }
+
+    public void setLastVersionId(String var1) {
+        this.lastVersionId = var1;
+    }
+
+    public void setJavaDir(String var1) {
+        this.javaDir = var1;
+    }
+
+    public void setJavaArgs(String var1) {
+        this.javaArgs = var1;
+    }
+
+    public String getLastVersionId() {
+        return this.lastVersionId;
+    }
+
+    public String getJavaArgs() {
+        return this.javaArgs;
+    }
+
+    public String getJavaPath() {
+        return this.javaDir;
+    }
+
+    public Profile.Resolution getResolution() {
+        return this.resolution;
+    }
+
+    public void setResolution(Profile.Resolution var1) {
+        this.resolution = var1;
+    }
+
+    /** @deprecated */
+    @Deprecated
+    public String getPlayerUUID() {
+        return this.playerUUID;
+    }
+
+    /** @deprecated */
+    @Deprecated
+    public void setPlayerUUID(String var1) {
+        this.playerUUID = var1;
+    }
+
+    public Set<MinecraftReleaseType> getAllowedReleaseTypes() {
+        return this.allowedReleaseTypes;
+    }
+
+    public void setAllowedReleaseTypes(Set<MinecraftReleaseType> var1) {
+        this.allowedReleaseTypes = var1;
+    }
+
+    public boolean getUseHopperCrashService() {
+        return this.useHopperCrashService == null;
+    }
+
+    public void setUseHopperCrashService(boolean var1) {
+        this.useHopperCrashService = var1 ? null : false;
+    }
+
+    public VersionFilter<MinecraftReleaseType> getVersionFilter() {
+        VersionFilter var1 = (new VersionFilter(MinecraftReleaseTypeFactory.instance())).setMaxCount(Integer.MAX_VALUE);
+        if (this.allowedReleaseTypes == null) {
+            var1.onlyForTypes((ReleaseType[])DEFAULT_RELEASE_TYPES.toArray(new MinecraftReleaseType[DEFAULT_RELEASE_TYPES.size()]));
+        } else {
+            var1.onlyForTypes((ReleaseType[])this.allowedReleaseTypes.toArray(new MinecraftReleaseType[this.allowedReleaseTypes.size()]));
+        }
+
+        return var1;
+    }
+
+    public LauncherVisibilityRule getLauncherVisibilityOnGameClose() {
+        return this.launcherVisibilityOnGameClose;
+    }
+
+    public void setLauncherVisibilityOnGameClose(LauncherVisibilityRule var1) {
+        this.launcherVisibilityOnGameClose = var1;
+    }
+
+    public int compareTo(Profile var1) {
+        return var1 == null ? -1 : this.getName().compareTo(var1.getName());
+    }
+
+    static {
+        DEFAULT_LAUNCHER_VISIBILITY = LauncherVisibilityRule.CLOSE_LAUNCHER;
+        DEFAULT_RELEASE_TYPES = Sets.newHashSet(new MinecraftReleaseType[]{MinecraftReleaseType.RELEASE});
+    }
+
+    public static class Resolution {
+        private int width;
+        private int height;
+
+        public Resolution() {
+        }
+
+        public Resolution(Profile.Resolution var1) {
+            this(var1.getWidth(), var1.getHeight());
+        }
+
+        public Resolution(int var1, int var2) {
+            this.width = var1;
+            this.height = var2;
+        }
+
+        public int getWidth() {
+            return this.width;
+        }
+
+        public int getHeight() {
+            return this.height;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/profile/ProfileManager.java b/net/minecraft/launcher/profile/ProfileManager.java
new file mode 100644
index 0000000..d6a2f98
--- /dev/null
+++ b/net/minecraft/launcher/profile/ProfileManager.java
@@ -0,0 +1,274 @@
+package net.minecraft.launcher.profile;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.google.gson.reflect.TypeToken;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.FileTypeAdapter;
+import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import org.apache.commons.io.FileUtils;
+
+public class ProfileManager {
+    public static final String DEFAULT_PROFILE_NAME = "(Default)";
+    private final Launcher launcher;
+    private final JsonParser parser = new JsonParser();
+    private final Gson gson;
+    private final Map<String, Profile> profiles = new HashMap();
+    private final File profileFile;
+    private final List<RefreshedProfilesListener> refreshedProfilesListeners = Collections.synchronizedList(new ArrayList());
+    private final List<UserChangedListener> userChangedListeners = Collections.synchronizedList(new ArrayList());
+    private String selectedProfile;
+    private String selectedUser;
+    private AuthenticationDatabase authDatabase;
+
+    public ProfileManager(Launcher var1) {
+        this.launcher = var1;
+        this.profileFile = new File(var1.getLauncher().getWorkingDirectory(), "launcher_profiles.json");
+        GsonBuilder var2 = new GsonBuilder();
+        var2.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
+        var2.registerTypeAdapter(Date.class, new DateTypeAdapter());
+        var2.registerTypeAdapter(File.class, new FileTypeAdapter());
+        var2.registerTypeAdapter(AuthenticationDatabase.class, new AuthenticationDatabase.Serializer(var1));
+        var2.registerTypeAdapter(ProfileManager.RawProfileList.class, new ProfileManager.RawProfileList.Serializer(var1));
+        var2.setPrettyPrinting();
+        this.gson = var2.create();
+        this.authDatabase = new AuthenticationDatabase(new YggdrasilAuthenticationService(var1.getLauncher().getProxy(), var1.getClientToken().toString()));
+    }
+
+    public void saveProfiles() throws IOException {
+        ProfileManager.RawProfileList var1 = new ProfileManager.RawProfileList(this.profiles, this.getSelectedProfile().getName(), this.selectedUser, this.launcher.getClientToken(), this.authDatabase);
+        FileUtils.writeStringToFile(this.profileFile, this.gson.toJson(var1));
+    }
+
+    public boolean loadProfiles() throws IOException {
+        this.profiles.clear();
+        this.selectedProfile = null;
+        this.selectedUser = null;
+        if (this.profileFile.isFile()) {
+            JsonObject var1 = this.parser.parse(FileUtils.readFileToString(this.profileFile)).getAsJsonObject();
+            if (var1.has("launcherVersion")) {
+                JsonObject var2 = var1.getAsJsonObject("launcherVersion");
+                if (var2.has("profilesFormat") && var2.getAsJsonPrimitive("profilesFormat").getAsInt() != 1) {
+                    if (this.launcher.getUserInterface().shouldDowngradeProfiles()) {
+                        File var3 = new File(this.profileFile.getParentFile(), "launcher_profiles.old.json");
+                        if (var3.exists()) {
+                            var3.delete();
+                        }
+
+                        this.profileFile.renameTo(var3);
+                        this.fireRefreshEvent();
+                        this.fireUserChangedEvent();
+                        return false;
+                    }
+
+                    this.launcher.getLauncher().shutdownLauncher();
+                    System.exit(0);
+                    return false;
+                }
+            }
+
+            if (var1.has("clientToken")) {
+                this.launcher.setClientToken((UUID)this.gson.fromJson(var1.get("clientToken"), UUID.class));
+            }
+
+            ProfileManager.RawProfileList var4 = (ProfileManager.RawProfileList)this.gson.fromJson(var1, ProfileManager.RawProfileList.class);
+            this.profiles.putAll(var4.profiles);
+            this.selectedProfile = var4.selectedProfile;
+            this.selectedUser = var4.selectedUser;
+            this.authDatabase = var4.authenticationDatabase;
+            this.fireRefreshEvent();
+            this.fireUserChangedEvent();
+            return true;
+        } else {
+            this.fireRefreshEvent();
+            this.fireUserChangedEvent();
+            return false;
+        }
+    }
+
+    public void fireRefreshEvent() {
+        Iterator var1 = Lists.newArrayList(this.refreshedProfilesListeners).iterator();
+
+        while(var1.hasNext()) {
+            RefreshedProfilesListener var2 = (RefreshedProfilesListener)var1.next();
+            var2.onProfilesRefreshed(this);
+        }
+
+    }
+
+    public void fireUserChangedEvent() {
+        Iterator var1 = Lists.newArrayList(this.userChangedListeners).iterator();
+
+        while(var1.hasNext()) {
+            UserChangedListener var2 = (UserChangedListener)var1.next();
+            var2.onUserChanged(this);
+        }
+
+    }
+
+    public Profile getSelectedProfile() {
+        if (this.selectedProfile == null || !this.profiles.containsKey(this.selectedProfile)) {
+            if (this.profiles.get("(Default)") != null) {
+                this.selectedProfile = "(Default)";
+            } else if (this.profiles.size() > 0) {
+                this.selectedProfile = ((Profile)this.profiles.values().iterator().next()).getName();
+            } else {
+                this.selectedProfile = "(Default)";
+                this.profiles.put("(Default)", new Profile(this.selectedProfile));
+            }
+        }
+
+        return (Profile)this.profiles.get(this.selectedProfile);
+    }
+
+    public Map<String, Profile> getProfiles() {
+        return this.profiles;
+    }
+
+    public void addRefreshedProfilesListener(RefreshedProfilesListener var1) {
+        this.refreshedProfilesListeners.add(var1);
+    }
+
+    public void addUserChangedListener(UserChangedListener var1) {
+        this.userChangedListeners.add(var1);
+    }
+
+    public void setSelectedProfile(String var1) {
+        boolean var2 = !this.selectedProfile.equals(var1);
+        this.selectedProfile = var1;
+        if (var2) {
+            this.fireRefreshEvent();
+        }
+
+    }
+
+    public String getSelectedUser() {
+        return this.selectedUser;
+    }
+
+    public void setSelectedUser(String var1) {
+        boolean var2 = !Objects.equal(this.selectedUser, var1);
+        if (var2) {
+            this.selectedUser = var1;
+            this.fireUserChangedEvent();
+        }
+
+    }
+
+    public AuthenticationDatabase getAuthDatabase() {
+        return this.authDatabase;
+    }
+
+    private static class RawProfileList {
+        public Map<String, Profile> profiles;
+        public String selectedProfile;
+        public String selectedUser;
+        public UUID clientToken;
+        public AuthenticationDatabase authenticationDatabase;
+
+        private RawProfileList(Map<String, Profile> var1, String var2, String var3, UUID var4, AuthenticationDatabase var5) {
+            this.profiles = new HashMap();
+            this.clientToken = UUID.randomUUID();
+            this.profiles = var1;
+            this.selectedProfile = var2;
+            this.selectedUser = var3;
+            this.clientToken = var4;
+            this.authenticationDatabase = var5;
+        }
+
+        // $FF: synthetic method
+        RawProfileList(Map var1, String var2, String var3, UUID var4, AuthenticationDatabase var5, Object var6) {
+            this(var1, var2, var3, var4, var5);
+        }
+
+        public static class Serializer implements JsonDeserializer<ProfileManager.RawProfileList>, JsonSerializer<ProfileManager.RawProfileList> {
+            private final Launcher launcher;
+
+            public Serializer(Launcher var1) {
+                this.launcher = var1;
+            }
+
+            public ProfileManager.RawProfileList deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+                JsonObject var4 = (JsonObject)var1;
+                Object var5 = Maps.newHashMap();
+                if (var4.has("profiles")) {
+                    var5 = (Map)var3.deserialize(var4.get("profiles"), (new TypeToken<Map<String, Profile>>() {
+                    }).getType());
+                }
+
+                String var6 = null;
+                if (var4.has("selectedProfile")) {
+                    var6 = var4.getAsJsonPrimitive("selectedProfile").getAsString();
+                }
+
+                UUID var7 = UUID.randomUUID();
+                if (var4.has("clientToken")) {
+                    var7 = (UUID)var3.deserialize(var4.get("clientToken"), UUID.class);
+                }
+
+                AuthenticationDatabase var8 = new AuthenticationDatabase(new YggdrasilAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString()));
+                if (var4.has("authenticationDatabase")) {
+                    var8 = (AuthenticationDatabase)var3.deserialize(var4.get("authenticationDatabase"), AuthenticationDatabase.class);
+                }
+
+                String var9 = null;
+                if (var4.has("selectedUser")) {
+                    var9 = var4.getAsJsonPrimitive("selectedUser").getAsString();
+                } else if (var6 != null && ((Map)var5).containsKey(var6) && ((Profile)((Map)var5).get(var6)).getPlayerUUID() != null) {
+                    var9 = ((Profile)((Map)var5).get(var6)).getPlayerUUID();
+                } else if (!var8.getknownUUIDs().isEmpty()) {
+                    var9 = (String)var8.getknownUUIDs().iterator().next();
+                }
+
+                Iterator var10 = ((Map)var5).values().iterator();
+
+                while(var10.hasNext()) {
+                    Profile var11 = (Profile)var10.next();
+                    var11.setPlayerUUID((String)null);
+                }
+
+                return new ProfileManager.RawProfileList((Map)var5, var6, var9, var7, var8);
+            }
+
+            public JsonElement serialize(ProfileManager.RawProfileList var1, Type var2, JsonSerializationContext var3) {
+                JsonObject var4 = new JsonObject();
+                var4.addProperty("name", LauncherConstants.getVersionName());
+                var4.addProperty("format", 21);
+                var4.addProperty("profilesFormat", 1);
+                JsonObject var5 = new JsonObject();
+                var5.add("profiles", var3.serialize(var1.profiles));
+                var5.add("selectedProfile", var3.serialize(var1.selectedProfile));
+                var5.add("clientToken", var3.serialize(var1.clientToken));
+                var5.add("authenticationDatabase", var3.serialize(var1.authenticationDatabase));
+                var5.add("selectedUser", var3.serialize(var1.selectedUser));
+                var5.add("launcherVersion", var4);
+                return var5;
+            }
+        }
+    }
+}
diff --git a/net/minecraft/launcher/profile/RefreshedProfilesListener.java b/net/minecraft/launcher/profile/RefreshedProfilesListener.java
new file mode 100644
index 0000000..ff2bba0
--- /dev/null
+++ b/net/minecraft/launcher/profile/RefreshedProfilesListener.java
@@ -0,0 +1,5 @@
+package net.minecraft.launcher.profile;
+
+public interface RefreshedProfilesListener {
+    void onProfilesRefreshed(ProfileManager var1);
+}
diff --git a/net/minecraft/launcher/profile/UserChangedListener.java b/net/minecraft/launcher/profile/UserChangedListener.java
new file mode 100644
index 0000000..995a269
--- /dev/null
+++ b/net/minecraft/launcher/profile/UserChangedListener.java
@@ -0,0 +1,5 @@
+package net.minecraft.launcher.profile;
+
+public interface UserChangedListener {
+    void onUserChanged(ProfileManager var1);
+}
diff --git a/net/minecraft/launcher/ui/BottomBarPanel.java b/net/minecraft/launcher/ui/BottomBarPanel.java
new file mode 100644
index 0000000..2ef42cb
--- /dev/null
+++ b/net/minecraft/launcher/ui/BottomBarPanel.java
@@ -0,0 +1,61 @@
+package net.minecraft.launcher.ui;
+
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.GridLayout;
+import javax.swing.JPanel;
+import javax.swing.border.EmptyBorder;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.ui.bottombar.PlayButtonPanel;
+import net.minecraft.launcher.ui.bottombar.PlayerInfoPanel;
+import net.minecraft.launcher.ui.bottombar.ProfileSelectionPanel;
+
+public class BottomBarPanel extends JPanel {
+    private final Launcher minecraftLauncher;
+    private final ProfileSelectionPanel profileSelectionPanel;
+    private final PlayerInfoPanel playerInfoPanel;
+    private final PlayButtonPanel playButtonPanel;
+
+    public BottomBarPanel(Launcher var1) {
+        this.minecraftLauncher = var1;
+        byte var2 = 4;
+        this.setBorder(new EmptyBorder(var2, var2, var2, var2));
+        this.profileSelectionPanel = new ProfileSelectionPanel(var1);
+        this.playerInfoPanel = new PlayerInfoPanel(var1);
+        this.playButtonPanel = new PlayButtonPanel(var1);
+        this.createInterface();
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridLayout(1, 3));
+        this.add(this.wrapSidePanel(this.profileSelectionPanel, 17));
+        this.add(this.playButtonPanel);
+        this.add(this.wrapSidePanel(this.playerInfoPanel, 13));
+    }
+
+    protected JPanel wrapSidePanel(JPanel var1, int var2) {
+        JPanel var3 = new JPanel(new GridBagLayout());
+        GridBagConstraints var4 = new GridBagConstraints();
+        var4.anchor = var2;
+        var4.weightx = 1.0D;
+        var4.weighty = 1.0D;
+        var3.add(var1, var4);
+        return var3;
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public ProfileSelectionPanel getProfileSelectionPanel() {
+        return this.profileSelectionPanel;
+    }
+
+    public PlayerInfoPanel getPlayerInfoPanel() {
+        return this.playerInfoPanel;
+    }
+
+    public PlayButtonPanel getPlayButtonPanel() {
+        return this.playButtonPanel;
+    }
+}
diff --git a/net/minecraft/launcher/ui/LauncherPanel.java b/net/minecraft/launcher/ui/LauncherPanel.java
new file mode 100644
index 0000000..3553a21
--- /dev/null
+++ b/net/minecraft/launcher/ui/LauncherPanel.java
@@ -0,0 +1,149 @@
+package net.minecraft.launcher.ui;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.BorderLayout;
+import java.awt.CardLayout;
+import java.awt.Color;
+import java.awt.GridBagLayout;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.net.URI;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JProgressBar;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.ui.tabs.LauncherTabPanel;
+import org.apache.commons.lang3.SystemUtils;
+
+public class LauncherPanel extends JPanel {
+    public static final String CARD_DIRT_BACKGROUND = "loading";
+    public static final String CARD_LOGIN = "login";
+    public static final String CARD_LAUNCHER = "launcher";
+    private final CardLayout cardLayout;
+    private final LauncherTabPanel tabPanel;
+    private final BottomBarPanel bottomBar;
+    private final JProgressBar progressBar;
+    private final Launcher minecraftLauncher;
+    private final JPanel loginPanel;
+    private JLabel warningLabel;
+
+    public LauncherPanel(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.cardLayout = new CardLayout();
+        this.setLayout(this.cardLayout);
+        this.progressBar = new JProgressBar();
+        this.bottomBar = new BottomBarPanel(var1);
+        this.tabPanel = new LauncherTabPanel(var1);
+        this.loginPanel = new TexturedPanel("/dirt.png");
+        this.createInterface();
+    }
+
+    protected void createInterface() {
+        this.add(this.createLauncherInterface(), "launcher");
+        this.add(this.createDirtInterface(), "loading");
+        this.add(this.createLoginInterface(), "login");
+    }
+
+    protected JPanel createLauncherInterface() {
+        JPanel var1 = new JPanel(new BorderLayout());
+        this.tabPanel.getBlog().setPage("http://mcupdate.tumblr.com");
+        boolean var2 = this.getMinecraftLauncher().getBootstrapVersion() < 100;
+        boolean var3 = OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS;
+        if (OperatingSystem.getCurrentPlatform() == OperatingSystem.OSX) {
+            String var4 = SystemUtils.OS_VERSION;
+            if (var4 != null && !var4.isEmpty()) {
+                String[] var5 = var4.split("\\.", 3);
+                if (var5.length >= 2) {
+                    try {
+                        int var6 = Integer.parseInt(var5[0]);
+                        int var7 = Integer.parseInt(var5[1]);
+                        if (var6 == 10) {
+                            var3 = var7 >= 8;
+                        } else if (var6 > 10) {
+                            var3 = true;
+                        }
+                    } catch (NumberFormatException var8) {
+                    }
+                }
+            }
+        }
+
+        if (var2 && var3) {
+            this.warningLabel = new JLabel();
+            this.warningLabel.setForeground(Color.RED);
+            this.warningLabel.setHorizontalAlignment(0);
+            final URI var9;
+            if (OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS) {
+                var9 = LauncherConstants.URL_UPGRADE_WINDOWS;
+            } else {
+                var9 = LauncherConstants.URL_UPGRADE_OSX;
+            }
+
+            if (SystemUtils.IS_JAVA_1_8) {
+                if (OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS) {
+                    this.warningLabel.setText("<html><p style='font-size: 1.1em'>You are running an old version of the launcher. Please consider <a href='" + var9 + "'>using the new launcher</a> which will improve the performance of both launcher and game.</p></html>");
+                } else {
+                    this.warningLabel.setText("<html><p style='font-size: 1em'>You are running an old version of the launcher. Please consider <a href='" + var9 + "'>using the new launcher</a> which will improve the performance of both launcher and game.</p></html>");
+                }
+            } else if (OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS) {
+                this.warningLabel.setText("<html><p style='font-size: 1.1em'>You are running on an old version of Java. Please consider <a href='" + var9 + "'>using the new launcher</a> which doesn't require Java, as it will make your game faster.</p></html>");
+            } else {
+                this.warningLabel.setText("<html><p style='font-size: 1em'>You are running on an old version of Java. Please consider <a href='" + var9 + "'>using the new launcher</a> which doesn't require Java, as it will make your game faster.</p></html>");
+            }
+
+            var1.add(this.warningLabel, "North");
+            var1.addMouseListener(new MouseAdapter() {
+                public void mouseClicked(MouseEvent var1) {
+                    OperatingSystem.openLink(var9);
+                }
+            });
+        }
+
+        JPanel var10 = new JPanel();
+        var10.setLayout(new BorderLayout());
+        var10.add(this.tabPanel, "Center");
+        var10.add(this.progressBar, "South");
+        this.progressBar.setVisible(false);
+        this.progressBar.setMinimum(0);
+        this.progressBar.setMaximum(100);
+        this.progressBar.setStringPainted(true);
+        var1.add(var10, "Center");
+        var1.add(this.bottomBar, "South");
+        return var1;
+    }
+
+    protected JPanel createDirtInterface() {
+        return new TexturedPanel("/dirt.png");
+    }
+
+    protected JPanel createLoginInterface() {
+        this.loginPanel.setLayout(new GridBagLayout());
+        return this.loginPanel;
+    }
+
+    public LauncherTabPanel getTabPanel() {
+        return this.tabPanel;
+    }
+
+    public BottomBarPanel getBottomBar() {
+        return this.bottomBar;
+    }
+
+    public JProgressBar getProgressBar() {
+        return this.progressBar;
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void setCard(String var1, JPanel var2) {
+        if (var1.equals("login")) {
+            this.loginPanel.removeAll();
+            this.loginPanel.add(var2);
+        }
+
+        this.cardLayout.show(this, var1);
+    }
+}
diff --git a/net/minecraft/launcher/ui/TexturedPanel.java b/net/minecraft/launcher/ui/TexturedPanel.java
new file mode 100644
index 0000000..c45b8cf
--- /dev/null
+++ b/net/minecraft/launcher/ui/TexturedPanel.java
@@ -0,0 +1,71 @@
+package net.minecraft.launcher.ui;
+
+import java.awt.Color;
+import java.awt.GradientPaint;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Image;
+import java.awt.geom.Point2D.Float;
+import java.awt.image.ImageObserver;
+import java.io.IOException;
+import javax.imageio.ImageIO;
+import javax.swing.JPanel;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class TexturedPanel extends JPanel {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final long serialVersionUID = 1L;
+    private Image image;
+    private Image bgImage;
+
+    public TexturedPanel(String var1) {
+        this.setOpaque(true);
+
+        try {
+            this.bgImage = ImageIO.read(TexturedPanel.class.getResource(var1)).getScaledInstance(32, 32, 16);
+        } catch (IOException var3) {
+            LOGGER.error("Unexpected exception initializing textured panel", var3);
+        }
+
+    }
+
+    public void update(Graphics var1) {
+        this.paint(var1);
+    }
+
+    public void paintComponent(Graphics var1) {
+        int var2 = this.getWidth() / 2 + 1;
+        int var3 = this.getHeight() / 2 + 1;
+        if (this.image == null || this.image.getWidth((ImageObserver)null) != var2 || this.image.getHeight((ImageObserver)null) != var3) {
+            this.image = this.createImage(var2, var3);
+            this.copyImage(var2, var3);
+        }
+
+        var1.drawImage(this.image, 0, 0, var2 * 2, var3 * 2, (ImageObserver)null);
+    }
+
+    protected void copyImage(int var1, int var2) {
+        Graphics var3 = this.image.getGraphics();
+
+        for(int var4 = 0; var4 <= var1 / 32; ++var4) {
+            for(int var5 = 0; var5 <= var2 / 32; ++var5) {
+                var3.drawImage(this.bgImage, var4 * 32, var5 * 32, (ImageObserver)null);
+            }
+        }
+
+        if (var3 instanceof Graphics2D) {
+            this.overlayGradient(var1, var2, (Graphics2D)var3);
+        }
+
+        var3.dispose();
+    }
+
+    protected void overlayGradient(int var1, int var2, Graphics2D var3) {
+        byte var4 = 1;
+        var3.setPaint(new GradientPaint(new Float(0.0F, 0.0F), new Color(553648127, true), new Float(0.0F, (float)var4), new Color(0, true)));
+        var3.fillRect(0, 0, var1, var4);
+        var3.setPaint(new GradientPaint(new Float(0.0F, 0.0F), new Color(0, true), new Float(0.0F, (float)var2), new Color(1610612736, true)));
+        var3.fillRect(0, 0, var1, var2);
+    }
+}
diff --git a/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java b/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
new file mode 100644
index 0000000..944da63
--- /dev/null
+++ b/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
@@ -0,0 +1,117 @@
+package net.minecraft.launcher.ui.bottombar;
+
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.game.GameInstanceStatus;
+import com.mojang.launcher.updater.VersionManager;
+import java.awt.Cursor;
+import java.awt.Font;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.SwingUserInterface;
+import net.minecraft.launcher.game.GameLaunchDispatcher;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.profile.RefreshedProfilesListener;
+import net.minecraft.launcher.profile.UserChangedListener;
+
+public class PlayButtonPanel extends JPanel implements RefreshedVersionsListener, RefreshedProfilesListener, UserChangedListener {
+    private final Launcher minecraftLauncher;
+    private final JButton playButton = new JButton("Play");
+    private final JLabel demoHelpLink = new JLabel("(Why can I only play demo?)");
+
+    public PlayButtonPanel(Launcher var1) {
+        this.minecraftLauncher = var1;
+        var1.getProfileManager().addRefreshedProfilesListener(this);
+        var1.getProfileManager().addUserChangedListener(this);
+        this.checkState();
+        this.createInterface();
+        this.playButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                GameLaunchDispatcher var2 = PlayButtonPanel.this.getMinecraftLauncher().getLaunchDispatcher();
+                if (var2.isRunningInSameFolder()) {
+                    int var3 = JOptionPane.showConfirmDialog(((SwingUserInterface)PlayButtonPanel.this.getMinecraftLauncher().getUserInterface()).getFrame(), "You already have an instance of Minecraft running. If you launch another one in the same folder, they may clash and corrupt your saves.\nThis could cause many issues, in singleplayer or otherwise. We will not be responsible for anything that goes wrong.\nDo you want to start another instance of Minecraft, despite this?\nYou may solve this issue by launching the game in a different folder (see the \"Edit Profile\" button)", "Duplicate instance warning", 0);
+                    if (var3 == 0) {
+                        var2.play();
+                    }
+                } else {
+                    var2.play();
+                }
+
+            }
+        });
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridBagLayout());
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.fill = 1;
+        var1.weightx = 1.0D;
+        var1.weighty = 1.0D;
+        var1.gridy = 0;
+        var1.gridx = 0;
+        this.add(this.playButton, var1);
+        ++var1.gridy;
+        var1.weighty = 0.0D;
+        var1.anchor = 10;
+        Font var2 = this.demoHelpLink.getFont().deriveFont((float)this.demoHelpLink.getFont().getSize() - 2.0F);
+        this.demoHelpLink.setCursor(new Cursor(12));
+        this.demoHelpLink.setFont(var2);
+        this.demoHelpLink.setHorizontalAlignment(0);
+        this.demoHelpLink.addMouseListener(new MouseAdapter() {
+            public void mouseClicked(MouseEvent var1) {
+                OperatingSystem.openLink(LauncherConstants.URL_DEMO_HELP);
+            }
+        });
+        this.add(this.demoHelpLink, var1);
+        this.playButton.setFont(this.playButton.getFont().deriveFont(1, (float)(this.playButton.getFont().getSize() + 2)));
+    }
+
+    public void onProfilesRefreshed(ProfileManager var1) {
+        this.checkState();
+    }
+
+    public void checkState() {
+        GameLaunchDispatcher.PlayStatus var1 = this.minecraftLauncher.getLaunchDispatcher().getStatus();
+        this.playButton.setText(var1.getName());
+        this.playButton.setEnabled(var1.canPlay());
+        this.demoHelpLink.setVisible(var1 == GameLaunchDispatcher.PlayStatus.CAN_PLAY_DEMO);
+        if (var1 == GameLaunchDispatcher.PlayStatus.DOWNLOADING) {
+            GameInstanceStatus var2 = this.minecraftLauncher.getLaunchDispatcher().getInstanceStatus();
+            if (var2 != GameInstanceStatus.IDLE) {
+                this.playButton.setText(var2.getName());
+            }
+        }
+
+    }
+
+    public void onVersionsRefreshed(VersionManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                PlayButtonPanel.this.checkState();
+            }
+        });
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void onUserChanged(ProfileManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                PlayButtonPanel.this.checkState();
+            }
+        });
+    }
+}
diff --git a/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java b/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
new file mode 100644
index 0000000..52528d1
--- /dev/null
+++ b/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
@@ -0,0 +1,129 @@
+package net.minecraft.launcher.ui.bottombar;
+
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.updater.VersionManager;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.List;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.profile.RefreshedProfilesListener;
+import net.minecraft.launcher.profile.UserChangedListener;
+
+public class PlayerInfoPanel extends JPanel implements RefreshedVersionsListener, RefreshedProfilesListener, UserChangedListener {
+    private final Launcher minecraftLauncher;
+    private final JLabel welcomeText = new JLabel("", 0);
+    private final JLabel versionText = new JLabel("", 0);
+    private final JButton switchUserButton = new JButton("Switch User");
+
+    public PlayerInfoPanel(final Launcher var1) {
+        this.minecraftLauncher = var1;
+        var1.getProfileManager().addRefreshedProfilesListener(this);
+        var1.getProfileManager().addUserChangedListener(this);
+        this.checkState();
+        this.createInterface();
+        this.switchUserButton.setEnabled(false);
+        this.switchUserButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1x) {
+                var1.getUserInterface().showLoginPrompt();
+            }
+        });
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridBagLayout());
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.fill = 2;
+        var1.gridy = 0;
+        var1.weightx = 1.0D;
+        var1.gridwidth = 2;
+        this.add(this.welcomeText, var1);
+        var1.gridwidth = 1;
+        var1.weightx = 0.0D;
+        ++var1.gridy;
+        var1.weightx = 1.0D;
+        var1.gridwidth = 2;
+        this.add(this.versionText, var1);
+        var1.gridwidth = 1;
+        var1.weightx = 0.0D;
+        ++var1.gridy;
+        var1.weightx = 0.5D;
+        var1.fill = 0;
+        this.add(this.switchUserButton, var1);
+        var1.weightx = 0.0D;
+        ++var1.gridy;
+    }
+
+    public void onProfilesRefreshed(ProfileManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                PlayerInfoPanel.this.checkState();
+            }
+        });
+    }
+
+    public void checkState() {
+        ProfileManager var1 = this.minecraftLauncher.getProfileManager();
+        UserAuthentication var2 = var1.getSelectedUser() == null ? null : var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
+        if (var2 != null && var2.isLoggedIn()) {
+            if (var2.getSelectedProfile() == null) {
+                this.welcomeText.setText("<html>Welcome, player!</html>");
+            } else {
+                this.welcomeText.setText("<html>Welcome, <b>" + var2.getSelectedProfile().getName() + "</b></html>");
+            }
+        } else {
+            this.welcomeText.setText("Welcome, guest! Please log in.");
+        }
+
+        Profile var3 = var1.getProfiles().isEmpty() ? null : var1.getSelectedProfile();
+        List var4 = var3 == null ? null : this.minecraftLauncher.getLauncher().getVersionManager().getVersions(var3.getVersionFilter());
+        VersionSyncInfo var5 = var3 != null && !var4.isEmpty() ? (VersionSyncInfo)var4.get(0) : null;
+        if (var3 != null && var3.getLastVersionId() != null) {
+            VersionSyncInfo var6 = this.minecraftLauncher.getLauncher().getVersionManager().getVersionSyncInfo(var3.getLastVersionId());
+            if (var6 != null && var6.getLatestVersion() != null) {
+                var5 = var6;
+            }
+        }
+
+        if (var5 == null) {
+            this.versionText.setText("Loading versions...");
+        } else if (var5.isUpToDate()) {
+            this.versionText.setText("Ready to play Minecraft " + var5.getLatestVersion().getId());
+        } else if (var5.isInstalled()) {
+            this.versionText.setText("Ready to update & play Minecraft " + var5.getLatestVersion().getId());
+        } else if (var5.isOnRemote()) {
+            this.versionText.setText("Ready to download & play Minecraft " + var5.getLatestVersion().getId());
+        }
+
+        this.switchUserButton.setEnabled(true);
+    }
+
+    public void onVersionsRefreshed(VersionManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                PlayerInfoPanel.this.checkState();
+            }
+        });
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void onUserChanged(ProfileManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                PlayerInfoPanel.this.checkState();
+            }
+        });
+    }
+}
diff --git a/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java b/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
new file mode 100644
index 0000000..787a41a
--- /dev/null
+++ b/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
@@ -0,0 +1,168 @@
+package net.minecraft.launcher.ui.bottombar;
+
+import com.google.common.collect.Lists;
+import java.awt.Component;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.GridLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import javax.swing.JButton;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JList;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.border.EmptyBorder;
+import javax.swing.plaf.basic.BasicComboBoxRenderer;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.profile.RefreshedProfilesListener;
+import net.minecraft.launcher.ui.popups.profile.ProfileEditorPopup;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ProfileSelectionPanel extends JPanel implements ActionListener, ItemListener, RefreshedProfilesListener {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final JComboBox profileList = new JComboBox();
+    private final JButton newProfileButton = new JButton("New Profile");
+    private final JButton editProfileButton = new JButton("Edit Profile");
+    private final Launcher minecraftLauncher;
+    private boolean skipSelectionUpdate;
+
+    public ProfileSelectionPanel(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.profileList.setRenderer(new ProfileSelectionPanel.ProfileListRenderer());
+        this.profileList.addItemListener(this);
+        this.profileList.addItem("Loading profiles...");
+        this.newProfileButton.addActionListener(this);
+        this.editProfileButton.addActionListener(this);
+        this.createInterface();
+        var1.getProfileManager().addRefreshedProfilesListener(this);
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridBagLayout());
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.fill = 2;
+        var1.weightx = 0.0D;
+        var1.gridy = 0;
+        this.add(new JLabel("Profile: "), var1);
+        var1.gridx = 1;
+        this.add(this.profileList, var1);
+        var1.gridx = 0;
+        ++var1.gridy;
+        JPanel var2 = new JPanel(new GridLayout(1, 2));
+        var2.setBorder(new EmptyBorder(2, 0, 0, 0));
+        var2.add(this.newProfileButton);
+        var2.add(this.editProfileButton);
+        var1.gridwidth = 2;
+        this.add(var2, var1);
+        var1.gridwidth = 1;
+        ++var1.gridy;
+    }
+
+    public void onProfilesRefreshed(ProfileManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                ProfileSelectionPanel.this.populateProfiles();
+            }
+        });
+    }
+
+    public void populateProfiles() {
+        String var1 = this.minecraftLauncher.getProfileManager().getSelectedProfile().getName();
+        Profile var2 = null;
+        ArrayList var3 = Lists.newArrayList(this.minecraftLauncher.getProfileManager().getProfiles().values());
+        this.profileList.removeAllItems();
+        Collections.sort(var3);
+        this.skipSelectionUpdate = true;
+
+        Profile var5;
+        for(Iterator var4 = var3.iterator(); var4.hasNext(); this.profileList.addItem(var5)) {
+            var5 = (Profile)var4.next();
+            if (var1.equals(var5.getName())) {
+                var2 = var5;
+            }
+        }
+
+        if (var2 == null) {
+            if (var3.isEmpty()) {
+                var2 = this.minecraftLauncher.getProfileManager().getSelectedProfile();
+                this.profileList.addItem(var2);
+            }
+
+            var2 = (Profile)var3.iterator().next();
+        }
+
+        this.profileList.setSelectedItem(var2);
+        this.skipSelectionUpdate = false;
+    }
+
+    public void itemStateChanged(ItemEvent var1) {
+        if (var1.getStateChange() == 1) {
+            if (!this.skipSelectionUpdate && var1.getItem() instanceof Profile) {
+                Profile var2 = (Profile)var1.getItem();
+                this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getName());
+
+                try {
+                    this.minecraftLauncher.getProfileManager().saveProfiles();
+                } catch (IOException var4) {
+                    LOGGER.error("Couldn't save new selected profile", var4);
+                }
+
+                this.minecraftLauncher.ensureLoggedIn();
+            }
+
+        }
+    }
+
+    public void actionPerformed(ActionEvent var1) {
+        Profile var2;
+        if (var1.getSource() == this.newProfileButton) {
+            var2 = new Profile(this.minecraftLauncher.getProfileManager().getSelectedProfile());
+            var2.setName("Copy of " + var2.getName());
+
+            while(this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var2.getName())) {
+                var2.setName(var2.getName() + "_");
+            }
+
+            ProfileEditorPopup.showEditProfileDialog(this.getMinecraftLauncher(), var2);
+            this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getName());
+        } else if (var1.getSource() == this.editProfileButton) {
+            var2 = this.minecraftLauncher.getProfileManager().getSelectedProfile();
+            ProfileEditorPopup.showEditProfileDialog(this.getMinecraftLauncher(), var2);
+        }
+
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    private static class ProfileListRenderer extends BasicComboBoxRenderer {
+        private ProfileListRenderer() {
+        }
+
+        public Component getListCellRendererComponent(JList var1, Object var2, int var3, boolean var4, boolean var5) {
+            if (var2 instanceof Profile) {
+                var2 = ((Profile)var2).getName();
+            }
+
+            super.getListCellRendererComponent(var1, var2, var3, var4, var5);
+            return this;
+        }
+
+        // $FF: synthetic method
+        ProfileListRenderer(Object var1) {
+            this();
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java b/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
new file mode 100644
index 0000000..c5a1d8b
--- /dev/null
+++ b/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
@@ -0,0 +1,35 @@
+package net.minecraft.launcher.ui.bottombar;
+
+import java.awt.Component;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import javax.swing.JPanel;
+
+public abstract class SidebarGridForm extends JPanel {
+    protected SidebarGridForm() {
+    }
+
+    protected void createInterface() {
+        GridBagLayout var1 = new GridBagLayout();
+        GridBagConstraints var2 = new GridBagConstraints();
+        this.setLayout(var1);
+        this.populateGrid(var2);
+    }
+
+    protected abstract void populateGrid(GridBagConstraints var1);
+
+    protected <T extends Component> T add(T var1, GridBagConstraints var2, int var3, int var4, int var5, int var6) {
+        return this.add(var1, var2, var3, var4, var5, var6, 10);
+    }
+
+    protected <T extends Component> T add(T var1, GridBagConstraints var2, int var3, int var4, int var5, int var6, int var7) {
+        var2.gridx = var3;
+        var2.gridy = var4;
+        var2.weightx = (double)var5;
+        var2.weighty = 1.0D;
+        var2.gridwidth = var6;
+        var2.anchor = var7;
+        this.add(var1, var2);
+        return var1;
+    }
+}
diff --git a/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java b/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
new file mode 100644
index 0000000..91240e0
--- /dev/null
+++ b/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
@@ -0,0 +1,84 @@
+package net.minecraft.launcher.ui.bottombar;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.reflect.TypeToken;
+import com.mojang.launcher.Http;
+import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
+import java.awt.GridBagConstraints;
+import java.net.URL;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import javax.swing.JLabel;
+import net.minecraft.launcher.Launcher;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class StatusPanelForm extends SidebarGridForm {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final String SERVER_SESSION = "session.minecraft.net";
+    private static final String SERVER_LOGIN = "login.minecraft.net";
+    private final Launcher minecraftLauncher;
+    private final JLabel sessionStatus = new JLabel("???");
+    private final JLabel loginStatus = new JLabel("???");
+    private final Gson gson = (new GsonBuilder()).registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory()).create();
+
+    public StatusPanelForm(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.createInterface();
+        this.refreshStatuses();
+    }
+
+    protected void populateGrid(GridBagConstraints var1) {
+        this.add(new JLabel("Multiplayer:", 2), var1, 0, 0, 0, 1, 17);
+        this.add(this.sessionStatus, var1, 1, 0, 1, 1);
+        this.add(new JLabel("Login:", 2), var1, 0, 1, 0, 1, 17);
+        this.add(this.loginStatus, var1, 1, 1, 1, 1);
+    }
+
+    public JLabel getSessionStatus() {
+        return this.sessionStatus;
+    }
+
+    public JLabel getLoginStatus() {
+        return this.loginStatus;
+    }
+
+    public void refreshStatuses() {
+        this.minecraftLauncher.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
+            public void run() {
+                try {
+                    TypeToken var1 = new TypeToken<List<Map<String, StatusPanelForm.ServerStatus>>>() {
+                    };
+                    List var2 = (List)StatusPanelForm.this.gson.fromJson(Http.performGet(new URL("http://status.mojang.com/check"), StatusPanelForm.this.minecraftLauncher.getLauncher().getProxy()), var1.getType());
+                    Iterator var3 = var2.iterator();
+
+                    while(var3.hasNext()) {
+                        Map var4 = (Map)var3.next();
+                        if (var4.containsKey("login.minecraft.net")) {
+                            StatusPanelForm.this.loginStatus.setText(((StatusPanelForm.ServerStatus)var4.get("login.minecraft.net")).title);
+                        } else if (var4.containsKey("session.minecraft.net")) {
+                            StatusPanelForm.this.sessionStatus.setText(((StatusPanelForm.ServerStatus)var4.get("session.minecraft.net")).title);
+                        }
+                    }
+                } catch (Exception var5) {
+                    StatusPanelForm.LOGGER.error("Couldn't get server status", var5);
+                }
+
+            }
+        });
+    }
+
+    public static enum ServerStatus {
+        GREEN("Online, no problems detected."),
+        YELLOW("May be experiencing issues."),
+        RED("Offline, experiencing problems.");
+
+        private final String title;
+
+        private ServerStatus(String var3) {
+            this.title = var3;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java b/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
new file mode 100644
index 0000000..7731ed5
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
@@ -0,0 +1,101 @@
+package net.minecraft.launcher.ui.popups.login;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.reflect.TypeToken;
+import com.mojang.launcher.Http;
+import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
+import java.net.URL;
+import java.util.Map;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.border.EmptyBorder;
+import org.apache.commons.lang3.exception.ExceptionUtils;
+
+public class AuthErrorForm extends JPanel {
+    private final LogInPopup popup;
+    private final JLabel errorLabel = new JLabel();
+    private final Gson gson = (new GsonBuilder()).registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory()).create();
+
+    public AuthErrorForm(LogInPopup var1) {
+        this.popup = var1;
+        this.createInterface();
+        this.clear();
+    }
+
+    protected void createInterface() {
+        this.setBorder(new EmptyBorder(0, 0, 15, 0));
+        this.errorLabel.setFont(this.errorLabel.getFont().deriveFont(1));
+        this.add(this.errorLabel);
+    }
+
+    public void clear() {
+        this.setVisible(false);
+    }
+
+    public void setVisible(boolean var1) {
+        super.setVisible(var1);
+        this.popup.repack();
+    }
+
+    public void displayError(final Throwable var1, final String... var2) {
+        if (SwingUtilities.isEventDispatchThread()) {
+            String var3 = "";
+            String[] var4 = var2;
+            int var5 = var2.length;
+
+            for(int var6 = 0; var6 < var5; ++var6) {
+                String var7 = var4[var6];
+                var3 = var3 + "<p>" + var7 + "</p>";
+            }
+
+            if (var1 != null) {
+                var3 = var3 + "<p style='font-size: 0.9em; font-style: italic;'>(" + ExceptionUtils.getRootCauseMessage(var1) + ")</p>";
+            }
+
+            this.errorLabel.setText("<html><div style='text-align: center;'>" + var3 + " </div></html>");
+            if (!this.isVisible()) {
+                this.refreshStatuses();
+            }
+
+            this.setVisible(true);
+        } else {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    AuthErrorForm.this.displayError(var1, var2);
+                }
+            });
+        }
+
+    }
+
+    public void refreshStatuses() {
+        this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
+            public void run() {
+                try {
+                    TypeToken var1 = new TypeToken<Map<String, AuthErrorForm.ServerStatus>>() {
+                    };
+                    Map var2 = (Map)AuthErrorForm.this.gson.fromJson(Http.performGet(new URL("http://status.mojang.com/check?service=authserver.mojang.com"), AuthErrorForm.this.popup.getMinecraftLauncher().getLauncher().getProxy()), var1.getType());
+                    if (var2.get("authserver.mojang.com") == AuthErrorForm.ServerStatus.RED) {
+                        AuthErrorForm.this.displayError((Throwable)null, "It looks like our servers are down right now. Sorry!", "We're already working on the problem and will have it fixed soon.", "Please try again later!");
+                    }
+                } catch (Exception var3) {
+                }
+
+            }
+        });
+    }
+
+    public static enum ServerStatus {
+        GREEN("Online, no problems detected."),
+        YELLOW("May be experiencing issues."),
+        RED("Offline, experiencing problems.");
+
+        private final String title;
+
+        private ServerStatus(String var3) {
+            this.title = var3;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java b/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
new file mode 100644
index 0000000..7a9da9f
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
@@ -0,0 +1,163 @@
+package net.minecraft.launcher.ui.popups.login;
+
+import com.google.common.base.Objects;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.util.UUIDTypeAdapter;
+import java.awt.Font;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.io.IOException;
+import java.util.Iterator;
+import javax.swing.Box;
+import javax.swing.JButton;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.JPopupMenu.Separator;
+import net.minecraft.launcher.profile.AuthenticationDatabase;
+import net.minecraft.launcher.profile.ProfileManager;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ExistingUserListForm extends JPanel implements ActionListener {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final LogInPopup popup;
+    private final JComboBox userDropdown = new JComboBox();
+    private final AuthenticationDatabase authDatabase;
+    private final JButton playButton = new JButton("Play");
+    private final JButton logOutButton = new JButton("Log Out");
+    private final ProfileManager profileManager;
+
+    public ExistingUserListForm(LogInPopup var1) {
+        this.popup = var1;
+        this.profileManager = var1.getMinecraftLauncher().getProfileManager();
+        this.authDatabase = var1.getMinecraftLauncher().getProfileManager().getAuthDatabase();
+        this.fillUsers();
+        this.createInterface();
+        this.playButton.addActionListener(this);
+        this.logOutButton.addActionListener(this);
+    }
+
+    private void fillUsers() {
+        Iterator var1 = this.authDatabase.getKnownNames().iterator();
+
+        while(var1.hasNext()) {
+            String var2 = (String)var1.next();
+            this.userDropdown.addItem(var2);
+            if (this.profileManager.getSelectedUser() != null && Objects.equal(this.authDatabase.getByUUID(this.profileManager.getSelectedUser()), this.authDatabase.getByName(var2))) {
+                this.userDropdown.setSelectedItem(var2);
+            }
+        }
+
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridBagLayout());
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.fill = 2;
+        var1.gridx = 0;
+        var1.gridy = -1;
+        var1.gridwidth = 2;
+        var1.weightx = 1.0D;
+        this.add(Box.createGlue());
+        String var2 = this.authDatabase.getKnownNames().size() == 1 ? (String)this.authDatabase.getKnownNames().iterator().next() : this.authDatabase.getKnownNames().size() + " different users";
+        String var3 = this.authDatabase.getKnownNames().size() == 1 ? "this account" : "one of these accounts";
+        this.add(new JLabel("You're already logged in as " + var2 + "."), var1);
+        this.add(new JLabel("You may use " + var3 + " and skip authentication."), var1);
+        this.add(Box.createVerticalStrut(5), var1);
+        JLabel var4 = new JLabel("Existing User:");
+        Font var5 = var4.getFont().deriveFont(1);
+        var4.setFont(var5);
+        this.add(var4, var1);
+        var1.gridwidth = 1;
+        this.add(this.userDropdown, var1);
+        var1.gridx = 1;
+        var1.gridy = 5;
+        var1.weightx = 0.0D;
+        var1.insets = new Insets(0, 5, 0, 0);
+        this.add(this.playButton, var1);
+        var1.gridx = 2;
+        this.add(this.logOutButton, var1);
+        var1.insets = new Insets(0, 0, 0, 0);
+        var1.weightx = 1.0D;
+        var1.gridx = 0;
+        var1.gridy = -1;
+        var1.gridwidth = 2;
+        this.add(Box.createVerticalStrut(5), var1);
+        this.add(new JLabel("Alternatively, log in with a new account below:"), var1);
+        this.add(new Separator(), var1);
+    }
+
+    public void actionPerformed(ActionEvent var1) {
+        final Object var4 = this.userDropdown.getSelectedItem();
+        final UserAuthentication var2;
+        final String var3;
+        if (var4 != null && var4 instanceof String) {
+            var2 = this.authDatabase.getByName((String)var4);
+            if (var2.getSelectedProfile() == null) {
+                var3 = "demo-" + var2.getUserID();
+            } else {
+                var3 = UUIDTypeAdapter.fromUUID(var2.getSelectedProfile().getId());
+            }
+        } else {
+            var2 = null;
+            var3 = null;
+        }
+
+        if (var1.getSource() == this.playButton) {
+            this.popup.setCanLogIn(false);
+            this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
+                public void run() {
+                    if (var2 != null && var3 != null) {
+                        try {
+                            if (!var2.canPlayOnline()) {
+                                var2.logIn();
+                            }
+
+                            ExistingUserListForm.this.popup.setLoggedIn(var3);
+                        } catch (AuthenticationException var2x) {
+                            ExistingUserListForm.this.popup.getErrorForm().displayError(var2x, "We couldn't log you back in as " + var4 + ".", "Please try to log in again.");
+                            ExistingUserListForm.this.removeUser((String)var4, var3);
+                            ExistingUserListForm.this.popup.setCanLogIn(true);
+                        }
+                    } else {
+                        ExistingUserListForm.this.popup.setCanLogIn(true);
+                    }
+
+                }
+            });
+        } else if (var1.getSource() == this.logOutButton) {
+            this.removeUser((String)var4, var3);
+        }
+
+    }
+
+    protected void removeUser(final String var1, final String var2) {
+        if (!SwingUtilities.isEventDispatchThread()) {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    ExistingUserListForm.this.removeUser(var1, var2);
+                }
+            });
+        } else {
+            this.userDropdown.removeItem(var1);
+            this.authDatabase.removeUUID(var2);
+
+            try {
+                this.profileManager.saveProfiles();
+            } catch (IOException var4) {
+                LOGGER.error("Couldn't save profiles whilst removing " + var1 + " / " + var2 + " from database", var4);
+            }
+
+            if (this.userDropdown.getItemCount() == 0) {
+                this.popup.remove(this);
+            }
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/login/LogInForm.java b/net/minecraft/launcher/ui/popups/login/LogInForm.java
new file mode 100644
index 0000000..337403e
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -0,0 +1,213 @@
+package net.minecraft.launcher.ui.popups.login;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.exceptions.InvalidCredentialsException;
+import com.mojang.authlib.exceptions.UserMigratedException;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.util.UUIDTypeAdapter;
+import java.awt.Cursor;
+import java.awt.Font;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import javax.swing.Box;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.SwingUtilities;
+import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.profile.AuthenticationDatabase;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class LogInForm extends JPanel implements ActionListener {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final LogInPopup popup;
+    private final JTextField usernameField = new JTextField();
+    private final JPasswordField passwordField = new JPasswordField();
+    private final JComboBox userDropdown = new JComboBox();
+    private final JPanel userDropdownPanel = new JPanel();
+    private final UserAuthentication authentication;
+
+    public LogInForm(LogInPopup var1) {
+        this.popup = var1;
+        this.authentication = var1.getMinecraftLauncher().getProfileManager().getAuthDatabase().getAuthenticationService().createUserAuthentication(Agent.MINECRAFT);
+        this.usernameField.addActionListener(this);
+        this.passwordField.addActionListener(this);
+        this.createInterface();
+    }
+
+    protected void createInterface() {
+        this.setLayout(new GridBagLayout());
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.fill = 2;
+        var1.gridx = 0;
+        var1.gridy = -1;
+        var1.weightx = 1.0D;
+        this.add(Box.createGlue());
+        JLabel var2 = new JLabel("Email Address or Username:");
+        Font var3 = var2.getFont().deriveFont(1);
+        Font var4 = var2.getFont().deriveFont((float)var3.getSize() - 2.0F);
+        var2.setFont(var3);
+        this.add(var2, var1);
+        this.add(this.usernameField, var1);
+        JLabel var5 = new JLabel("(Which do I use?)");
+        var5.setCursor(new Cursor(12));
+        var5.setFont(var4);
+        var5.setHorizontalAlignment(4);
+        var5.addMouseListener(new MouseAdapter() {
+            public void mouseClicked(MouseEvent var1) {
+                OperatingSystem.openLink(LauncherConstants.URL_FORGOT_USERNAME);
+            }
+        });
+        this.add(var5, var1);
+        this.add(Box.createVerticalStrut(10), var1);
+        JLabel var6 = new JLabel("Password:");
+        var6.setFont(var3);
+        this.add(var6, var1);
+        this.add(this.passwordField, var1);
+        JLabel var7 = new JLabel("(Forgot Password?)");
+        var7.setCursor(new Cursor(12));
+        var7.setFont(var4);
+        var7.setHorizontalAlignment(4);
+        var7.addMouseListener(new MouseAdapter() {
+            public void mouseClicked(MouseEvent var1) {
+                OperatingSystem.openLink(LauncherConstants.URL_FORGOT_PASSWORD_MINECRAFT);
+            }
+        });
+        this.add(var7, var1);
+        this.createUserDropdownPanel(var3);
+        this.add(this.userDropdownPanel, var1);
+        this.add(Box.createVerticalStrut(10), var1);
+    }
+
+    protected void createUserDropdownPanel(Font var1) {
+        this.userDropdownPanel.setLayout(new GridBagLayout());
+        GridBagConstraints var2 = new GridBagConstraints();
+        var2.fill = 2;
+        var2.gridx = 0;
+        var2.gridy = -1;
+        var2.weightx = 1.0D;
+        this.userDropdownPanel.add(Box.createVerticalStrut(8), var2);
+        JLabel var3 = new JLabel("Character Name:");
+        var3.setFont(var1);
+        this.userDropdownPanel.add(var3, var2);
+        this.userDropdownPanel.add(this.userDropdown, var2);
+        this.userDropdownPanel.setVisible(false);
+    }
+
+    public void actionPerformed(ActionEvent var1) {
+        if (var1.getSource() == this.usernameField || var1.getSource() == this.passwordField) {
+            this.tryLogIn();
+        }
+
+    }
+
+    public void tryLogIn() {
+        if (this.authentication.isLoggedIn() && this.authentication.getSelectedProfile() == null && ArrayUtils.isNotEmpty(this.authentication.getAvailableProfiles())) {
+            this.popup.setCanLogIn(false);
+            final GameProfile var6 = null;
+            GameProfile[] var2 = this.authentication.getAvailableProfiles();
+            int var3 = var2.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+                GameProfile var5 = var2[var4];
+                if (var5.getName().equals(this.userDropdown.getSelectedItem())) {
+                    var6 = var5;
+                    break;
+                }
+            }
+
+            if (var6 == null) {
+                var6 = this.authentication.getAvailableProfiles()[0];
+            }
+
+            this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
+                public void run() {
+                    try {
+                        LogInForm.this.authentication.selectGameProfile(var6);
+                        LogInForm.this.popup.getMinecraftLauncher().getProfileManager().getAuthDatabase().register(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()), LogInForm.this.authentication);
+                        LogInForm.this.popup.setLoggedIn(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()));
+                    } catch (InvalidCredentialsException var2) {
+                        LogInForm.LOGGER.error("Couldn't log in", var2);
+                        LogInForm.this.popup.getErrorForm().displayError(var2, "Sorry, but we couldn't log you in right now.", "Please try again later.");
+                        LogInForm.this.popup.setCanLogIn(true);
+                    } catch (AuthenticationException var3) {
+                        LogInForm.LOGGER.error("Couldn't log in", var3);
+                        LogInForm.this.popup.getErrorForm().displayError(var3, "Sorry, but we couldn't connect to our servers.", "Please make sure that you are online and that Minecraft is not blocked.");
+                        LogInForm.this.popup.setCanLogIn(true);
+                    }
+
+                }
+            });
+        } else {
+            this.popup.setCanLogIn(false);
+            this.authentication.logOut();
+            this.authentication.setUsername(this.usernameField.getText());
+            this.authentication.setPassword(String.valueOf(this.passwordField.getPassword()));
+            final int var1 = this.passwordField.getPassword().length;
+            this.passwordField.setText("");
+            this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
+                public void run() {
+                    try {
+                        LogInForm.this.authentication.logIn();
+                        AuthenticationDatabase var1x = LogInForm.this.popup.getMinecraftLauncher().getProfileManager().getAuthDatabase();
+                        if (LogInForm.this.authentication.getSelectedProfile() == null) {
+                            if (ArrayUtils.isNotEmpty(LogInForm.this.authentication.getAvailableProfiles())) {
+                                GameProfile[] var2 = LogInForm.this.authentication.getAvailableProfiles();
+                                int var3 = var2.length;
+
+                                for(int var4 = 0; var4 < var3; ++var4) {
+                                    GameProfile var5 = var2[var4];
+                                    LogInForm.this.userDropdown.addItem(var5.getName());
+                                }
+
+                                SwingUtilities.invokeLater(new Runnable() {
+                                    public void run() {
+                                        LogInForm.this.usernameField.setEditable(false);
+                                        LogInForm.this.passwordField.setEditable(false);
+                                        LogInForm.this.userDropdownPanel.setVisible(true);
+                                        LogInForm.this.popup.repack();
+                                        LogInForm.this.popup.setCanLogIn(true);
+                                        LogInForm.this.passwordField.setText(StringUtils.repeat('*', var1));
+                                    }
+                                });
+                            } else {
+                                String var9 = "demo-" + LogInForm.this.authentication.getUserID();
+                                var1x.register(var9, LogInForm.this.authentication);
+                                LogInForm.this.popup.setLoggedIn(var9);
+                            }
+                        } else {
+                            var1x.register(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()), LogInForm.this.authentication);
+                            LogInForm.this.popup.setLoggedIn(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()));
+                        }
+                    } catch (UserMigratedException var6) {
+                        LogInForm.LOGGER.error("Couldn't log in", var6);
+                        LogInForm.this.popup.getErrorForm().displayError(var6, "Sorry, but we can't log you in with your username.", "You have migrated your account, please use your email address.");
+                        LogInForm.this.popup.setCanLogIn(true);
+                    } catch (InvalidCredentialsException var7) {
+                        LogInForm.LOGGER.error("Couldn't log in", var7);
+                        LogInForm.this.popup.getErrorForm().displayError(var7, "Sorry, but your username or password is incorrect!", "Please try again. If you need help, try the 'Forgot Password' link.");
+                        LogInForm.this.popup.setCanLogIn(true);
+                    } catch (AuthenticationException var8) {
+                        LogInForm.LOGGER.error("Couldn't log in", var8);
+                        LogInForm.this.popup.getErrorForm().displayError(var8, "Sorry, but we couldn't connect to our servers.", "Please make sure that you are online and that Minecraft is not blocked.");
+                        LogInForm.this.popup.setCanLogIn(true);
+                    }
+
+                }
+            });
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/login/LogInPopup.java b/net/minecraft/launcher/ui/popups/login/LogInPopup.java
new file mode 100644
index 0000000..8f0c250
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/login/LogInPopup.java
@@ -0,0 +1,138 @@
+package net.minecraft.launcher.ui.popups.login;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.GridLayout;
+import java.awt.Window;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.io.InputStream;
+import javax.imageio.ImageIO;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.ImageIcon;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JProgressBar;
+import javax.swing.SwingUtilities;
+import javax.swing.border.EmptyBorder;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+
+public class LogInPopup extends JPanel implements ActionListener {
+    private final Launcher minecraftLauncher;
+    private final LogInPopup.Callback callback;
+    private final AuthErrorForm errorForm;
+    private final ExistingUserListForm existingUserListForm;
+    private final LogInForm logInForm;
+    private final JButton loginButton = new JButton("Log In");
+    private final JButton registerButton = new JButton("Register");
+    private final JProgressBar progressBar = new JProgressBar();
+
+    public LogInPopup(Launcher var1, LogInPopup.Callback var2) {
+        super(true);
+        this.minecraftLauncher = var1;
+        this.callback = var2;
+        this.errorForm = new AuthErrorForm(this);
+        this.existingUserListForm = new ExistingUserListForm(this);
+        this.logInForm = new LogInForm(this);
+        this.createInterface();
+        this.loginButton.addActionListener(this);
+        this.registerButton.addActionListener(this);
+    }
+
+    protected void createInterface() {
+        this.setLayout(new BoxLayout(this, 1));
+        this.setBorder(new EmptyBorder(5, 15, 5, 15));
+
+        try {
+            InputStream var1 = LogInPopup.class.getResourceAsStream("/minecraft_logo.png");
+            if (var1 != null) {
+                BufferedImage var2 = ImageIO.read(var1);
+                JLabel var3 = new JLabel(new ImageIcon(var2));
+                JPanel var4 = new JPanel();
+                var4.add(var3);
+                this.add(var4);
+                this.add(Box.createVerticalStrut(10));
+            }
+        } catch (IOException var5) {
+            var5.printStackTrace();
+        }
+
+        if (!this.minecraftLauncher.getProfileManager().getAuthDatabase().getKnownNames().isEmpty()) {
+            this.add(this.existingUserListForm);
+        }
+
+        this.add(this.errorForm);
+        this.add(this.logInForm);
+        this.add(Box.createVerticalStrut(15));
+        JPanel var6 = new JPanel();
+        var6.setLayout(new GridLayout(1, 2, 10, 0));
+        var6.add(this.registerButton);
+        var6.add(this.loginButton);
+        this.add(var6);
+        this.progressBar.setIndeterminate(true);
+        this.progressBar.setVisible(false);
+        this.add(this.progressBar);
+    }
+
+    public void actionPerformed(ActionEvent var1) {
+        if (var1.getSource() == this.loginButton) {
+            this.logInForm.tryLogIn();
+        } else if (var1.getSource() == this.registerButton) {
+            OperatingSystem.openLink(LauncherConstants.URL_REGISTER);
+        }
+
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void setCanLogIn(final boolean var1) {
+        if (SwingUtilities.isEventDispatchThread()) {
+            this.loginButton.setEnabled(var1);
+            this.progressBar.setIndeterminate(false);
+            this.progressBar.setIndeterminate(true);
+            this.progressBar.setVisible(!var1);
+            this.repack();
+        } else {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    LogInPopup.this.setCanLogIn(var1);
+                }
+            });
+        }
+
+    }
+
+    public LogInForm getLogInForm() {
+        return this.logInForm;
+    }
+
+    public AuthErrorForm getErrorForm() {
+        return this.errorForm;
+    }
+
+    public ExistingUserListForm getExistingUserListForm() {
+        return this.existingUserListForm;
+    }
+
+    public void setLoggedIn(String var1) {
+        this.callback.onLogIn(var1);
+    }
+
+    public void repack() {
+        Window var1 = SwingUtilities.windowForComponent(this);
+        if (var1 != null) {
+            var1.pack();
+        }
+
+    }
+
+    public interface Callback {
+        void onLogIn(String var1);
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java b/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
new file mode 100644
index 0000000..c04f6c5
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
@@ -0,0 +1,136 @@
+package net.minecraft.launcher.ui.popups.profile;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.BorderLayout;
+import java.awt.Window;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+import java.io.IOException;
+import java.util.Map;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.JButton;
+import javax.swing.JDialog;
+import javax.swing.JFrame;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.border.EmptyBorder;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.SwingUserInterface;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ProfileEditorPopup extends JPanel implements ActionListener {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final Launcher minecraftLauncher;
+    private final Profile originalProfile;
+    private final Profile profile;
+    private final JButton saveButton = new JButton("Save Profile");
+    private final JButton cancelButton = new JButton("Cancel");
+    private final JButton browseButton = new JButton("Open Game Dir");
+    private final ProfileInfoPanel profileInfoPanel;
+    private final ProfileVersionPanel profileVersionPanel;
+    private final ProfileJavaPanel javaInfoPanel;
+
+    public ProfileEditorPopup(Launcher var1, Profile var2) {
+        super(true);
+        this.minecraftLauncher = var1;
+        this.originalProfile = var2;
+        this.profile = new Profile(var2);
+        this.profileInfoPanel = new ProfileInfoPanel(this);
+        this.profileVersionPanel = new ProfileVersionPanel(this);
+        this.javaInfoPanel = new ProfileJavaPanel(this);
+        this.saveButton.addActionListener(this);
+        this.cancelButton.addActionListener(this);
+        this.browseButton.addActionListener(this);
+        this.setBorder(new EmptyBorder(5, 5, 5, 5));
+        this.setLayout(new BorderLayout(0, 5));
+        this.createInterface();
+    }
+
+    protected void createInterface() {
+        JPanel var1 = new JPanel(true);
+        var1.setLayout(new BoxLayout(var1, 1));
+        var1.add(this.profileInfoPanel);
+        var1.add(this.profileVersionPanel);
+        var1.add(this.javaInfoPanel);
+        this.add(var1, "Center");
+        JPanel var2 = new JPanel();
+        var2.setLayout(new BoxLayout(var2, 0));
+        var2.add(this.cancelButton);
+        var2.add(Box.createGlue());
+        var2.add(this.browseButton);
+        var2.add(Box.createHorizontalStrut(5));
+        var2.add(this.saveButton);
+        this.add(var2, "South");
+    }
+
+    public void actionPerformed(ActionEvent var1) {
+        if (var1.getSource() == this.saveButton) {
+            try {
+                ProfileManager var2 = this.minecraftLauncher.getProfileManager();
+                Map var3 = var2.getProfiles();
+                String var4 = var2.getSelectedProfile().getName();
+                if (!this.originalProfile.getName().equals(this.profile.getName())) {
+                    var3.remove(this.originalProfile.getName());
+
+                    while(var3.containsKey(this.profile.getName())) {
+                        this.profile.setName(this.profile.getName() + "_");
+                    }
+                }
+
+                var3.put(this.profile.getName(), this.profile);
+                if (var4.equals(this.originalProfile.getName())) {
+                    var2.setSelectedProfile(this.profile.getName());
+                }
+
+                var2.saveProfiles();
+                var2.fireRefreshEvent();
+            } catch (IOException var5) {
+                LOGGER.error("Couldn't save profiles whilst editing " + this.profile.getName(), var5);
+            }
+
+            this.closeWindow();
+        } else if (var1.getSource() == this.browseButton) {
+            OperatingSystem.openFolder(this.profile.getGameDir() == null ? this.minecraftLauncher.getLauncher().getWorkingDirectory() : this.profile.getGameDir());
+        } else {
+            this.closeWindow();
+        }
+
+    }
+
+    private void closeWindow() {
+        if (SwingUtilities.isEventDispatchThread()) {
+            Window var1 = (Window)this.getTopLevelAncestor();
+            var1.dispatchEvent(new WindowEvent(var1, 201));
+        } else {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    ProfileEditorPopup.this.closeWindow();
+                }
+            });
+        }
+
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public Profile getProfile() {
+        return this.profile;
+    }
+
+    public static void showEditProfileDialog(Launcher var0, Profile var1) {
+        JFrame var2 = ((SwingUserInterface)var0.getUserInterface()).getFrame();
+        JDialog var3 = new JDialog(var2, "Profile Editor", true);
+        ProfileEditorPopup var4 = new ProfileEditorPopup(var0, var1);
+        var3.add(var4);
+        var3.pack();
+        var3.setLocationRelativeTo(var2);
+        var3.setVisible(true);
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java b/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
new file mode 100644
index 0000000..f7221bf
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
@@ -0,0 +1,280 @@
+package net.minecraft.launcher.ui.popups.profile;
+
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import java.io.File;
+import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.JCheckBox;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+import net.minecraft.launcher.profile.LauncherVisibilityRule;
+import net.minecraft.launcher.profile.Profile;
+
+public class ProfileInfoPanel extends JPanel {
+    private final ProfileEditorPopup editor;
+    private final JCheckBox gameDirCustom = new JCheckBox("Game Directory:");
+    private final JTextField profileName = new JTextField();
+    private final JTextField gameDirField = new JTextField();
+    private final JCheckBox resolutionCustom = new JCheckBox("Resolution:");
+    private final JTextField resolutionWidth = new JTextField();
+    private final JTextField resolutionHeight = new JTextField();
+    private final JCheckBox useHopper = new JCheckBox("Automatically ask Mojang for assistance with fixing crashes");
+    private final JCheckBox launcherVisibilityCustom = new JCheckBox("Launcher Visibility:");
+    private final JComboBox launcherVisibilityOption = new JComboBox();
+
+    public ProfileInfoPanel(ProfileEditorPopup var1) {
+        this.editor = var1;
+        this.setLayout(new GridBagLayout());
+        this.setBorder(BorderFactory.createTitledBorder("Profile Info"));
+        this.createInterface();
+        this.fillDefaultValues();
+        this.addEventHandlers();
+    }
+
+    protected void createInterface() {
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.insets = new Insets(2, 2, 2, 2);
+        var1.anchor = 17;
+        var1.gridy = 0;
+        this.add(new JLabel("Profile Name:"), var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.profileName, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        this.add(this.gameDirCustom, var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.gameDirField, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        JPanel var2 = new JPanel();
+        var2.setLayout(new BoxLayout(var2, 0));
+        var2.add(this.resolutionWidth);
+        var2.add(Box.createHorizontalStrut(5));
+        var2.add(new JLabel("x"));
+        var2.add(Box.createHorizontalStrut(5));
+        var2.add(this.resolutionHeight);
+        this.add(this.resolutionCustom, var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(var2, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        var1.gridwidth = 0;
+        this.add(this.useHopper, var1);
+        var1.gridwidth = 1;
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        this.add(this.launcherVisibilityCustom, var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.launcherVisibilityOption, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        LauncherVisibilityRule[] var3 = LauncherVisibilityRule.values();
+        int var4 = var3.length;
+
+        for(int var5 = 0; var5 < var4; ++var5) {
+            LauncherVisibilityRule var6 = var3[var5];
+            this.launcherVisibilityOption.addItem(var6);
+        }
+
+    }
+
+    protected void fillDefaultValues() {
+        this.profileName.setText(this.editor.getProfile().getName());
+        File var1 = this.editor.getProfile().getGameDir();
+        if (var1 != null) {
+            this.gameDirCustom.setSelected(true);
+            this.gameDirField.setText(var1.getAbsolutePath());
+        } else {
+            this.gameDirCustom.setSelected(false);
+            this.gameDirField.setText(this.editor.getMinecraftLauncher().getLauncher().getWorkingDirectory().getAbsolutePath());
+        }
+
+        this.updateGameDirState();
+        Profile.Resolution var2 = this.editor.getProfile().getResolution();
+        this.resolutionCustom.setSelected(var2 != null);
+        if (var2 == null) {
+            var2 = Profile.DEFAULT_RESOLUTION;
+        }
+
+        this.resolutionWidth.setText(String.valueOf(var2.getWidth()));
+        this.resolutionHeight.setText(String.valueOf(var2.getHeight()));
+        this.updateResolutionState();
+        this.useHopper.setSelected(this.editor.getProfile().getUseHopperCrashService());
+        LauncherVisibilityRule var3 = this.editor.getProfile().getLauncherVisibilityOnGameClose();
+        if (var3 != null) {
+            this.launcherVisibilityCustom.setSelected(true);
+            this.launcherVisibilityOption.setSelectedItem(var3);
+        } else {
+            this.launcherVisibilityCustom.setSelected(false);
+            this.launcherVisibilityOption.setSelectedItem(Profile.DEFAULT_LAUNCHER_VISIBILITY);
+        }
+
+        this.updateLauncherVisibilityState();
+    }
+
+    protected void addEventHandlers() {
+        this.profileName.getDocument().addDocumentListener(new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateProfileName();
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateProfileName();
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateProfileName();
+            }
+        });
+        this.gameDirCustom.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileInfoPanel.this.updateGameDirState();
+            }
+        });
+        this.gameDirField.getDocument().addDocumentListener(new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateGameDir();
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateGameDir();
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateGameDir();
+            }
+        });
+        this.resolutionCustom.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileInfoPanel.this.updateResolutionState();
+            }
+        });
+        DocumentListener var1 = new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateResolution();
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateResolution();
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+                ProfileInfoPanel.this.updateResolution();
+            }
+        };
+        this.resolutionWidth.getDocument().addDocumentListener(var1);
+        this.resolutionHeight.getDocument().addDocumentListener(var1);
+        this.useHopper.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileInfoPanel.this.updateHopper();
+            }
+        });
+        this.launcherVisibilityCustom.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileInfoPanel.this.updateLauncherVisibilityState();
+            }
+        });
+        this.launcherVisibilityOption.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileInfoPanel.this.updateLauncherVisibilitySelection();
+            }
+        });
+    }
+
+    private void updateLauncherVisibilityState() {
+        Profile var1 = this.editor.getProfile();
+        if (this.launcherVisibilityCustom.isSelected() && this.launcherVisibilityOption.getSelectedItem() instanceof LauncherVisibilityRule) {
+            var1.setLauncherVisibilityOnGameClose((LauncherVisibilityRule)this.launcherVisibilityOption.getSelectedItem());
+            this.launcherVisibilityOption.setEnabled(true);
+        } else {
+            var1.setLauncherVisibilityOnGameClose((LauncherVisibilityRule)null);
+            this.launcherVisibilityOption.setEnabled(false);
+        }
+
+    }
+
+    private void updateLauncherVisibilitySelection() {
+        Profile var1 = this.editor.getProfile();
+        if (this.launcherVisibilityOption.getSelectedItem() instanceof LauncherVisibilityRule) {
+            var1.setLauncherVisibilityOnGameClose((LauncherVisibilityRule)this.launcherVisibilityOption.getSelectedItem());
+        }
+
+    }
+
+    private void updateHopper() {
+        Profile var1 = this.editor.getProfile();
+        if (this.useHopper.isSelected()) {
+            var1.setUseHopperCrashService(true);
+        } else {
+            var1.setUseHopperCrashService(false);
+        }
+
+    }
+
+    private void updateProfileName() {
+        if (this.profileName.getText().length() > 0) {
+            this.editor.getProfile().setName(this.profileName.getText());
+        }
+
+    }
+
+    private void updateGameDirState() {
+        if (this.gameDirCustom.isSelected()) {
+            this.gameDirField.setEnabled(true);
+            this.editor.getProfile().setGameDir(new File(this.gameDirField.getText()));
+        } else {
+            this.gameDirField.setEnabled(false);
+            this.editor.getProfile().setGameDir((File)null);
+        }
+
+    }
+
+    private void updateResolutionState() {
+        if (this.resolutionCustom.isSelected()) {
+            this.resolutionWidth.setEnabled(true);
+            this.resolutionHeight.setEnabled(true);
+            this.updateResolution();
+        } else {
+            this.resolutionWidth.setEnabled(false);
+            this.resolutionHeight.setEnabled(false);
+            this.editor.getProfile().setResolution((Profile.Resolution)null);
+        }
+
+    }
+
+    private void updateResolution() {
+        try {
+            int var1 = Integer.parseInt(this.resolutionWidth.getText());
+            int var2 = Integer.parseInt(this.resolutionHeight.getText());
+            this.editor.getProfile().setResolution(new Profile.Resolution(var1, var2));
+        } catch (NumberFormatException var3) {
+            this.editor.getProfile().setResolution((Profile.Resolution)null);
+        }
+
+    }
+
+    private void updateGameDir() {
+        File var1 = new File(this.gameDirField.getText());
+        this.editor.getProfile().setGameDir(var1);
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java b/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
new file mode 100644
index 0000000..e61b076
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
@@ -0,0 +1,154 @@
+package net.minecraft.launcher.ui.popups.profile;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import javax.swing.BorderFactory;
+import javax.swing.JCheckBox;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+
+public class ProfileJavaPanel extends JPanel {
+    private final ProfileEditorPopup editor;
+    private final JCheckBox javaPathCustom = new JCheckBox("Executable:");
+    private final JTextField javaPathField = new JTextField();
+    private final JCheckBox javaArgsCustom = new JCheckBox("JVM Arguments:");
+    private final JTextField javaArgsField = new JTextField();
+
+    public ProfileJavaPanel(ProfileEditorPopup var1) {
+        this.editor = var1;
+        this.setLayout(new GridBagLayout());
+        this.setBorder(BorderFactory.createTitledBorder("Java Settings (Advanced)"));
+        this.createInterface();
+        this.fillDefaultValues();
+        this.addEventHandlers();
+    }
+
+    protected void createInterface() {
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.insets = new Insets(2, 2, 2, 2);
+        var1.anchor = 17;
+        var1.gridy = 0;
+        this.add(this.javaPathCustom, var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.javaPathField, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        this.add(this.javaArgsCustom, var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.javaArgsField, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+    }
+
+    protected void fillDefaultValues() {
+        String var1 = this.editor.getProfile().getJavaPath();
+        if (var1 != null) {
+            this.javaPathCustom.setSelected(true);
+            this.javaPathField.setText(var1);
+        } else {
+            this.javaPathCustom.setSelected(false);
+            this.javaPathField.setText(OperatingSystem.getCurrentPlatform().getJavaDir());
+        }
+
+        this.updateJavaPathState();
+        String var2 = this.editor.getProfile().getJavaArgs();
+        if (var2 != null) {
+            this.javaArgsCustom.setSelected(true);
+            this.javaArgsField.setText(var2);
+        } else {
+            this.javaArgsCustom.setSelected(false);
+            this.javaArgsField.setText("-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M");
+        }
+
+        this.updateJavaArgsState();
+    }
+
+    protected void addEventHandlers() {
+        this.javaPathCustom.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileJavaPanel.this.updateJavaPathState();
+            }
+        });
+        this.javaPathField.getDocument().addDocumentListener(new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaPath();
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaPath();
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaPath();
+            }
+        });
+        this.javaArgsCustom.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileJavaPanel.this.updateJavaArgsState();
+            }
+        });
+        this.javaArgsField.getDocument().addDocumentListener(new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaArgs();
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaArgs();
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+                ProfileJavaPanel.this.updateJavaArgs();
+            }
+        });
+    }
+
+    private void updateJavaPath() {
+        if (this.javaPathCustom.isSelected()) {
+            this.editor.getProfile().setJavaDir(this.javaPathField.getText());
+        } else {
+            this.editor.getProfile().setJavaDir((String)null);
+        }
+
+    }
+
+    private void updateJavaPathState() {
+        if (this.javaPathCustom.isSelected()) {
+            this.javaPathField.setEnabled(true);
+            this.editor.getProfile().setJavaDir(this.javaPathField.getText());
+        } else {
+            this.javaPathField.setEnabled(false);
+            this.editor.getProfile().setJavaDir((String)null);
+        }
+
+    }
+
+    private void updateJavaArgs() {
+        if (this.javaArgsCustom.isSelected()) {
+            this.editor.getProfile().setJavaArgs(this.javaArgsField.getText());
+        } else {
+            this.editor.getProfile().setJavaArgs((String)null);
+        }
+
+    }
+
+    private void updateJavaArgsState() {
+        if (this.javaArgsCustom.isSelected()) {
+            this.javaArgsField.setEnabled(true);
+            this.editor.getProfile().setJavaArgs(this.javaArgsField.getText());
+        } else {
+            this.javaArgsField.setEnabled(false);
+            this.editor.getProfile().setJavaArgs((String)null);
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java b/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
new file mode 100644
index 0000000..eec04bd
--- /dev/null
+++ b/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
@@ -0,0 +1,229 @@
+package net.minecraft.launcher.ui.popups.profile;
+
+import com.google.common.collect.Sets;
+import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.updater.VersionManager;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.versions.Version;
+import java.awt.Component;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import javax.swing.BorderFactory;
+import javax.swing.JCheckBox;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JList;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.SwingUtilities;
+import javax.swing.plaf.basic.BasicComboBoxRenderer;
+import net.minecraft.launcher.SwingUserInterface;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.profile.Profile;
+
+public class ProfileVersionPanel extends JPanel implements RefreshedVersionsListener {
+    private final ProfileEditorPopup editor;
+    private final JComboBox versionList = new JComboBox();
+    private final List<ProfileVersionPanel.ReleaseTypeCheckBox> customVersionTypes = new ArrayList();
+
+    public ProfileVersionPanel(ProfileEditorPopup var1) {
+        this.editor = var1;
+        this.setLayout(new GridBagLayout());
+        this.setBorder(BorderFactory.createTitledBorder("Version Selection"));
+        this.createInterface();
+        this.addEventHandlers();
+        List var2 = var1.getMinecraftLauncher().getLauncher().getVersionManager().getVersions(var1.getProfile().getVersionFilter());
+        if (var2.isEmpty()) {
+            var1.getMinecraftLauncher().getLauncher().getVersionManager().addRefreshedVersionsListener(this);
+        } else {
+            this.populateVersions(var2);
+        }
+
+    }
+
+    protected void createInterface() {
+        GridBagConstraints var1 = new GridBagConstraints();
+        var1.insets = new Insets(2, 2, 2, 2);
+        var1.anchor = 17;
+        var1.gridy = 0;
+        MinecraftReleaseType[] var2 = MinecraftReleaseType.values();
+        int var3 = var2.length;
+
+        for(int var4 = 0; var4 < var3; ++var4) {
+            MinecraftReleaseType var5 = var2[var4];
+            if (var5.getDescription() != null) {
+                ProfileVersionPanel.ReleaseTypeCheckBox var6 = new ProfileVersionPanel.ReleaseTypeCheckBox(var5);
+                var6.setSelected(this.editor.getProfile().getVersionFilter().getTypes().contains(var5));
+                this.customVersionTypes.add(var6);
+                var1.fill = 2;
+                var1.weightx = 1.0D;
+                var1.gridwidth = 0;
+                this.add(var6, var1);
+                var1.gridwidth = 1;
+                var1.weightx = 0.0D;
+                var1.fill = 0;
+                ++var1.gridy;
+            }
+        }
+
+        this.add(new JLabel("Use version:"), var1);
+        var1.fill = 2;
+        var1.weightx = 1.0D;
+        this.add(this.versionList, var1);
+        var1.weightx = 0.0D;
+        var1.fill = 0;
+        ++var1.gridy;
+        this.versionList.setRenderer(new ProfileVersionPanel.VersionListRenderer());
+    }
+
+    protected void addEventHandlers() {
+        this.versionList.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent var1) {
+                ProfileVersionPanel.this.updateVersionSelection();
+            }
+        });
+        Iterator var1 = this.customVersionTypes.iterator();
+
+        while(var1.hasNext()) {
+            final ProfileVersionPanel.ReleaseTypeCheckBox var2 = (ProfileVersionPanel.ReleaseTypeCheckBox)var1.next();
+            var2.addItemListener(new ItemListener() {
+                private boolean isUpdating = false;
+
+                public void itemStateChanged(ItemEvent var1) {
+                    if (!this.isUpdating) {
+                        if (var1.getStateChange() == 1 && var2.getType().getPopupWarning() != null) {
+                            int var2x = JOptionPane.showConfirmDialog(((SwingUserInterface)ProfileVersionPanel.this.editor.getMinecraftLauncher().getUserInterface()).getFrame(), var2.getType().getPopupWarning() + "\n\nAre you sure you want to continue?");
+                            this.isUpdating = true;
+                            if (var2x == 0) {
+                                var2.setSelected(true);
+                                ProfileVersionPanel.this.updateCustomVersionFilter();
+                            } else {
+                                var2.setSelected(false);
+                            }
+
+                            this.isUpdating = false;
+                        } else {
+                            ProfileVersionPanel.this.updateCustomVersionFilter();
+                        }
+
+                    }
+                }
+            });
+        }
+
+    }
+
+    private void updateCustomVersionFilter() {
+        Profile var1 = this.editor.getProfile();
+        HashSet var2 = Sets.newHashSet(Profile.DEFAULT_RELEASE_TYPES);
+        Iterator var3 = this.customVersionTypes.iterator();
+
+        while(var3.hasNext()) {
+            ProfileVersionPanel.ReleaseTypeCheckBox var4 = (ProfileVersionPanel.ReleaseTypeCheckBox)var3.next();
+            if (var4.isSelected()) {
+                var2.add(var4.getType());
+            } else {
+                var2.remove(var4.getType());
+            }
+        }
+
+        if (var2.equals(Profile.DEFAULT_RELEASE_TYPES)) {
+            var1.setAllowedReleaseTypes((Set)null);
+        } else {
+            var1.setAllowedReleaseTypes(var2);
+        }
+
+        this.populateVersions(this.editor.getMinecraftLauncher().getLauncher().getVersionManager().getVersions(this.editor.getProfile().getVersionFilter()));
+        this.editor.getMinecraftLauncher().getLauncher().getVersionManager().removeRefreshedVersionsListener(this);
+    }
+
+    private void updateVersionSelection() {
+        Object var1 = this.versionList.getSelectedItem();
+        if (var1 instanceof VersionSyncInfo) {
+            Version var2 = ((VersionSyncInfo)var1).getLatestVersion();
+            this.editor.getProfile().setLastVersionId(var2.getId());
+        } else {
+            this.editor.getProfile().setLastVersionId((String)null);
+        }
+
+    }
+
+    private void populateVersions(List<VersionSyncInfo> var1) {
+        String var2 = this.editor.getProfile().getLastVersionId();
+        VersionSyncInfo var3 = null;
+        this.versionList.removeAllItems();
+        this.versionList.addItem("Use Latest Version");
+
+        VersionSyncInfo var5;
+        for(Iterator var4 = var1.iterator(); var4.hasNext(); this.versionList.addItem(var5)) {
+            var5 = (VersionSyncInfo)var4.next();
+            if (var5.getLatestVersion().getId().equals(var2)) {
+                var3 = var5;
+            }
+        }
+
+        if (var3 == null && !var1.isEmpty()) {
+            this.versionList.setSelectedIndex(0);
+        } else {
+            this.versionList.setSelectedItem(var3);
+        }
+
+    }
+
+    public void onVersionsRefreshed(final VersionManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                List var1x = var1.getVersions(ProfileVersionPanel.this.editor.getProfile().getVersionFilter());
+                ProfileVersionPanel.this.populateVersions(var1x);
+                ProfileVersionPanel.this.editor.getMinecraftLauncher().getLauncher().getVersionManager().removeRefreshedVersionsListener(ProfileVersionPanel.this);
+            }
+        });
+    }
+
+    private static class ReleaseTypeCheckBox extends JCheckBox {
+        private final MinecraftReleaseType type;
+
+        private ReleaseTypeCheckBox(MinecraftReleaseType var1) {
+            super(var1.getDescription());
+            this.type = var1;
+        }
+
+        public MinecraftReleaseType getType() {
+            return this.type;
+        }
+
+        // $FF: synthetic method
+        ReleaseTypeCheckBox(MinecraftReleaseType var1, Object var2) {
+            this(var1);
+        }
+    }
+
+    private static class VersionListRenderer extends BasicComboBoxRenderer {
+        private VersionListRenderer() {
+        }
+
+        public Component getListCellRendererComponent(JList var1, Object var2, int var3, boolean var4, boolean var5) {
+            if (var2 instanceof VersionSyncInfo) {
+                VersionSyncInfo var6 = (VersionSyncInfo)var2;
+                Version var7 = var6.getLatestVersion();
+                var2 = String.format("%s %s", var7.getType().getName(), var7.getId());
+            }
+
+            super.getListCellRendererComponent(var1, var2, var3, var4, var5);
+            return this;
+        }
+
+        // $FF: synthetic method
+        VersionListRenderer(Object var1) {
+            this();
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/ConsoleTab.java b/net/minecraft/launcher/ui/tabs/ConsoleTab.java
new file mode 100644
index 0000000..2ecd9bc
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/ConsoleTab.java
@@ -0,0 +1,90 @@
+package net.minecraft.launcher.ui.tabs;
+
+import com.mojang.util.QueueLogAppender;
+import java.awt.Font;
+import java.awt.Insets;
+import java.awt.Toolkit;
+import java.awt.datatransfer.ClipboardOwner;
+import java.awt.datatransfer.StringSelection;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import javax.swing.JMenuItem;
+import javax.swing.JPopupMenu;
+import javax.swing.JScrollBar;
+import javax.swing.JScrollPane;
+import javax.swing.JTextArea;
+import javax.swing.SwingUtilities;
+import javax.swing.text.AttributeSet;
+import javax.swing.text.BadLocationException;
+import javax.swing.text.Document;
+import net.minecraft.launcher.Launcher;
+
+public class ConsoleTab extends JScrollPane {
+    private static final Font MONOSPACED = new Font("Monospaced", 0, 12);
+    private final JTextArea console = new JTextArea();
+    private final JPopupMenu popupMenu = new JPopupMenu();
+    private final JMenuItem copyTextButton = new JMenuItem("Copy All Text");
+    private final Launcher minecraftLauncher;
+
+    public ConsoleTab(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.popupMenu.add(this.copyTextButton);
+        this.console.setComponentPopupMenu(this.popupMenu);
+        this.copyTextButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                try {
+                    StringSelection var2 = new StringSelection(ConsoleTab.this.console.getText());
+                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(var2, (ClipboardOwner)null);
+                } catch (Exception var3) {
+                }
+
+            }
+        });
+        this.console.setFont(MONOSPACED);
+        this.console.setEditable(false);
+        this.console.setMargin((Insets)null);
+        this.setViewportView(this.console);
+        Thread var2 = new Thread(new Runnable() {
+            public void run() {
+                String var1;
+                while((var1 = QueueLogAppender.getNextLogEvent("DevelopmentConsole")) != null) {
+                    ConsoleTab.this.print(var1);
+                }
+
+            }
+        });
+        var2.setDaemon(true);
+        var2.start();
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void print(final String var1) {
+        if (!SwingUtilities.isEventDispatchThread()) {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    ConsoleTab.this.print(var1);
+                }
+            });
+        } else {
+            Document var2 = this.console.getDocument();
+            JScrollBar var3 = this.getVerticalScrollBar();
+            boolean var4 = false;
+            if (this.getViewport().getView() == this.console) {
+                var4 = (double)var3.getValue() + var3.getSize().getHeight() + (double)(MONOSPACED.getSize() * 4) > (double)var3.getMaximum();
+            }
+
+            try {
+                var2.insertString(var2.getLength(), var1, (AttributeSet)null);
+            } catch (BadLocationException var6) {
+            }
+
+            if (var4) {
+                var3.setValue(Integer.MAX_VALUE);
+            }
+
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/CrashReportTab.java b/net/minecraft/launcher/ui/tabs/CrashReportTab.java
new file mode 100644
index 0000000..701f313
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/CrashReportTab.java
@@ -0,0 +1,203 @@
+package net.minecraft.launcher.ui.tabs;
+
+import com.mojang.launcher.Http;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.versions.CompleteVersion;
+import java.awt.BorderLayout;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import javax.swing.Icon;
+import javax.swing.JButton;
+import javax.swing.JEditorPane;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import net.minecraft.hopper.HopperService;
+import net.minecraft.hopper.PublishResponse;
+import net.minecraft.hopper.SubmitResponse;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class CrashReportTab extends JPanel {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final Launcher minecraftLauncher;
+    private final CompleteVersion version;
+    private final File reportFile;
+    private final String report;
+    private final JEditorPane reportEditor = new JEditorPane();
+    private final JScrollPane scrollPane;
+    private final CrashReportTab.CrashInfoPane crashInfoPane;
+    private final boolean isModded;
+    private SubmitResponse hopperServiceResponse;
+
+    public CrashReportTab(final Launcher var1, final CompleteVersion var2, File var3, final String var4) {
+        super(true);
+        this.scrollPane = new JScrollPane(this.reportEditor);
+        this.hopperServiceResponse = null;
+        this.minecraftLauncher = var1;
+        this.version = var2;
+        this.reportFile = var3;
+        this.report = var4;
+        this.crashInfoPane = new CrashReportTab.CrashInfoPane(var1);
+        this.isModded = !var4.contains("Is Modded: Probably not") && !var4.contains("Is Modded: Unknown");
+        this.setLayout(new BorderLayout());
+        this.createInterface();
+        if (var1.getProfileManager().getSelectedProfile().getUseHopperCrashService()) {
+            var1.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
+                public void run() {
+                    try {
+                        HashMap var1x = new HashMap();
+                        var1x.put("launcher.version", LauncherConstants.getVersionName());
+                        var1x.put("launcher.title", var1.getUserInterface().getTitle());
+                        var1x.put("bootstrap.version", String.valueOf(var1.getBootstrapVersion()));
+                        CrashReportTab.this.hopperServiceResponse = HopperService.submitReport(var1.getLauncher().getProxy(), var4, "Minecraft", var2.getId(), var1x);
+                        CrashReportTab.LOGGER.info("Reported crash to Mojang (ID " + CrashReportTab.this.hopperServiceResponse.getReport().getId() + ")");
+                        if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
+                            CrashReportTab.this.showKnownProblemPopup();
+                        } else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
+                            CrashReportTab.this.showPublishReportPrompt();
+                        }
+                    } catch (IOException var2x) {
+                        CrashReportTab.LOGGER.error("Couldn't report crash to Mojang", var2x);
+                    }
+
+                }
+            });
+        }
+
+    }
+
+    private void showPublishReportPrompt() {
+        String[] var1 = new String[]{"Publish Crash Report", "Cancel"};
+        JLabel var2 = new JLabel();
+        var2.setText("<html><p>Sorry, but it looks like the game crashed and we don't know why.</p><p>Would you mind publishing this report so that " + (this.isModded ? "the mod authors" : "Mojang") + " can fix it?</p></html>");
+        int var3 = JOptionPane.showOptionDialog(this, var2, "Uhoh, something went wrong!", 0, 1, (Icon)null, var1, var1[0]);
+        if (var3 == 0) {
+            try {
+                PublishResponse var4 = HopperService.publishReport(this.minecraftLauncher.getLauncher().getProxy(), this.hopperServiceResponse.getReport());
+            } catch (IOException var5) {
+                LOGGER.error("Couldn't publish report " + this.hopperServiceResponse.getReport().getId(), var5);
+            }
+        }
+
+    }
+
+    private void showKnownProblemPopup() {
+        if (this.hopperServiceResponse.getProblem().getUrl() == null) {
+            JOptionPane.showMessageDialog(this, this.hopperServiceResponse.getProblem().getDescription(), this.hopperServiceResponse.getProblem().getTitle(), 1);
+        } else {
+            String[] var1 = new String[]{"Fix The Problem", "Cancel"};
+            int var2 = JOptionPane.showOptionDialog(this, this.hopperServiceResponse.getProblem().getDescription(), this.hopperServiceResponse.getProblem().getTitle(), 0, 1, (Icon)null, var1, var1[0]);
+            if (var2 == 0) {
+                try {
+                    OperatingSystem.openLink(new URI(this.hopperServiceResponse.getProblem().getUrl()));
+                } catch (URISyntaxException var4) {
+                    LOGGER.error("Couldn't open help page ( " + this.hopperServiceResponse.getProblem().getUrl() + "  ) for crash", var4);
+                }
+            }
+        }
+
+    }
+
+    protected void createInterface() {
+        this.add(this.crashInfoPane, "North");
+        this.add(this.scrollPane, "Center");
+        this.reportEditor.setText(this.report);
+        this.crashInfoPane.createInterface();
+    }
+
+    private class CrashInfoPane extends JPanel implements ActionListener {
+        public static final String INFO_NORMAL = "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>Using magic and love, we've managed to gather some details about the crash and we will investigate this as soon as we can.</p><p>You can see the full report below.</p></div></html>";
+        public static final String INFO_MODDED = "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>We think your game may be modded, and as such we can't accept this crash report.</p><p>However, if you do indeed use mods, please send this to the mod authors to take a look at!</p></div></html>";
+        private final JButton submitButton = new JButton("Report to Mojang");
+        private final JButton openFileButton = new JButton("Open report file");
+
+        protected CrashInfoPane(Launcher var2) {
+            this.submitButton.addActionListener(this);
+            this.openFileButton.addActionListener(this);
+        }
+
+        protected void createInterface() {
+            this.setLayout(new GridBagLayout());
+            GridBagConstraints var1 = new GridBagConstraints();
+            var1.anchor = 13;
+            var1.fill = 2;
+            var1.insets = new Insets(2, 2, 2, 2);
+            var1.gridx = 1;
+            this.add(this.submitButton, var1);
+            var1.gridy = 1;
+            this.add(this.openFileButton, var1);
+            var1.gridx = 0;
+            var1.gridy = 0;
+            var1.weightx = 1.0D;
+            var1.weighty = 1.0D;
+            var1.gridheight = 2;
+            this.add(new JLabel(CrashReportTab.this.isModded ? "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>We think your game may be modded, and as such we can't accept this crash report.</p><p>However, if you do indeed use mods, please send this to the mod authors to take a look at!</p></div></html>" : "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>Using magic and love, we've managed to gather some details about the crash and we will investigate this as soon as we can.</p><p>You can see the full report below.</p></div></html>"), var1);
+            if (CrashReportTab.this.isModded) {
+                this.submitButton.setEnabled(false);
+            }
+
+        }
+
+        public void actionPerformed(ActionEvent var1) {
+            if (var1.getSource() == this.submitButton) {
+                if (CrashReportTab.this.hopperServiceResponse != null) {
+                    if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
+                        CrashReportTab.this.showKnownProblemPopup();
+                    } else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
+                        CrashReportTab.this.showPublishReportPrompt();
+                    }
+                } else {
+                    try {
+                        HashMap var2 = new HashMap();
+                        var2.put("pid", 10400);
+                        var2.put("issuetype", 1);
+                        var2.put("description", "Put the summary of the bug you're having here\n\n*What I expected to happen was...:*\nDescribe what you thought should happen here\n\n*What actually happened was...:*\nDescribe what happened here\n\n*Steps to Reproduce:*\n1. Put a step by step guide on how to trigger the bug here\n2. ...\n3. ...");
+                        var2.put("environment", this.buildEnvironmentInfo());
+                        OperatingSystem.openLink(URI.create("https://bugs.mojang.com/secure/CreateIssueDetails!init.jspa?" + Http.buildQuery(var2)));
+                    } catch (Throwable var3) {
+                        CrashReportTab.LOGGER.error("Couldn't open bugtracker", var3);
+                    }
+                }
+            } else if (var1.getSource() == this.openFileButton) {
+                OperatingSystem.openLink(CrashReportTab.this.reportFile.toURI());
+            }
+
+        }
+
+        private String buildEnvironmentInfo() {
+            StringBuilder var1 = new StringBuilder();
+            var1.append("OS: ");
+            var1.append(System.getProperty("os.name"));
+            var1.append(" (ver ");
+            var1.append(System.getProperty("os.version"));
+            var1.append(", arch ");
+            var1.append(System.getProperty("os.arch"));
+            var1.append(")\nJava: ");
+            var1.append(System.getProperty("java.version"));
+            var1.append(" (by ");
+            var1.append(System.getProperty("java.vendor"));
+            var1.append(")\nLauncher: ");
+            var1.append(CrashReportTab.this.minecraftLauncher.getUserInterface().getTitle());
+            var1.append(" (bootstrap ");
+            var1.append(CrashReportTab.this.minecraftLauncher.getBootstrapVersion());
+            var1.append(")\nMinecraft: ");
+            var1.append(CrashReportTab.this.version.getId());
+            var1.append(" (updated ");
+            var1.append(CrashReportTab.this.version.getUpdatedTime());
+            var1.append(")");
+            return var1.toString();
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/GameOutputTab.java b/net/minecraft/launcher/ui/tabs/GameOutputTab.java
new file mode 100644
index 0000000..67d9516
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/GameOutputTab.java
@@ -0,0 +1,121 @@
+package net.minecraft.launcher.ui.tabs;
+
+import com.mojang.launcher.events.GameOutputLogProcessor;
+import com.mojang.launcher.game.process.GameProcess;
+import java.awt.Font;
+import java.awt.Insets;
+import java.awt.Toolkit;
+import java.awt.datatransfer.ClipboardOwner;
+import java.awt.datatransfer.StringSelection;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import javax.swing.JMenuItem;
+import javax.swing.JPopupMenu;
+import javax.swing.JScrollBar;
+import javax.swing.JScrollPane;
+import javax.swing.JTextArea;
+import javax.swing.SwingUtilities;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+import javax.swing.text.AttributeSet;
+import javax.swing.text.BadLocationException;
+import javax.swing.text.Document;
+import javax.swing.text.Element;
+import net.minecraft.launcher.Launcher;
+
+public class GameOutputTab extends JScrollPane implements GameOutputLogProcessor {
+    private static final Font MONOSPACED = new Font("Monospaced", 0, 12);
+    private static final int MAX_LINE_COUNT = 1000;
+    private final JTextArea console = new JTextArea();
+    private final JPopupMenu popupMenu = new JPopupMenu();
+    private final JMenuItem copyTextButton = new JMenuItem("Copy All Text");
+    private final Launcher minecraftLauncher;
+    private boolean alreadyCensored = false;
+
+    public GameOutputTab(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.popupMenu.add(this.copyTextButton);
+        this.console.setComponentPopupMenu(this.popupMenu);
+        this.copyTextButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                try {
+                    StringSelection var2 = new StringSelection(GameOutputTab.this.console.getText());
+                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(var2, (ClipboardOwner)null);
+                } catch (Exception var3) {
+                }
+
+            }
+        });
+        this.console.setFont(MONOSPACED);
+        this.console.setEditable(false);
+        this.console.setMargin((Insets)null);
+        this.setViewportView(this.console);
+        this.console.getDocument().addDocumentListener(new DocumentListener() {
+            public void insertUpdate(DocumentEvent var1) {
+                SwingUtilities.invokeLater(new Runnable() {
+                    public void run() {
+                        Document var1 = GameOutputTab.this.console.getDocument();
+                        Element var2 = var1.getDefaultRootElement();
+
+                        while(var2.getElementCount() > 1001) {
+                            try {
+                                var1.remove(0, var2.getElement(0).getEndOffset());
+                            } catch (BadLocationException var4) {
+                            }
+                        }
+
+                    }
+                });
+            }
+
+            public void removeUpdate(DocumentEvent var1) {
+            }
+
+            public void changedUpdate(DocumentEvent var1) {
+            }
+        });
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void print(final String var1) {
+        if (!SwingUtilities.isEventDispatchThread()) {
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    GameOutputTab.this.print(var1);
+                }
+            });
+        } else {
+            Document var2 = this.console.getDocument();
+            JScrollBar var3 = this.getVerticalScrollBar();
+            boolean var4 = false;
+            if (this.getViewport().getView() == this.console) {
+                var4 = (double)var3.getValue() + var3.getSize().getHeight() + (double)(MONOSPACED.getSize() * 4) > (double)var3.getMaximum();
+            }
+
+            try {
+                var2.insertString(var2.getLength(), var1, (AttributeSet)null);
+            } catch (BadLocationException var6) {
+            }
+
+            if (var4) {
+                var3.setValue(Integer.MAX_VALUE);
+            }
+
+        }
+    }
+
+    public void onGameOutput(GameProcess var1, String var2) {
+        if (!this.alreadyCensored) {
+            int var3 = var2.indexOf("(Session ID is");
+            if (var3 > 0) {
+                this.alreadyCensored = true;
+                var2 = var2.substring(0, var3) + "(Session ID is <censored>)";
+            }
+        }
+
+        this.print(var2 + "\n");
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java b/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
new file mode 100644
index 0000000..fe39640
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
@@ -0,0 +1,70 @@
+package net.minecraft.launcher.ui.tabs;
+
+import java.awt.Component;
+import javax.swing.JTabbedPane;
+import net.minecraft.launcher.Launcher;
+
+public class LauncherTabPanel extends JTabbedPane {
+    private final Launcher minecraftLauncher;
+    private final WebsiteTab blog;
+    private final ConsoleTab console;
+    private CrashReportTab crashReportTab;
+
+    public LauncherTabPanel(Launcher var1) {
+        super(1);
+        this.minecraftLauncher = var1;
+        this.blog = new WebsiteTab(var1);
+        this.console = new ConsoleTab(var1);
+        this.createInterface();
+    }
+
+    protected void createInterface() {
+        this.addTab("Update Notes", this.blog);
+        this.addTab("Launcher Log", this.console);
+        this.addTab("Profile Editor", new ProfileListTab(this.minecraftLauncher));
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public WebsiteTab getBlog() {
+        return this.blog;
+    }
+
+    public ConsoleTab getConsole() {
+        return this.console;
+    }
+
+    public void showConsole() {
+        this.setSelectedComponent(this.console);
+    }
+
+    public void setCrashReport(CrashReportTab var1) {
+        if (this.crashReportTab != null) {
+            this.removeTab((Component)this.crashReportTab);
+        }
+
+        this.crashReportTab = var1;
+        this.addTab("Crash Report", this.crashReportTab);
+        this.setSelectedComponent(var1);
+    }
+
+    protected void removeTab(Component var1) {
+        for(int var2 = 0; var2 < this.getTabCount(); ++var2) {
+            if (this.getTabComponentAt(var2) == var1) {
+                this.removeTabAt(var2);
+                break;
+            }
+        }
+
+    }
+
+    public void removeTab(String var1) {
+        int var2 = this.indexOfTab(var1);
+        if (var2 > -1) {
+            this.removeTabAt(var2);
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/ProfileListTab.java b/net/minecraft/launcher/ui/tabs/ProfileListTab.java
new file mode 100644
index 0000000..c0ba865
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/ProfileListTab.java
@@ -0,0 +1,252 @@
+package net.minecraft.launcher.ui.tabs;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import javax.swing.Icon;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPopupMenu;
+import javax.swing.JScrollPane;
+import javax.swing.JTable;
+import javax.swing.SwingUtilities;
+import javax.swing.event.PopupMenuEvent;
+import javax.swing.event.PopupMenuListener;
+import javax.swing.table.AbstractTableModel;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.SwingUserInterface;
+import net.minecraft.launcher.profile.AuthenticationDatabase;
+import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.profile.ProfileManager;
+import net.minecraft.launcher.profile.RefreshedProfilesListener;
+import net.minecraft.launcher.ui.popups.profile.ProfileEditorPopup;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ProfileListTab extends JScrollPane implements RefreshedProfilesListener {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final int COLUMN_NAME = 0;
+    private static final int COLUMN_VERSION = 1;
+    private static final int NUM_COLUMNS = 2;
+    private final Launcher minecraftLauncher;
+    private final ProfileListTab.ProfileTableModel dataModel = new ProfileListTab.ProfileTableModel();
+    private final JTable table;
+    private final JPopupMenu popupMenu;
+    private final JMenuItem addProfileButton;
+    private final JMenuItem copyProfileButton;
+    private final JMenuItem deleteProfileButton;
+    private final JMenuItem browseGameFolder;
+
+    public ProfileListTab(Launcher var1) {
+        this.table = new JTable(this.dataModel);
+        this.popupMenu = new JPopupMenu();
+        this.addProfileButton = new JMenuItem("Add Profile");
+        this.copyProfileButton = new JMenuItem("Copy Profile");
+        this.deleteProfileButton = new JMenuItem("Delete Profile");
+        this.browseGameFolder = new JMenuItem("Open Game Folder");
+        this.minecraftLauncher = var1;
+        this.setViewportView(this.table);
+        this.createInterface();
+        var1.getProfileManager().addRefreshedProfilesListener(this);
+    }
+
+    protected void createInterface() {
+        this.popupMenu.add(this.addProfileButton);
+        this.popupMenu.add(this.copyProfileButton);
+        this.popupMenu.add(this.deleteProfileButton);
+        this.popupMenu.add(this.browseGameFolder);
+        this.table.setFillsViewportHeight(true);
+        this.table.setSelectionMode(0);
+        this.popupMenu.addPopupMenuListener(new PopupMenuListener() {
+            public void popupMenuWillBecomeVisible(PopupMenuEvent var1) {
+                int[] var2 = ProfileListTab.this.table.getSelectedRows();
+                boolean var3 = var2 != null && var2.length > 0;
+                ProfileListTab.this.copyProfileButton.setEnabled(var3);
+                ProfileListTab.this.deleteProfileButton.setEnabled(var3);
+                ProfileListTab.this.browseGameFolder.setEnabled(var3);
+            }
+
+            public void popupMenuWillBecomeInvisible(PopupMenuEvent var1) {
+            }
+
+            public void popupMenuCanceled(PopupMenuEvent var1) {
+            }
+        });
+        this.addProfileButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                Profile var2 = new Profile();
+                var2.setName("New Profile");
+
+                while(ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var2.getName())) {
+                    var2.setName(var2.getName() + "_");
+                }
+
+                ProfileEditorPopup.showEditProfileDialog(ProfileListTab.this.getMinecraftLauncher(), var2);
+            }
+        });
+        this.copyProfileButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                int var2 = ProfileListTab.this.table.getSelectedRow();
+                if (var2 >= 0 && var2 < ProfileListTab.this.table.getRowCount()) {
+                    Profile var3 = (Profile)ProfileListTab.this.dataModel.profiles.get(var2);
+                    Profile var4 = new Profile(var3);
+                    var4.setName("Copy of " + var3.getName());
+
+                    while(ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var4.getName())) {
+                        var4.setName(var4.getName() + "_");
+                    }
+
+                    ProfileEditorPopup.showEditProfileDialog(ProfileListTab.this.getMinecraftLauncher(), var4);
+                }
+            }
+        });
+        this.browseGameFolder.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                int var2 = ProfileListTab.this.table.getSelectedRow();
+                if (var2 >= 0 && var2 < ProfileListTab.this.table.getRowCount()) {
+                    Profile var3 = (Profile)ProfileListTab.this.dataModel.profiles.get(var2);
+                    OperatingSystem.openFolder(var3.getGameDir() == null ? ProfileListTab.this.minecraftLauncher.getLauncher().getWorkingDirectory() : var3.getGameDir());
+                }
+            }
+        });
+        this.deleteProfileButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent var1) {
+                int var2 = ProfileListTab.this.table.getSelectedRow();
+                if (var2 >= 0 && var2 < ProfileListTab.this.table.getRowCount()) {
+                    Profile var3 = (Profile)ProfileListTab.this.dataModel.profiles.get(var2);
+                    int var4 = JOptionPane.showOptionDialog(((SwingUserInterface)ProfileListTab.this.minecraftLauncher.getUserInterface()).getFrame(), "Are you sure you want to delete this profile?", "Profile Confirmation", 0, 2, (Icon)null, LauncherConstants.CONFIRM_PROFILE_DELETION_OPTIONS, LauncherConstants.CONFIRM_PROFILE_DELETION_OPTIONS[0]);
+                    if (var4 == 0) {
+                        ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().remove(var3.getName());
+
+                        try {
+                            ProfileListTab.this.minecraftLauncher.getProfileManager().saveProfiles();
+                            ProfileListTab.this.minecraftLauncher.getProfileManager().fireRefreshEvent();
+                        } catch (IOException var6) {
+                            ProfileListTab.LOGGER.error("Couldn't save profiles whilst deleting '" + var3.getName() + "'", var6);
+                        }
+                    }
+
+                }
+            }
+        });
+        this.table.addMouseListener(new MouseAdapter() {
+            public void mouseClicked(MouseEvent var1) {
+                if (var1.getClickCount() == 2) {
+                    int var2 = ProfileListTab.this.table.getSelectedRow();
+                    if (var2 >= 0 && var2 < ProfileListTab.this.dataModel.profiles.size()) {
+                        ProfileEditorPopup.showEditProfileDialog(ProfileListTab.this.getMinecraftLauncher(), (Profile)ProfileListTab.this.dataModel.profiles.get(var2));
+                    }
+                }
+
+            }
+
+            public void mouseReleased(MouseEvent var1) {
+                if (var1.isPopupTrigger() && var1.getComponent() instanceof JTable) {
+                    int var2 = ProfileListTab.this.table.rowAtPoint(var1.getPoint());
+                    if (var2 >= 0 && var2 < ProfileListTab.this.table.getRowCount()) {
+                        ProfileListTab.this.table.setRowSelectionInterval(var2, var2);
+                    } else {
+                        ProfileListTab.this.table.clearSelection();
+                    }
+
+                    ProfileListTab.this.popupMenu.show(var1.getComponent(), var1.getX(), var1.getY());
+                }
+
+            }
+
+            public void mousePressed(MouseEvent var1) {
+                if (var1.isPopupTrigger() && var1.getComponent() instanceof JTable) {
+                    int var2 = ProfileListTab.this.table.rowAtPoint(var1.getPoint());
+                    if (var2 >= 0 && var2 < ProfileListTab.this.table.getRowCount()) {
+                        ProfileListTab.this.table.setRowSelectionInterval(var2, var2);
+                    } else {
+                        ProfileListTab.this.table.clearSelection();
+                    }
+
+                    ProfileListTab.this.popupMenu.show(var1.getComponent(), var1.getX(), var1.getY());
+                }
+
+            }
+        });
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public void onProfilesRefreshed(final ProfileManager var1) {
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                ProfileListTab.this.dataModel.setProfiles(var1.getProfiles().values());
+            }
+        });
+    }
+
+    private class ProfileTableModel extends AbstractTableModel {
+        private final List<Profile> profiles;
+
+        private ProfileTableModel() {
+            this.profiles = new ArrayList();
+        }
+
+        public int getRowCount() {
+            return this.profiles.size();
+        }
+
+        public int getColumnCount() {
+            return 2;
+        }
+
+        public Class<?> getColumnClass(int var1) {
+            return String.class;
+        }
+
+        public String getColumnName(int var1) {
+            switch(var1) {
+            case 0:
+                return "Version name";
+            case 1:
+                return "Version";
+            default:
+                return super.getColumnName(var1);
+            }
+        }
+
+        public Object getValueAt(int var1, int var2) {
+            Profile var3 = (Profile)this.profiles.get(var1);
+            AuthenticationDatabase var4 = ProfileListTab.this.minecraftLauncher.getProfileManager().getAuthDatabase();
+            switch(var2) {
+            case 0:
+                return var3.getName();
+            case 1:
+                if (var3.getLastVersionId() == null) {
+                    return "(Latest version)";
+                }
+
+                return var3.getLastVersionId();
+            default:
+                return null;
+            }
+        }
+
+        public void setProfiles(Collection<Profile> var1) {
+            this.profiles.clear();
+            this.profiles.addAll(var1);
+            Collections.sort(this.profiles);
+            this.fireTableDataChanged();
+        }
+
+        // $FF: synthetic method
+        ProfileTableModel(Object var2) {
+            this();
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/WebsiteTab.java b/net/minecraft/launcher/ui/tabs/WebsiteTab.java
new file mode 100644
index 0000000..ebf0a73
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/WebsiteTab.java
@@ -0,0 +1,91 @@
+package net.minecraft.launcher.ui.tabs;
+
+import java.awt.BorderLayout;
+import java.awt.event.ComponentAdapter;
+import java.awt.event.ComponentEvent;
+import java.beans.IntrospectionException;
+import java.io.File;
+import java.lang.reflect.Method;
+import java.net.URL;
+import java.net.URLClassLoader;
+import javax.swing.JPanel;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.ui.tabs.website.Browser;
+import net.minecraft.launcher.ui.tabs.website.JFXBrowser;
+import net.minecraft.launcher.ui.tabs.website.LegacySwingBrowser;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class WebsiteTab extends JPanel {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final Browser browser = this.selectBrowser();
+    private final Launcher minecraftLauncher;
+
+    public WebsiteTab(Launcher var1) {
+        this.minecraftLauncher = var1;
+        this.setLayout(new BorderLayout());
+        this.add(this.browser.getComponent(), "Center");
+        this.browser.resize(this.getSize());
+        this.addComponentListener(new ComponentAdapter() {
+            public void componentResized(ComponentEvent var1) {
+                WebsiteTab.this.browser.resize(var1.getComponent().getSize());
+            }
+        });
+    }
+
+    private Browser selectBrowser() {
+        if (this.hasJFX()) {
+            LOGGER.info("JFX is already initialized");
+            return new JFXBrowser();
+        } else {
+            File var1 = new File(System.getProperty("java.home"), "lib/jfxrt.jar");
+            if (var1.isFile()) {
+                LOGGER.debug("Attempting to load {}...", new Object[]{var1});
+
+                try {
+                    addToSystemClassLoader(var1);
+                    LOGGER.info("JFX has been detected & successfully loaded");
+                    return new JFXBrowser();
+                } catch (Throwable var3) {
+                    LOGGER.debug("JFX has been detected but unsuccessfully loaded", var3);
+                    return new LegacySwingBrowser();
+                }
+            } else {
+                LOGGER.debug("JFX was not found at {}", new Object[]{var1});
+                return new LegacySwingBrowser();
+            }
+        }
+    }
+
+    public void setPage(String var1) {
+        this.browser.loadUrl(var1);
+    }
+
+    public Launcher getMinecraftLauncher() {
+        return this.minecraftLauncher;
+    }
+
+    public static void addToSystemClassLoader(File var0) throws IntrospectionException {
+        if (ClassLoader.getSystemClassLoader() instanceof URLClassLoader) {
+            URLClassLoader var1 = (URLClassLoader)ClassLoader.getSystemClassLoader();
+
+            try {
+                Method var2 = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
+                var2.setAccessible(true);
+                var2.invoke(var1, var0.toURI().toURL());
+            } catch (Throwable var3) {
+                LOGGER.warn("Couldn't add " + var0 + " to system classloader", var3);
+            }
+        }
+
+    }
+
+    public boolean hasJFX() {
+        try {
+            this.getClass().getClassLoader().loadClass("javafx.embed.swing.JFXPanel");
+            return true;
+        } catch (ClassNotFoundException var2) {
+            return false;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/website/Browser.java b/net/minecraft/launcher/ui/tabs/website/Browser.java
new file mode 100644
index 0000000..40971c7
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/website/Browser.java
@@ -0,0 +1,12 @@
+package net.minecraft.launcher.ui.tabs.website;
+
+import java.awt.Component;
+import java.awt.Dimension;
+
+public interface Browser {
+    void loadUrl(String var1);
+
+    Component getComponent();
+
+    void resize(Dimension var1);
+}
diff --git a/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java b/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
new file mode 100644
index 0000000..1d14455
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
@@ -0,0 +1,132 @@
+package net.minecraft.launcher.ui.tabs.website;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.net.URI;
+import javafx.application.Platform;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.concurrent.Worker.State;
+import javafx.embed.swing.JFXPanel;
+import javafx.scene.Group;
+import javafx.scene.Scene;
+import javafx.scene.web.WebEngine;
+import javafx.scene.web.WebView;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.events.Event;
+import org.w3c.dom.events.EventListener;
+import org.w3c.dom.events.EventTarget;
+
+public class JFXBrowser implements Browser {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final Object lock = new Object();
+    private final JFXPanel fxPanel = new JFXPanel();
+    private String urlToBrowseTo;
+    private Dimension size;
+    private WebView browser;
+    private WebEngine webEngine;
+
+    public JFXBrowser() {
+        Platform.runLater(new Runnable() {
+            public void run() {
+                Group var1 = new Group();
+                Scene var2 = new Scene(var1);
+                JFXBrowser.this.fxPanel.setScene(var2);
+                synchronized(JFXBrowser.this.lock) {
+                    JFXBrowser.this.browser = new WebView();
+                    JFXBrowser.this.browser.setContextMenuEnabled(false);
+                    if (JFXBrowser.this.size != null) {
+                        JFXBrowser.this.resize(JFXBrowser.this.size);
+                    }
+
+                    JFXBrowser.this.webEngine = JFXBrowser.this.browser.getEngine();
+                    JFXBrowser.this.webEngine.setJavaScriptEnabled(false);
+                    JFXBrowser.this.webEngine.getLoadWorker().stateProperty().addListener(new ChangeListener<State>() {
+                        public void changed(ObservableValue<? extends State> var1, State var2, State var3) {
+                            if (var3 == State.SUCCEEDED) {
+                                EventListener var4 = new EventListener() {
+                                    public void handleEvent(Event var1) {
+                                        if (var1.getTarget() instanceof Element) {
+                                            Element var2 = (Element)var1.getTarget();
+
+                                            String var3;
+                                            for(var3 = var2.getAttribute("href"); StringUtils.isEmpty(var3) && var2.getParentNode() instanceof Element; var3 = var2.getAttribute("href")) {
+                                                var2 = (Element)var2.getParentNode();
+                                            }
+
+                                            if (var3 != null && var3.length() > 0) {
+                                                try {
+                                                    OperatingSystem.openLink(new URI(var3));
+                                                } catch (Exception var5) {
+                                                    JFXBrowser.LOGGER.error("Unexpected exception opening link " + var3, var5);
+                                                }
+
+                                                var1.preventDefault();
+                                                var1.stopPropagation();
+                                            }
+                                        }
+
+                                    }
+                                };
+                                Document var5 = JFXBrowser.this.webEngine.getDocument();
+                                if (var5 != null) {
+                                    NodeList var6 = var5.getElementsByTagName("a");
+
+                                    for(int var7 = 0; var7 < var6.getLength(); ++var7) {
+                                        Node var8 = var6.item(var7);
+                                        if (var8 instanceof EventTarget) {
+                                            ((EventTarget)var8).addEventListener("click", var4, false);
+                                        }
+                                    }
+                                }
+                            }
+
+                        }
+                    });
+                    if (JFXBrowser.this.urlToBrowseTo != null) {
+                        JFXBrowser.this.loadUrl(JFXBrowser.this.urlToBrowseTo);
+                    }
+                }
+
+                var1.getChildren().add(JFXBrowser.this.browser);
+            }
+        });
+    }
+
+    public void loadUrl(final String var1) {
+        synchronized(this.lock) {
+            this.urlToBrowseTo = var1;
+            if (this.webEngine != null) {
+                Platform.runLater(new Runnable() {
+                    public void run() {
+                        JFXBrowser.this.webEngine.load(var1);
+                    }
+                });
+            }
+
+        }
+    }
+
+    public Component getComponent() {
+        return this.fxPanel;
+    }
+
+    public void resize(Dimension var1) {
+        synchronized(this.lock) {
+            this.size = var1;
+            if (this.browser != null) {
+                this.browser.setMinSize(var1.getWidth(), var1.getHeight());
+                this.browser.setMaxSize(var1.getWidth(), var1.getHeight());
+                this.browser.setPrefSize(var1.getWidth(), var1.getHeight());
+            }
+
+        }
+    }
+}
diff --git a/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java b/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
new file mode 100644
index 0000000..6d6b17c
--- /dev/null
+++ b/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
@@ -0,0 +1,65 @@
+package net.minecraft.launcher.ui.tabs.website;
+
+import com.mojang.launcher.OperatingSystem;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.Insets;
+import java.net.URL;
+import javax.swing.JScrollPane;
+import javax.swing.JTextPane;
+import javax.swing.event.HyperlinkEvent;
+import javax.swing.event.HyperlinkListener;
+import javax.swing.event.HyperlinkEvent.EventType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class LegacySwingBrowser implements Browser {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final JScrollPane scrollPane = new JScrollPane();
+    private final JTextPane browser = new JTextPane();
+
+    public LegacySwingBrowser() {
+        this.browser.setEditable(false);
+        this.browser.setMargin((Insets)null);
+        this.browser.setBackground(Color.DARK_GRAY);
+        this.browser.setContentType("text/html");
+        this.browser.setText("<html><body><font color=\"#808080\"><br><br><br><br><br><br><br><center><h1>Loading page..</h1></center></font></body></html>");
+        this.browser.addHyperlinkListener(new HyperlinkListener() {
+            public void hyperlinkUpdate(HyperlinkEvent var1) {
+                if (var1.getEventType() == EventType.ACTIVATED) {
+                    try {
+                        OperatingSystem.openLink(var1.getURL().toURI());
+                    } catch (Exception var3) {
+                        LegacySwingBrowser.LOGGER.error("Unexpected exception opening link " + var1.getURL(), var3);
+                    }
+                }
+
+            }
+        });
+        this.scrollPane.setViewportView(this.browser);
+    }
+
+    public void loadUrl(final String var1) {
+        Thread var2 = new Thread("Update website tab") {
+            public void run() {
+                try {
+                    LegacySwingBrowser.this.browser.setPage(new URL(var1));
+                } catch (Exception var2) {
+                    LegacySwingBrowser.LOGGER.error("Unexpected exception loading " + var1, var2);
+                    LegacySwingBrowser.this.browser.setText("<html><body><font color=\"#808080\"><br><br><br><br><br><br><br><center><h1>Failed to get page</h1><br>" + var2.toString() + "</center></font></body></html>");
+                }
+
+            }
+        };
+        var2.setDaemon(true);
+        var2.start();
+    }
+
+    public Component getComponent() {
+        return this.scrollPane;
+    }
+
+    public void resize(Dimension var1) {
+    }
+}
diff --git a/net/minecraft/launcher/updater/AbstractDownloadInfo.java b/net/minecraft/launcher/updater/AbstractDownloadInfo.java
new file mode 100644
index 0000000..9d33af2
--- /dev/null
+++ b/net/minecraft/launcher/updater/AbstractDownloadInfo.java
@@ -0,0 +1,14 @@
+package net.minecraft.launcher.updater;
+
+import java.net.URL;
+
+public abstract class AbstractDownloadInfo {
+    public AbstractDownloadInfo() {
+    }
+
+    abstract URL getUrl();
+
+    abstract String getSha1();
+
+    abstract int getSize();
+}
diff --git a/net/minecraft/launcher/updater/Argument.java b/net/minecraft/launcher/updater/Argument.java
new file mode 100644
index 0000000..528caf8
--- /dev/null
+++ b/net/minecraft/launcher/updater/Argument.java
@@ -0,0 +1,93 @@
+package net.minecraft.launcher.updater;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.mojang.launcher.game.process.GameProcessBuilder;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import net.minecraft.launcher.CompatibilityRule;
+import org.apache.commons.lang3.text.StrSubstitutor;
+
+public class Argument {
+    private final String[] value;
+    private final List<CompatibilityRule> compatibilityRules;
+
+    public Argument(String[] var1, List<CompatibilityRule> var2) {
+        this.value = var1;
+        this.compatibilityRules = var2;
+    }
+
+    public void apply(GameProcessBuilder var1, CompatibilityRule.FeatureMatcher var2, StrSubstitutor var3) {
+        if (this.appliesToCurrentEnvironment(var2)) {
+            for(int var4 = 0; var4 < this.value.length; ++var4) {
+                var1.withArguments(var3.replace(this.value[var4]));
+            }
+        }
+
+    }
+
+    public boolean appliesToCurrentEnvironment(CompatibilityRule.FeatureMatcher var1) {
+        if (this.compatibilityRules == null) {
+            return true;
+        } else {
+            CompatibilityRule.Action var2 = CompatibilityRule.Action.DISALLOW;
+            Iterator var3 = this.compatibilityRules.iterator();
+
+            while(var3.hasNext()) {
+                CompatibilityRule var4 = (CompatibilityRule)var3.next();
+                CompatibilityRule.Action var5 = var4.getAppliedAction(var1);
+                if (var5 != null) {
+                    var2 = var5;
+                }
+            }
+
+            return var2 == CompatibilityRule.Action.ALLOW;
+        }
+    }
+
+    public static class Serializer implements JsonDeserializer<Argument> {
+        public Serializer() {
+        }
+
+        public Argument deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            if (var1.isJsonPrimitive()) {
+                return new Argument(new String[]{var1.getAsString()}, (List)null);
+            } else if (!var1.isJsonObject()) {
+                throw new JsonParseException("Invalid argument, must be object or string");
+            } else {
+                JsonObject var4 = var1.getAsJsonObject();
+                JsonElement var5 = var4.get("value");
+                String[] var6;
+                if (var5.isJsonPrimitive()) {
+                    var6 = new String[]{var5.getAsString()};
+                } else {
+                    JsonArray var7 = var5.getAsJsonArray();
+                    var6 = new String[var7.size()];
+
+                    for(int var8 = 0; var8 < var7.size(); ++var8) {
+                        var6[var8] = var7.get(var8).getAsString();
+                    }
+                }
+
+                ArrayList var11 = new ArrayList();
+                if (var4.has("rules")) {
+                    JsonArray var12 = var4.getAsJsonArray("rules");
+                    Iterator var9 = var12.iterator();
+
+                    while(var9.hasNext()) {
+                        JsonElement var10 = (JsonElement)var9.next();
+                        var11.add((CompatibilityRule)var3.deserialize(var10, CompatibilityRule.class));
+                    }
+                }
+
+                return new Argument(var6, var11);
+            }
+        }
+    }
+}
diff --git a/net/minecraft/launcher/updater/ArgumentType.java b/net/minecraft/launcher/updater/ArgumentType.java
new file mode 100644
index 0000000..11aadc7
--- /dev/null
+++ b/net/minecraft/launcher/updater/ArgumentType.java
@@ -0,0 +1,9 @@
+package net.minecraft.launcher.updater;
+
+public enum ArgumentType {
+    JVM,
+    GAME;
+
+    private ArgumentType() {
+    }
+}
diff --git a/net/minecraft/launcher/updater/AssetIndexInfo.java b/net/minecraft/launcher/updater/AssetIndexInfo.java
new file mode 100644
index 0000000..f86b1fe
--- /dev/null
+++ b/net/minecraft/launcher/updater/AssetIndexInfo.java
@@ -0,0 +1,30 @@
+package net.minecraft.launcher.updater;
+
+import net.minecraft.launcher.LauncherConstants;
+
+public class AssetIndexInfo extends DownloadInfo {
+    protected long totalSize;
+    protected String id;
+    protected boolean known = true;
+
+    public AssetIndexInfo() {
+    }
+
+    public AssetIndexInfo(String var1) {
+        this.id = var1;
+        this.url = LauncherConstants.constantURL("https://s3.amazonaws.com/Minecraft.Download/indexes/" + var1 + ".json");
+        this.known = false;
+    }
+
+    public long getTotalSize() {
+        return this.totalSize;
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public boolean sizeAndHashKnown() {
+        return this.known;
+    }
+}
diff --git a/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
new file mode 100644
index 0000000..ad40fd8
--- /dev/null
+++ b/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -0,0 +1,432 @@
+package net.minecraft.launcher.updater;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.game.process.GameProcessBuilder;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.ReleaseType;
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.Proxy;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.EnumMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Map.Entry;
+import net.minecraft.launcher.CompatibilityRule;
+import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.profile.ProfileManager;
+import org.apache.commons.lang3.text.StrSubstitutor;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class CompleteMinecraftVersion implements CompleteVersion {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private String inheritsFrom;
+    private String id;
+    private Date time;
+    private Date releaseTime;
+    private ReleaseType type;
+    private String minecraftArguments;
+    private List<Library> libraries;
+    private String mainClass;
+    private int minimumLauncherVersion;
+    private String incompatibilityReason;
+    private String assets;
+    private List<CompatibilityRule> compatibilityRules;
+    private String jar;
+    private CompleteMinecraftVersion savableVersion;
+    private transient boolean synced = false;
+    private Map<DownloadType, DownloadInfo> downloads = Maps.newEnumMap(DownloadType.class);
+    private AssetIndexInfo assetIndex;
+    private Map<ArgumentType, List<Argument>> arguments;
+
+    public CompleteMinecraftVersion() {
+    }
+
+    public CompleteMinecraftVersion(CompleteMinecraftVersion var1) {
+        this.inheritsFrom = var1.inheritsFrom;
+        this.id = var1.id;
+        this.time = var1.time;
+        this.releaseTime = var1.releaseTime;
+        this.type = var1.type;
+        this.minecraftArguments = var1.minecraftArguments;
+        this.mainClass = var1.mainClass;
+        this.minimumLauncherVersion = var1.minimumLauncherVersion;
+        this.incompatibilityReason = var1.incompatibilityReason;
+        this.assets = var1.assets;
+        this.jar = var1.jar;
+        this.downloads = var1.downloads;
+        Iterator var2;
+        if (var1.libraries != null) {
+            this.libraries = Lists.newArrayList();
+            var2 = var1.getLibraries().iterator();
+
+            while(var2.hasNext()) {
+                Library var3 = (Library)var2.next();
+                this.libraries.add(new Library(var3));
+            }
+        }
+
+        if (var1.arguments != null) {
+            this.arguments = Maps.newEnumMap(ArgumentType.class);
+            var2 = var1.arguments.entrySet().iterator();
+
+            while(var2.hasNext()) {
+                Entry var4 = (Entry)var2.next();
+                this.arguments.put(var4.getKey(), new ArrayList((Collection)var4.getValue()));
+            }
+        }
+
+        if (var1.compatibilityRules != null) {
+            this.compatibilityRules = Lists.newArrayList();
+            var2 = var1.compatibilityRules.iterator();
+
+            while(var2.hasNext()) {
+                CompatibilityRule var5 = (CompatibilityRule)var2.next();
+                this.compatibilityRules.add(new CompatibilityRule(var5));
+            }
+        }
+
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public ReleaseType getType() {
+        return this.type;
+    }
+
+    public Date getUpdatedTime() {
+        return this.time;
+    }
+
+    public Date getReleaseTime() {
+        return this.releaseTime;
+    }
+
+    public List<Library> getLibraries() {
+        return this.libraries;
+    }
+
+    public String getMainClass() {
+        return this.mainClass;
+    }
+
+    public String getJar() {
+        return this.jar == null ? this.id : this.jar;
+    }
+
+    public void setType(ReleaseType var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Release type cannot be null");
+        } else {
+            this.type = var1;
+        }
+    }
+
+    public Collection<Library> getRelevantLibraries(CompatibilityRule.FeatureMatcher var1) {
+        ArrayList var2 = new ArrayList();
+        Iterator var3 = this.libraries.iterator();
+
+        while(var3.hasNext()) {
+            Library var4 = (Library)var3.next();
+            if (var4.appliesToCurrentEnvironment(var1)) {
+                var2.add(var4);
+            }
+        }
+
+        return var2;
+    }
+
+    public Collection<File> getClassPath(OperatingSystem var1, File var2, CompatibilityRule.FeatureMatcher var3) {
+        Collection var4 = this.getRelevantLibraries(var3);
+        ArrayList var5 = new ArrayList();
+        Iterator var6 = var4.iterator();
+
+        while(var6.hasNext()) {
+            Library var7 = (Library)var6.next();
+            if (var7.getNatives() == null) {
+                var5.add(new File(var2, "libraries/" + var7.getArtifactPath()));
+            }
+        }
+
+        var5.add(new File(var2, "versions/" + this.getJar() + "/" + this.getJar() + ".jar"));
+        return var5;
+    }
+
+    public Set<String> getRequiredFiles(OperatingSystem var1) {
+        HashSet var2 = new HashSet();
+        Iterator var3 = this.getRelevantLibraries(this.createFeatureMatcher()).iterator();
+
+        while(var3.hasNext()) {
+            Library var4 = (Library)var3.next();
+            if (var4.getNatives() != null) {
+                String var5 = (String)var4.getNatives().get(var1);
+                if (var5 != null) {
+                    var2.add("libraries/" + var4.getArtifactPath(var5));
+                }
+            } else {
+                var2.add("libraries/" + var4.getArtifactPath());
+            }
+        }
+
+        return var2;
+    }
+
+    public Set<Downloadable> getRequiredDownloadables(OperatingSystem var1, Proxy var2, File var3, boolean var4) throws MalformedURLException {
+        HashSet var5 = new HashSet();
+        Iterator var6 = this.getRelevantLibraries(this.createFeatureMatcher()).iterator();
+
+        while(var6.hasNext()) {
+            Library var7 = (Library)var6.next();
+            String var8 = null;
+            String var9 = null;
+            if (var7.getNatives() != null) {
+                var9 = (String)var7.getNatives().get(var1);
+                if (var9 != null) {
+                    var8 = var7.getArtifactPath(var9);
+                }
+            } else {
+                var8 = var7.getArtifactPath();
+            }
+
+            if (var8 != null) {
+                File var10 = new File(var3, "libraries/" + var8);
+                Downloadable var11 = var7.createDownload(var2, var8, var10, var4, var9);
+                if (var11 != null) {
+                    var5.add(var11);
+                }
+            }
+        }
+
+        return var5;
+    }
+
+    public String toString() {
+        return "CompleteVersion{id='" + this.id + '\'' + ", updatedTime=" + this.time + ", releasedTime=" + this.time + ", type=" + this.type + ", libraries=" + this.libraries + ", mainClass='" + this.mainClass + '\'' + ", jar='" + this.jar + '\'' + ", minimumLauncherVersion=" + this.minimumLauncherVersion + '}';
+    }
+
+    public String getMinecraftArguments() {
+        return this.minecraftArguments;
+    }
+
+    public int getMinimumLauncherVersion() {
+        return this.minimumLauncherVersion;
+    }
+
+    public boolean appliesToCurrentEnvironment() {
+        if (this.compatibilityRules == null) {
+            return true;
+        } else {
+            CompatibilityRule.Action var1 = CompatibilityRule.Action.DISALLOW;
+            Iterator var2 = this.compatibilityRules.iterator();
+
+            while(var2.hasNext()) {
+                CompatibilityRule var3 = (CompatibilityRule)var2.next();
+                ProfileManager var4 = Launcher.getCurrentInstance().getProfileManager();
+                UserAuthentication var5 = var4.getAuthDatabase().getByUUID(var4.getSelectedUser());
+                CompatibilityRule.Action var6 = var3.getAppliedAction(new CurrentLaunchFeatureMatcher(var4.getSelectedProfile(), this, var5));
+                if (var6 != null) {
+                    var1 = var6;
+                }
+            }
+
+            return var1 == CompatibilityRule.Action.ALLOW;
+        }
+    }
+
+    public String getIncompatibilityReason() {
+        return this.incompatibilityReason;
+    }
+
+    public boolean isSynced() {
+        return this.synced;
+    }
+
+    public void setSynced(boolean var1) {
+        this.synced = var1;
+    }
+
+    public String getInheritsFrom() {
+        return this.inheritsFrom;
+    }
+
+    public CompleteMinecraftVersion resolve(MinecraftVersionManager var1) throws IOException {
+        return this.resolve(var1, Sets.newHashSet());
+    }
+
+    protected CompleteMinecraftVersion resolve(MinecraftVersionManager var1, Set<String> var2) throws IOException {
+        if (this.inheritsFrom == null) {
+            return this;
+        } else if (!var2.add(this.id)) {
+            throw new IllegalStateException("Circular dependency detected");
+        } else {
+            VersionSyncInfo var3 = var1.getVersionSyncInfo(this.inheritsFrom);
+            CompleteMinecraftVersion var4 = var1.getLatestCompleteVersion(var3).resolve(var1, var2);
+            CompleteMinecraftVersion var5 = new CompleteMinecraftVersion(var4);
+            if (!var3.isInstalled() || !var3.isUpToDate() || var3.getLatestSource() != VersionSyncInfo.VersionSource.LOCAL) {
+                var1.installVersion(var4);
+            }
+
+            var5.savableVersion = this;
+            var5.inheritsFrom = null;
+            var5.id = this.id;
+            var5.time = this.time;
+            var5.releaseTime = this.releaseTime;
+            var5.type = this.type;
+            if (this.minecraftArguments != null) {
+                var5.minecraftArguments = this.minecraftArguments;
+            }
+
+            if (this.mainClass != null) {
+                var5.mainClass = this.mainClass;
+            }
+
+            if (this.incompatibilityReason != null) {
+                var5.incompatibilityReason = this.incompatibilityReason;
+            }
+
+            if (this.assets != null) {
+                var5.assets = this.assets;
+            }
+
+            if (this.jar != null) {
+                var5.jar = this.jar;
+            }
+
+            if (this.libraries != null) {
+                ArrayList var6 = Lists.newArrayList();
+                Iterator var7 = this.libraries.iterator();
+
+                Library var8;
+                while(var7.hasNext()) {
+                    var8 = (Library)var7.next();
+                    var6.add(new Library(var8));
+                }
+
+                var7 = var5.libraries.iterator();
+
+                while(var7.hasNext()) {
+                    var8 = (Library)var7.next();
+                    var6.add(var8);
+                }
+
+                var5.libraries = var6;
+            }
+
+            Iterator var9;
+            if (this.arguments != null) {
+                if (var5.arguments == null) {
+                    var5.arguments = new EnumMap(ArgumentType.class);
+                }
+
+                Entry var10;
+                Object var12;
+                for(var9 = this.arguments.entrySet().iterator(); var9.hasNext(); ((List)var12).addAll((Collection)var10.getValue())) {
+                    var10 = (Entry)var9.next();
+                    var12 = (List)var5.arguments.get(var10.getKey());
+                    if (var12 == null) {
+                        var12 = new ArrayList();
+                        var5.arguments.put(var10.getKey(), var12);
+                    }
+                }
+            }
+
+            if (this.compatibilityRules != null) {
+                var9 = this.compatibilityRules.iterator();
+
+                while(var9.hasNext()) {
+                    CompatibilityRule var11 = (CompatibilityRule)var9.next();
+                    var5.compatibilityRules.add(new CompatibilityRule(var11));
+                }
+            }
+
+            return var5;
+        }
+    }
+
+    public CompleteMinecraftVersion getSavableVersion() {
+        return (CompleteMinecraftVersion)Objects.firstNonNull(this.savableVersion, this);
+    }
+
+    public AbstractDownloadInfo getDownloadURL(DownloadType var1) {
+        return (AbstractDownloadInfo)this.downloads.get(var1);
+    }
+
+    public AssetIndexInfo getAssetIndex() {
+        if (this.assetIndex == null) {
+            this.assetIndex = new AssetIndexInfo((String)Objects.firstNonNull(this.assets, "legacy"));
+        }
+
+        return this.assetIndex;
+    }
+
+    public CompatibilityRule.FeatureMatcher createFeatureMatcher() {
+        ProfileManager var1 = Launcher.getCurrentInstance().getProfileManager();
+        UserAuthentication var2 = var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
+        return new CurrentLaunchFeatureMatcher(var1.getSelectedProfile(), this, var2);
+    }
+
+    public void addArguments(ArgumentType var1, CompatibilityRule.FeatureMatcher var2, GameProcessBuilder var3, StrSubstitutor var4) {
+        if (this.arguments != null) {
+            List var5 = (List)this.arguments.get(var1);
+            if (var5 != null) {
+                Iterator var6 = var5.iterator();
+
+                while(var6.hasNext()) {
+                    Argument var7 = (Argument)var6.next();
+                    var7.apply(var3, var2, var4);
+                }
+            }
+        } else if (this.minecraftArguments != null) {
+            if (var1 == ArgumentType.GAME) {
+                String[] var9 = this.minecraftArguments.split(" ");
+                int var10 = var9.length;
+
+                for(int var11 = 0; var11 < var10; ++var11) {
+                    String var8 = var9[var11];
+                    var3.withArguments(var4.replace(var8));
+                }
+
+                if (var2.hasFeature("is_demo_user", true)) {
+                    var3.withArguments("--demo");
+                }
+
+                if (var2.hasFeature("has_custom_resolution", true)) {
+                    var3.withArguments("--width", var4.replace("${resolution_width}"), "--height", var4.replace("${resolution_height}"));
+                }
+            } else if (var1 == ArgumentType.JVM) {
+                if (OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS) {
+                    var3.withArguments("-XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump");
+                    if (Launcher.getCurrentInstance().usesWinTenHack()) {
+                        var3.withArguments("-Dos.name=Windows 10", "-Dos.version=10.0");
+                    }
+                } else if (OperatingSystem.getCurrentPlatform() == OperatingSystem.OSX) {
+                    var3.withArguments(var4.replace("-Xdock:icon=${asset=icons/minecraft.icns}"), "-Xdock:name=Minecraft");
+                }
+
+                var3.withArguments(var4.replace("-Djava.library.path=${natives_directory}"));
+                var3.withArguments(var4.replace("-Dminecraft.launcher.brand=${launcher_name}"));
+                var3.withArguments(var4.replace("-Dminecraft.launcher.version=${launcher_version}"));
+                var3.withArguments(var4.replace("-Dminecraft.client.jar=${primary_jar}"));
+                var3.withArguments("-cp", var4.replace("${classpath}"));
+            }
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/updater/DownloadInfo.java b/net/minecraft/launcher/updater/DownloadInfo.java
new file mode 100644
index 0000000..ddf9011
--- /dev/null
+++ b/net/minecraft/launcher/updater/DownloadInfo.java
@@ -0,0 +1,30 @@
+package net.minecraft.launcher.updater;
+
+import java.net.URL;
+
+public class DownloadInfo extends AbstractDownloadInfo {
+    protected URL url;
+    protected String sha1;
+    protected int size;
+
+    public DownloadInfo() {
+    }
+
+    public DownloadInfo(DownloadInfo var1) {
+        this.url = var1.url;
+        this.sha1 = var1.sha1;
+        this.size = var1.size;
+    }
+
+    public URL getUrl() {
+        return this.url;
+    }
+
+    public String getSha1() {
+        return this.sha1;
+    }
+
+    public int getSize() {
+        return this.size;
+    }
+}
diff --git a/net/minecraft/launcher/updater/DownloadType.java b/net/minecraft/launcher/updater/DownloadType.java
new file mode 100644
index 0000000..e278fed
--- /dev/null
+++ b/net/minecraft/launcher/updater/DownloadType.java
@@ -0,0 +1,12 @@
+package net.minecraft.launcher.updater;
+
+public enum DownloadType {
+    CLIENT,
+    SERVER,
+    WINDOWS_SERVER,
+    CLIENT_MAPPINGS,
+    SERVER_MAPPINGS;
+
+    private DownloadType() {
+    }
+}
diff --git a/net/minecraft/launcher/updater/FileBasedVersionList.java b/net/minecraft/launcher/updater/FileBasedVersionList.java
new file mode 100644
index 0000000..c63f7ad
--- /dev/null
+++ b/net/minecraft/launcher/updater/FileBasedVersionList.java
@@ -0,0 +1,34 @@
+package net.minecraft.launcher.updater;
+
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.Version;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import org.apache.commons.io.IOUtils;
+
+public abstract class FileBasedVersionList extends VersionList {
+    public FileBasedVersionList() {
+    }
+
+    public String getContent(String var1) throws IOException {
+        return IOUtils.toString(this.getFileInputStream(var1)).replaceAll("\\r\\n", "\r").replaceAll("\\r", "\n");
+    }
+
+    protected abstract InputStream getFileInputStream(String var1) throws FileNotFoundException;
+
+    public CompleteMinecraftVersion getCompleteVersion(Version var1) throws IOException {
+        if (var1 instanceof CompleteVersion) {
+            return (CompleteMinecraftVersion)var1;
+        } else if (!(var1 instanceof PartialVersion)) {
+            throw new IllegalArgumentException("Version must be a partial");
+        } else {
+            PartialVersion var2 = (PartialVersion)var1;
+            CompleteMinecraftVersion var3 = (CompleteMinecraftVersion)this.gson.fromJson(this.getContent("versions/" + var1.getId() + "/" + var1.getId() + ".json"), CompleteMinecraftVersion.class);
+            MinecraftReleaseType var4 = (MinecraftReleaseType)var1.getType();
+            this.replacePartialWithFull(var2, var3);
+            return var3;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/updater/Library.java b/net/minecraft/launcher/updater/Library.java
new file mode 100644
index 0000000..a9da116
--- /dev/null
+++ b/net/minecraft/launcher/updater/Library.java
@@ -0,0 +1,193 @@
+package net.minecraft.launcher.updater;
+
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.updater.download.ChecksummedDownloadable;
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.versions.ExtractRules;
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import net.minecraft.launcher.CompatibilityRule;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.text.StrSubstitutor;
+
+public class Library {
+    private static final StrSubstitutor SUBSTITUTOR = new StrSubstitutor(new HashMap<String, String>() {
+        {
+            this.put("arch", System.getProperty("os.arch").contains("64") ? "64" : "32");
+        }
+    });
+    private String name;
+    private List<CompatibilityRule> rules;
+    private Map<OperatingSystem, String> natives;
+    private ExtractRules extract;
+    private String url;
+    private LibraryDownloadInfo downloads;
+
+    public Library() {
+    }
+
+    public Library(String var1) {
+        if (var1 != null && var1.length() != 0) {
+            this.name = var1;
+        } else {
+            throw new IllegalArgumentException("Library name cannot be null or empty");
+        }
+    }
+
+    public Library(Library var1) {
+        this.name = var1.name;
+        this.url = var1.url;
+        if (var1.extract != null) {
+            this.extract = new ExtractRules(var1.extract);
+        }
+
+        Iterator var2;
+        if (var1.rules != null) {
+            this.rules = new ArrayList();
+            var2 = var1.rules.iterator();
+
+            while(var2.hasNext()) {
+                CompatibilityRule var3 = (CompatibilityRule)var2.next();
+                this.rules.add(new CompatibilityRule(var3));
+            }
+        }
+
+        if (var1.natives != null) {
+            this.natives = new LinkedHashMap();
+            var2 = var1.getNatives().entrySet().iterator();
+
+            while(var2.hasNext()) {
+                Entry var4 = (Entry)var2.next();
+                this.natives.put(var4.getKey(), var4.getValue());
+            }
+        }
+
+        if (var1.downloads != null) {
+            this.downloads = new LibraryDownloadInfo(var1.downloads);
+        }
+
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public Library addNative(OperatingSystem var1, String var2) {
+        if (var1 != null && var1.isSupported()) {
+            if (var2 != null && var2.length() != 0) {
+                if (this.natives == null) {
+                    this.natives = new EnumMap(OperatingSystem.class);
+                }
+
+                this.natives.put(var1, var2);
+                return this;
+            } else {
+                throw new IllegalArgumentException("Cannot add native for null or empty name");
+            }
+        } else {
+            throw new IllegalArgumentException("Cannot add native for unsupported OS");
+        }
+    }
+
+    public List<CompatibilityRule> getCompatibilityRules() {
+        return this.rules;
+    }
+
+    public boolean appliesToCurrentEnvironment(CompatibilityRule.FeatureMatcher var1) {
+        if (this.rules == null) {
+            return true;
+        } else {
+            CompatibilityRule.Action var2 = CompatibilityRule.Action.DISALLOW;
+            Iterator var3 = this.rules.iterator();
+
+            while(var3.hasNext()) {
+                CompatibilityRule var4 = (CompatibilityRule)var3.next();
+                CompatibilityRule.Action var5 = var4.getAppliedAction(var1);
+                if (var5 != null) {
+                    var2 = var5;
+                }
+            }
+
+            return var2 == CompatibilityRule.Action.ALLOW;
+        }
+    }
+
+    public Map<OperatingSystem, String> getNatives() {
+        return this.natives;
+    }
+
+    public ExtractRules getExtractRules() {
+        return this.extract;
+    }
+
+    public Library setExtractRules(ExtractRules var1) {
+        this.extract = var1;
+        return this;
+    }
+
+    public String getArtifactBaseDir() {
+        if (this.name == null) {
+            throw new IllegalStateException("Cannot get artifact dir of empty/blank artifact");
+        } else {
+            String[] var1 = this.name.split(":", 3);
+            return String.format("%s/%s/%s", var1[0].replaceAll("\\.", "/"), var1[1], var1[2]);
+        }
+    }
+
+    public String getArtifactPath() {
+        return this.getArtifactPath((String)null);
+    }
+
+    public String getArtifactPath(String var1) {
+        if (this.name == null) {
+            throw new IllegalStateException("Cannot get artifact path of empty/blank artifact");
+        } else {
+            return String.format("%s/%s", this.getArtifactBaseDir(), this.getArtifactFilename(var1));
+        }
+    }
+
+    public String getArtifactFilename(String var1) {
+        if (this.name == null) {
+            throw new IllegalStateException("Cannot get artifact filename of empty/blank artifact");
+        } else {
+            String[] var2 = this.name.split(":", 3);
+            String var3 = String.format("%s-%s%s.jar", var2[1], var2[2], StringUtils.isEmpty(var1) ? "" : "-" + var1);
+            return SUBSTITUTOR.replace(var3);
+        }
+    }
+
+    public String toString() {
+        return "Library{name='" + this.name + '\'' + ", rules=" + this.rules + ", natives=" + this.natives + ", extract=" + this.extract + '}';
+    }
+
+    public Downloadable createDownload(Proxy var1, String var2, File var3, boolean var4, String var5) throws MalformedURLException {
+        URL var8;
+        if (this.url != null) {
+            var8 = new URL(this.url + var2);
+            return new ChecksummedDownloadable(var1, var8, var3, var4);
+        } else if (this.downloads == null) {
+            var8 = new URL("https://libraries.minecraft.net/" + var2);
+            return new ChecksummedDownloadable(var1, var8, var3, var4);
+        } else {
+            AbstractDownloadInfo var6 = this.downloads.getDownloadInfo(SUBSTITUTOR.replace(var5));
+            if (var6 != null) {
+                URL var7 = var6.getUrl();
+                if (var7 != null) {
+                    return new PreHashedDownloadable(var1, var7, var3, var4, var6.getSha1());
+                }
+            }
+
+            return null;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/updater/LibraryDownloadInfo.java b/net/minecraft/launcher/updater/LibraryDownloadInfo.java
new file mode 100644
index 0000000..21dbec3
--- /dev/null
+++ b/net/minecraft/launcher/updater/LibraryDownloadInfo.java
@@ -0,0 +1,32 @@
+package net.minecraft.launcher.updater;
+
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class LibraryDownloadInfo {
+    private LocalDownloadInfo artifact;
+    private Map<String, DownloadInfo> classifiers;
+
+    public LibraryDownloadInfo() {
+    }
+
+    public LibraryDownloadInfo(LibraryDownloadInfo var1) {
+        this.artifact = var1.artifact;
+        if (var1.classifiers != null) {
+            this.classifiers = new LinkedHashMap();
+            Iterator var2 = var1.classifiers.entrySet().iterator();
+
+            while(var2.hasNext()) {
+                Entry var3 = (Entry)var2.next();
+                this.classifiers.put(var3.getKey(), new DownloadInfo((DownloadInfo)var3.getValue()));
+            }
+        }
+
+    }
+
+    public AbstractDownloadInfo getDownloadInfo(String var1) {
+        return (AbstractDownloadInfo)(var1 == null ? this.artifact : (AbstractDownloadInfo)this.classifiers.get(var1));
+    }
+}
diff --git a/net/minecraft/launcher/updater/LocalDownloadInfo.java b/net/minecraft/launcher/updater/LocalDownloadInfo.java
new file mode 100644
index 0000000..c0954e2
--- /dev/null
+++ b/net/minecraft/launcher/updater/LocalDownloadInfo.java
@@ -0,0 +1,35 @@
+package net.minecraft.launcher.updater;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+
+public class LocalDownloadInfo extends AbstractDownloadInfo {
+    protected String url;
+    protected String sha1;
+    protected int size;
+
+    public LocalDownloadInfo() {
+    }
+
+    public LocalDownloadInfo(LocalDownloadInfo var1) {
+        this.url = var1.url;
+        this.sha1 = var1.sha1;
+        this.size = var1.size;
+    }
+
+    public URL getUrl() {
+        try {
+            return new URL(this.url);
+        } catch (MalformedURLException var2) {
+            return null;
+        }
+    }
+
+    public String getSha1() {
+        return this.sha1;
+    }
+
+    public int getSize() {
+        return this.size;
+    }
+}
diff --git a/net/minecraft/launcher/updater/LocalVersionList.java b/net/minecraft/launcher/updater/LocalVersionList.java
new file mode 100644
index 0000000..f7e0b56
--- /dev/null
+++ b/net/minecraft/launcher/updater/LocalVersionList.java
@@ -0,0 +1,131 @@
+package net.minecraft.launcher.updater;
+
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.Version;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintWriter;
+import java.util.Iterator;
+import java.util.Set;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import org.apache.commons.io.FileUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class LocalVersionList extends FileBasedVersionList {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final File baseDirectory;
+    private final File baseVersionsDir;
+
+    public LocalVersionList(File var1) {
+        if (var1 != null && var1.isDirectory()) {
+            this.baseDirectory = var1;
+            this.baseVersionsDir = new File(this.baseDirectory, "versions");
+            if (!this.baseVersionsDir.isDirectory()) {
+                this.baseVersionsDir.mkdirs();
+            }
+
+        } else {
+            throw new IllegalArgumentException("Base directory is not a folder!");
+        }
+    }
+
+    protected InputStream getFileInputStream(String var1) throws FileNotFoundException {
+        return new FileInputStream(new File(this.baseDirectory, var1));
+    }
+
+    public void refreshVersions() throws IOException {
+        this.clearCache();
+        File[] var1 = this.baseVersionsDir.listFiles();
+        if (var1 != null) {
+            File[] var2 = var1;
+            int var3 = var1.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+                File var5 = var2[var4];
+                String var6 = var5.getName();
+                File var7 = new File(var5, var6 + ".json");
+                if (var5.isDirectory() && var7.exists()) {
+                    try {
+                        String var8 = "versions/" + var6 + "/" + var6 + ".json";
+                        CompleteVersion var9 = (CompleteVersion)this.gson.fromJson(this.getContent(var8), CompleteMinecraftVersion.class);
+                        if (var9.getType() == null) {
+                            LOGGER.warn("Ignoring: " + var8 + "; it has an invalid version specified");
+                            return;
+                        }
+
+                        if (var9.getId().equals(var6)) {
+                            this.addVersion(var9);
+                        } else {
+                            LOGGER.warn("Ignoring: " + var8 + "; it contains id: '" + var9.getId() + "' expected '" + var6 + "'");
+                        }
+                    } catch (RuntimeException var10) {
+                        LOGGER.error("Couldn't load local version " + var7.getAbsolutePath(), var10);
+                    }
+                }
+            }
+
+            Iterator var11 = this.getVersions().iterator();
+
+            while(true) {
+                Version var12;
+                MinecraftReleaseType var13;
+                do {
+                    if (!var11.hasNext()) {
+                        return;
+                    }
+
+                    var12 = (Version)var11.next();
+                    var13 = (MinecraftReleaseType)var12.getType();
+                } while(this.getLatestVersion(var13) != null && !this.getLatestVersion(var13).getUpdatedTime().before(var12.getUpdatedTime()));
+
+                this.setLatestVersion(var12);
+            }
+        }
+    }
+
+    public void saveVersion(CompleteVersion var1) throws IOException {
+        String var2 = this.serializeVersion(var1);
+        File var3 = new File(this.baseVersionsDir, var1.getId() + "/" + var1.getId() + ".json");
+        if (var3.getParentFile() != null) {
+            var3.getParentFile().mkdirs();
+        }
+
+        PrintWriter var4 = new PrintWriter(var3);
+        var4.print(var2);
+        var4.close();
+    }
+
+    public File getBaseDirectory() {
+        return this.baseDirectory;
+    }
+
+    public boolean hasAllFiles(CompleteMinecraftVersion var1, OperatingSystem var2) {
+        Set var3 = var1.getRequiredFiles(var2);
+        Iterator var4 = var3.iterator();
+
+        String var5;
+        do {
+            if (!var4.hasNext()) {
+                return true;
+            }
+
+            var5 = (String)var4.next();
+        } while((new File(this.baseDirectory, var5)).isFile());
+
+        return false;
+    }
+
+    public void uninstallVersion(Version var1) {
+        super.uninstallVersion(var1);
+        File var2 = new File(this.baseVersionsDir, var1.getId());
+        if (var2.isDirectory()) {
+            FileUtils.deleteQuietly(var2);
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/updater/MinecraftVersionManager.java b/net/minecraft/launcher/updater/MinecraftVersionManager.java
new file mode 100644
index 0000000..de78e0e
--- /dev/null
+++ b/net/minecraft/launcher/updater/MinecraftVersionManager.java
@@ -0,0 +1,392 @@
+package net.minecraft.launcher.updater;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.gson.Gson;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.updater.ExceptionalThreadPoolExecutor;
+import com.mojang.launcher.updater.VersionFilter;
+import com.mojang.launcher.updater.VersionManager;
+import com.mojang.launcher.updater.VersionSyncInfo;
+import com.mojang.launcher.updater.download.DownloadJob;
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.updater.download.EtagDownloadable;
+import com.mojang.launcher.updater.download.assets.AssetDownloadable;
+import com.mojang.launcher.updater.download.assets.AssetIndex;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.ReleaseType;
+import com.mojang.launcher.versions.Version;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.EnumMap;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.Map.Entry;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class MinecraftVersionManager implements VersionManager {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final VersionList localVersionList;
+    private final VersionList remoteVersionList;
+    private final ThreadPoolExecutor executorService;
+    private final List<RefreshedVersionsListener> refreshedVersionsListeners;
+    private final Object refreshLock;
+    private boolean isRefreshing;
+    private final Gson gson;
+
+    public MinecraftVersionManager(VersionList var1, VersionList var2) {
+        this.executorService = new ExceptionalThreadPoolExecutor(4, 8, 30L, TimeUnit.SECONDS);
+        this.refreshedVersionsListeners = Collections.synchronizedList(new ArrayList());
+        this.refreshLock = new Object();
+        this.gson = new Gson();
+        this.localVersionList = var1;
+        this.remoteVersionList = var2;
+    }
+
+    public void refreshVersions() throws IOException {
+        synchronized(this.refreshLock) {
+            this.isRefreshing = true;
+        }
+
+        try {
+            LOGGER.info("Refreshing local version list...");
+            this.localVersionList.refreshVersions();
+            LOGGER.info("Refreshing remote version list...");
+            this.remoteVersionList.refreshVersions();
+        } catch (IOException var7) {
+            synchronized(this.refreshLock) {
+                this.isRefreshing = false;
+            }
+
+            throw var7;
+        }
+
+        LOGGER.info("Refresh complete.");
+        synchronized(this.refreshLock) {
+            this.isRefreshing = false;
+        }
+
+        Iterator var1 = Lists.newArrayList(this.refreshedVersionsListeners).iterator();
+
+        while(var1.hasNext()) {
+            RefreshedVersionsListener var2 = (RefreshedVersionsListener)var1.next();
+            var2.onVersionsRefreshed(this);
+        }
+
+    }
+
+    public List<VersionSyncInfo> getVersions() {
+        return this.getVersions((VersionFilter)null);
+    }
+
+    public List<VersionSyncInfo> getVersions(VersionFilter<? extends ReleaseType> var1) {
+        synchronized(this.refreshLock) {
+            if (this.isRefreshing) {
+                return new ArrayList();
+            }
+        }
+
+        ArrayList var2 = new ArrayList();
+        HashMap var3 = new HashMap();
+        EnumMap var4 = Maps.newEnumMap(MinecraftReleaseType.class);
+        MinecraftReleaseType[] var5 = MinecraftReleaseType.values();
+        int var6 = var5.length;
+
+        for(int var7 = 0; var7 < var6; ++var7) {
+            MinecraftReleaseType var8 = var5[var7];
+            var4.put(var8, 0);
+        }
+
+        Iterator var10 = Lists.newArrayList(this.localVersionList.getVersions()).iterator();
+
+        while(true) {
+            Version var11;
+            MinecraftReleaseType var12;
+            VersionSyncInfo var13;
+            do {
+                do {
+                    do {
+                        if (!var10.hasNext()) {
+                            var10 = this.remoteVersionList.getVersions().iterator();
+
+                            while(true) {
+                                do {
+                                    do {
+                                        do {
+                                            do {
+                                                if (!var10.hasNext()) {
+                                                    if (var2.isEmpty()) {
+                                                        var10 = this.localVersionList.getVersions().iterator();
+
+                                                        while(var10.hasNext()) {
+                                                            var11 = (Version)var10.next();
+                                                            if (var11.getType() != null && var11.getUpdatedTime() != null) {
+                                                                VersionSyncInfo var14 = this.getVersionSyncInfo(var11, this.remoteVersionList.getVersion(var11.getId()));
+                                                                var3.put(var11.getId(), var14);
+                                                                var2.add(var14);
+                                                                break;
+                                                            }
+                                                        }
+                                                    }
+
+                                                    Collections.sort(var2, new Comparator<VersionSyncInfo>() {
+                                                        public int compare(VersionSyncInfo var1, VersionSyncInfo var2) {
+                                                            Version var3 = var1.getLatestVersion();
+                                                            Version var4 = var2.getLatestVersion();
+                                                            return var3.getReleaseTime() != null && var4.getReleaseTime() != null ? var4.getReleaseTime().compareTo(var3.getReleaseTime()) : var4.getUpdatedTime().compareTo(var3.getUpdatedTime());
+                                                        }
+                                                    });
+                                                    return var2;
+                                                }
+
+                                                var11 = (Version)var10.next();
+                                            } while(var11.getType() == null);
+                                        } while(var11.getUpdatedTime() == null);
+
+                                        var12 = (MinecraftReleaseType)var11.getType();
+                                    } while(var3.containsKey(var11.getId()));
+                                } while(var1 != null && (!var1.getTypes().contains(var12) || (Integer)var4.get(var12) >= var1.getMaxCount()));
+
+                                var13 = this.getVersionSyncInfo(this.localVersionList.getVersion(var11.getId()), var11);
+                                var3.put(var11.getId(), var13);
+                                var2.add(var13);
+                                if (var1 != null) {
+                                    var4.put(var12, (Integer)var4.get(var12) + 1);
+                                }
+                            }
+                        }
+
+                        var11 = (Version)var10.next();
+                    } while(var11.getType() == null);
+                } while(var11.getUpdatedTime() == null);
+
+                var12 = (MinecraftReleaseType)var11.getType();
+            } while(var1 != null && (!var1.getTypes().contains(var12) || (Integer)var4.get(var12) >= var1.getMaxCount()));
+
+            var13 = this.getVersionSyncInfo(var11, this.remoteVersionList.getVersion(var11.getId()));
+            var3.put(var11.getId(), var13);
+            var2.add(var13);
+        }
+    }
+
+    public VersionSyncInfo getVersionSyncInfo(Version var1) {
+        return this.getVersionSyncInfo(var1.getId());
+    }
+
+    public VersionSyncInfo getVersionSyncInfo(String var1) {
+        return this.getVersionSyncInfo(this.localVersionList.getVersion(var1), this.remoteVersionList.getVersion(var1));
+    }
+
+    public VersionSyncInfo getVersionSyncInfo(Version var1, Version var2) {
+        boolean var3 = var1 != null;
+        boolean var4 = var3;
+        CompleteMinecraftVersion var5 = null;
+        if (var3 && var2 != null) {
+            var4 = !var2.getUpdatedTime().after(var1.getUpdatedTime());
+        }
+
+        if (var1 instanceof CompleteVersion) {
+            try {
+                var5 = ((CompleteMinecraftVersion)var1).resolve(this);
+            } catch (IOException var7) {
+                LOGGER.error("Couldn't resolve version " + var1.getId(), var7);
+                var5 = (CompleteMinecraftVersion)var1;
+            }
+
+            var4 &= this.localVersionList.hasAllFiles(var5, OperatingSystem.getCurrentPlatform());
+        }
+
+        return new VersionSyncInfo(var5, var2, var3, var4);
+    }
+
+    public List<VersionSyncInfo> getInstalledVersions() {
+        ArrayList var1 = new ArrayList();
+        ArrayList var2 = Lists.newArrayList(this.localVersionList.getVersions());
+        Iterator var3 = var2.iterator();
+
+        while(var3.hasNext()) {
+            Version var4 = (Version)var3.next();
+            if (var4.getType() != null && var4.getUpdatedTime() != null) {
+                VersionSyncInfo var5 = this.getVersionSyncInfo(var4, this.remoteVersionList.getVersion(var4.getId()));
+                var1.add(var5);
+            }
+        }
+
+        return var1;
+    }
+
+    public VersionList getRemoteVersionList() {
+        return this.remoteVersionList;
+    }
+
+    public VersionList getLocalVersionList() {
+        return this.localVersionList;
+    }
+
+    public CompleteMinecraftVersion getLatestCompleteVersion(VersionSyncInfo var1) throws IOException {
+        if (var1.getLatestSource() == VersionSyncInfo.VersionSource.REMOTE) {
+            CompleteMinecraftVersion var2 = null;
+            IOException var3 = null;
+
+            try {
+                var2 = this.remoteVersionList.getCompleteVersion(var1.getLatestVersion());
+            } catch (IOException var7) {
+                var3 = var7;
+
+                try {
+                    var2 = this.localVersionList.getCompleteVersion(var1.getLatestVersion());
+                } catch (IOException var6) {
+                }
+            }
+
+            if (var2 != null) {
+                return var2;
+            } else {
+                throw var3;
+            }
+        } else {
+            return this.localVersionList.getCompleteVersion(var1.getLatestVersion());
+        }
+    }
+
+    public DownloadJob downloadVersion(VersionSyncInfo var1, DownloadJob var2) throws IOException {
+        if (!(this.localVersionList instanceof LocalVersionList)) {
+            throw new IllegalArgumentException("Cannot download if local repo isn't a LocalVersionList");
+        } else if (!(this.remoteVersionList instanceof RemoteVersionList)) {
+            throw new IllegalArgumentException("Cannot download if local repo isn't a RemoteVersionList");
+        } else {
+            CompleteMinecraftVersion var3 = this.getLatestCompleteVersion(var1);
+            File var4 = ((LocalVersionList)this.localVersionList).getBaseDirectory();
+            Proxy var5 = ((RemoteVersionList)this.remoteVersionList).getProxy();
+            var2.addDownloadables((Collection)var3.getRequiredDownloadables(OperatingSystem.getCurrentPlatform(), var5, var4, false));
+            String var6 = "versions/" + var3.getJar() + "/" + var3.getJar() + ".jar";
+            AbstractDownloadInfo var7 = var3.getDownloadURL(DownloadType.CLIENT);
+            if (var7 == null) {
+                var2.addDownloadables(new EtagDownloadable(var5, new URL("https://s3.amazonaws.com/Minecraft.Download/" + var6), new File(var4, var6), false));
+            } else {
+                var2.addDownloadables(new PreHashedDownloadable(var5, var7.getUrl(), new File(var4, var6), false, var7.getSha1()));
+            }
+
+            return var2;
+        }
+    }
+
+    public DownloadJob downloadResources(DownloadJob var1, CompleteVersion var2) throws IOException {
+        File var3 = ((LocalVersionList)this.localVersionList).getBaseDirectory();
+        var1.addDownloadables((Collection)this.getResourceFiles(((RemoteVersionList)this.remoteVersionList).getProxy(), var3, (CompleteMinecraftVersion)var2));
+        return var1;
+    }
+
+    private Set<Downloadable> getResourceFiles(Proxy var1, File var2, CompleteMinecraftVersion var3) {
+        HashSet var4 = new HashSet();
+        InputStream var5 = null;
+        File var6 = new File(var2, "assets");
+        File var7 = new File(var6, "objects");
+        File var8 = new File(var6, "indexes");
+        long var9 = System.nanoTime();
+        AssetIndexInfo var11 = var3.getAssetIndex();
+        File var12 = new File(var8, var11.getId() + ".json");
+
+        try {
+            URL var13 = var11.getUrl();
+            var5 = var13.openConnection(var1).getInputStream();
+            String var14 = IOUtils.toString(var5);
+            FileUtils.writeStringToFile(var12, var14);
+            AssetIndex var15 = (AssetIndex)this.gson.fromJson(var14, AssetIndex.class);
+            Iterator var16 = var15.getUniqueObjects().entrySet().iterator();
+
+            while(true) {
+                Entry var17;
+                AssetIndex.AssetObject var18;
+                File var20;
+                do {
+                    if (!var16.hasNext()) {
+                        long var27 = System.nanoTime();
+                        long var28 = var27 - var9;
+                        LOGGER.debug("Delta time to compare resources: " + var28 / 1000000L + " ms ");
+                        return var4;
+                    }
+
+                    var17 = (Entry)var16.next();
+                    var18 = (AssetIndex.AssetObject)var17.getKey();
+                    String var19 = var18.getHash().substring(0, 2) + "/" + var18.getHash();
+                    var20 = new File(var7, var19);
+                } while(var20.isFile() && FileUtils.sizeOf(var20) == var18.getSize());
+
+                AssetDownloadable var21 = new AssetDownloadable(var1, (String)var17.getValue(), var18, "http://resources.download.minecraft.net/", var7);
+                var21.setExpectedSize(var18.getSize());
+                var4.add(var21);
+            }
+        } catch (Exception var25) {
+            LOGGER.error("Couldn't download resources", var25);
+        } finally {
+            IOUtils.closeQuietly(var5);
+        }
+
+        return var4;
+    }
+
+    public ThreadPoolExecutor getExecutorService() {
+        return this.executorService;
+    }
+
+    public void addRefreshedVersionsListener(RefreshedVersionsListener var1) {
+        this.refreshedVersionsListeners.add(var1);
+    }
+
+    public void removeRefreshedVersionsListener(RefreshedVersionsListener var1) {
+        this.refreshedVersionsListeners.remove(var1);
+    }
+
+    public VersionSyncInfo syncVersion(VersionSyncInfo var1) throws IOException {
+        CompleteMinecraftVersion var2 = this.getRemoteVersionList().getCompleteVersion(var1.getRemoteVersion());
+        this.getLocalVersionList().removeVersion(var1.getLocalVersion());
+        this.getLocalVersionList().addVersion(var2);
+        ((LocalVersionList)this.getLocalVersionList()).saveVersion(((CompleteMinecraftVersion)var2).getSavableVersion());
+        return this.getVersionSyncInfo((Version)var2);
+    }
+
+    public void installVersion(CompleteVersion var1) throws IOException {
+        if (var1 instanceof CompleteMinecraftVersion) {
+            var1 = ((CompleteMinecraftVersion)var1).getSavableVersion();
+        }
+
+        VersionList var2 = this.getLocalVersionList();
+        if (var2.getVersion(((CompleteVersion)var1).getId()) != null) {
+            var2.removeVersion(((CompleteVersion)var1).getId());
+        }
+
+        var2.addVersion((CompleteVersion)var1);
+        if (var2 instanceof LocalVersionList) {
+            ((LocalVersionList)var2).saveVersion((CompleteVersion)var1);
+        }
+
+        LOGGER.info("Installed " + var1);
+    }
+
+    public void uninstallVersion(CompleteVersion var1) throws IOException {
+        VersionList var2 = this.getLocalVersionList();
+        if (var2 instanceof LocalVersionList) {
+            var2.uninstallVersion(var1);
+            LOGGER.info("Uninstalled " + var1);
+        }
+
+    }
+}
diff --git a/net/minecraft/launcher/updater/PartialVersion.java b/net/minecraft/launcher/updater/PartialVersion.java
new file mode 100644
index 0000000..777763f
--- /dev/null
+++ b/net/minecraft/launcher/updater/PartialVersion.java
@@ -0,0 +1,89 @@
+package net.minecraft.launcher.updater;
+
+import com.mojang.launcher.versions.Version;
+import java.net.URL;
+import java.util.Date;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+
+public class PartialVersion implements Version {
+    private String id;
+    private Date time;
+    private Date releaseTime;
+    private MinecraftReleaseType type;
+    private URL url;
+
+    public PartialVersion() {
+    }
+
+    public PartialVersion(String var1, Date var2, Date var3, MinecraftReleaseType var4, URL var5) {
+        if (var1 != null && var1.length() != 0) {
+            if (var2 == null) {
+                throw new IllegalArgumentException("Release time cannot be null");
+            } else if (var3 == null) {
+                throw new IllegalArgumentException("Update time cannot be null");
+            } else if (var4 == null) {
+                throw new IllegalArgumentException("Release type cannot be null");
+            } else {
+                this.id = var1;
+                this.releaseTime = var2;
+                this.time = var3;
+                this.type = var4;
+                this.url = var5;
+            }
+        } else {
+            throw new IllegalArgumentException("ID cannot be null or empty");
+        }
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public MinecraftReleaseType getType() {
+        return this.type;
+    }
+
+    public Date getUpdatedTime() {
+        return this.time;
+    }
+
+    public void setUpdatedTime(Date var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Time cannot be null");
+        } else {
+            this.time = var1;
+        }
+    }
+
+    public Date getReleaseTime() {
+        return this.releaseTime;
+    }
+
+    public void setReleaseTime(Date var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Time cannot be null");
+        } else {
+            this.releaseTime = var1;
+        }
+    }
+
+    public void setType(MinecraftReleaseType var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Release type cannot be null");
+        } else {
+            this.type = var1;
+        }
+    }
+
+    public URL getUrl() {
+        return this.url;
+    }
+
+    public void setUrl(URL var1) {
+        this.url = var1;
+    }
+
+    public String toString() {
+        return "PartialVersion{id='" + this.id + '\'' + ", updateTime=" + this.time + ", releaseTime=" + this.releaseTime + ", type=" + this.type + ", url=" + this.url + '}';
+    }
+}
diff --git a/net/minecraft/launcher/updater/PreHashedDownloadable.java b/net/minecraft/launcher/updater/PreHashedDownloadable.java
new file mode 100644
index 0000000..98a6788
--- /dev/null
+++ b/net/minecraft/launcher/updater/PreHashedDownloadable.java
@@ -0,0 +1,61 @@
+package net.minecraft.launcher.updater;
+
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.updater.download.MonitoringInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import org.apache.commons.io.FileUtils;
+
+public class PreHashedDownloadable extends Downloadable {
+    private final String expectedHash;
+
+    public PreHashedDownloadable(Proxy var1, URL var2, File var3, boolean var4, String var5) {
+        super(var1, var2, var3, var4);
+        this.expectedHash = var5;
+    }
+
+    public String download() throws IOException {
+        ++this.numAttempts;
+        this.ensureFileWritable(this.getTarget());
+        File var1 = this.getTarget();
+        String var2 = null;
+        if (var1.isFile()) {
+            var2 = getDigest(var1, "SHA-1", 40);
+            if (this.expectedHash.equalsIgnoreCase(var2)) {
+                return "Local file matches hash, using that";
+            }
+
+            FileUtils.deleteQuietly(var1);
+        }
+
+        try {
+            HttpURLConnection var3 = this.makeConnection(this.getUrl());
+            int var4 = var3.getResponseCode();
+            if (var4 / 100 == 2) {
+                this.updateExpectedSize(var3);
+                MonitoringInputStream var5 = new MonitoringInputStream(var3.getInputStream(), this.getMonitor());
+                FileOutputStream var6 = new FileOutputStream(this.getTarget());
+                String var7 = copyAndDigest(var5, var6, "SHA", 40);
+                if (this.expectedHash.equalsIgnoreCase(var7)) {
+                    return "Downloaded successfully and hash matched";
+                } else {
+                    throw new RuntimeException(String.format("Hash did not match downloaded file (Expected %s, downloaded %s)", this.expectedHash, var7));
+                }
+            } else if (this.getTarget().isFile()) {
+                return "Couldn't connect to server (responded with " + var4 + ") but have local file, assuming it's good";
+            } else {
+                throw new RuntimeException("Server responded with " + var4);
+            }
+        } catch (IOException var8) {
+            if (this.getTarget().isFile()) {
+                return "Couldn't connect to server (" + var8.getClass().getSimpleName() + ": '" + var8.getMessage() + "') but have local file, assuming it's good";
+            } else {
+                throw var8;
+            }
+        }
+    }
+}
diff --git a/net/minecraft/launcher/updater/RemoteVersionList.java b/net/minecraft/launcher/updater/RemoteVersionList.java
new file mode 100644
index 0000000..98350c7
--- /dev/null
+++ b/net/minecraft/launcher/updater/RemoteVersionList.java
@@ -0,0 +1,87 @@
+package net.minecraft.launcher.updater;
+
+import com.google.common.collect.Maps;
+import com.mojang.launcher.Http;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.Version;
+import java.io.IOException;
+import java.net.Proxy;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+
+public class RemoteVersionList extends VersionList {
+    private final URL manifestUrl;
+    private final Proxy proxy;
+
+    public RemoteVersionList(URL var1, Proxy var2) {
+        this.manifestUrl = var1;
+        this.proxy = var2;
+    }
+
+    public CompleteMinecraftVersion getCompleteVersion(Version var1) throws IOException {
+        if (var1 instanceof CompleteVersion) {
+            return (CompleteMinecraftVersion)var1;
+        } else if (!(var1 instanceof PartialVersion)) {
+            throw new IllegalArgumentException("Version must be a partial");
+        } else {
+            PartialVersion var2 = (PartialVersion)var1;
+            CompleteMinecraftVersion var3 = (CompleteMinecraftVersion)this.gson.fromJson(Http.performGet(var2.getUrl(), this.proxy), CompleteMinecraftVersion.class);
+            this.replacePartialWithFull(var2, var3);
+            return var3;
+        }
+    }
+
+    public void refreshVersions() throws IOException {
+        this.clearCache();
+        RemoteVersionList.RawVersionList var1 = (RemoteVersionList.RawVersionList)this.gson.fromJson(this.getContent(this.manifestUrl), RemoteVersionList.RawVersionList.class);
+        Iterator var2 = var1.getVersions().iterator();
+
+        while(var2.hasNext()) {
+            Version var3 = (Version)var2.next();
+            this.versions.add(var3);
+            this.versionsByName.put(var3.getId(), var3);
+        }
+
+        MinecraftReleaseType[] var6 = MinecraftReleaseType.values();
+        int var7 = var6.length;
+
+        for(int var4 = 0; var4 < var7; ++var4) {
+            MinecraftReleaseType var5 = var6[var4];
+            this.latestVersions.put(var5, this.versionsByName.get(var1.getLatestVersions().get(var5)));
+        }
+
+    }
+
+    public boolean hasAllFiles(CompleteMinecraftVersion var1, OperatingSystem var2) {
+        return true;
+    }
+
+    public String getContent(URL var1) throws IOException {
+        return Http.performGet(var1, this.proxy);
+    }
+
+    public Proxy getProxy() {
+        return this.proxy;
+    }
+
+    private static class RawVersionList {
+        private List<PartialVersion> versions = new ArrayList();
+        private Map<MinecraftReleaseType, String> latest = Maps.newEnumMap(MinecraftReleaseType.class);
+
+        private RawVersionList() {
+        }
+
+        public List<PartialVersion> getVersions() {
+            return this.versions;
+        }
+
+        public Map<MinecraftReleaseType, String> getLatestVersions() {
+            return this.latest;
+        }
+    }
+}
diff --git a/net/minecraft/launcher/updater/VersionList.java b/net/minecraft/launcher/updater/VersionList.java
new file mode 100644
index 0000000..758ae42
--- /dev/null
+++ b/net/minecraft/launcher/updater/VersionList.java
@@ -0,0 +1,158 @@
+package net.minecraft.launcher.updater;
+
+import com.google.common.collect.Maps;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
+import com.mojang.launcher.versions.CompleteVersion;
+import com.mojang.launcher.versions.ReleaseType;
+import com.mojang.launcher.versions.ReleaseTypeAdapterFactory;
+import com.mojang.launcher.versions.Version;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
+
+public abstract class VersionList {
+    protected final Gson gson;
+    protected final Map<String, Version> versionsByName = new HashMap();
+    protected final List<Version> versions = new ArrayList();
+    protected final Map<MinecraftReleaseType, Version> latestVersions = Maps.newEnumMap(MinecraftReleaseType.class);
+
+    public VersionList() {
+        GsonBuilder var1 = new GsonBuilder();
+        var1.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
+        var1.registerTypeAdapter(Date.class, new DateTypeAdapter());
+        var1.registerTypeAdapter(ReleaseType.class, new ReleaseTypeAdapterFactory(MinecraftReleaseTypeFactory.instance()));
+        var1.registerTypeAdapter(Argument.class, new Argument.Serializer());
+        var1.enableComplexMapKeySerialization();
+        var1.setPrettyPrinting();
+        this.gson = var1.create();
+    }
+
+    public Collection<Version> getVersions() {
+        return this.versions;
+    }
+
+    public Version getLatestVersion(MinecraftReleaseType var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Type cannot be null");
+        } else {
+            return (Version)this.latestVersions.get(var1);
+        }
+    }
+
+    public Version getVersion(String var1) {
+        if (var1 != null && var1.length() != 0) {
+            return (Version)this.versionsByName.get(var1);
+        } else {
+            throw new IllegalArgumentException("Name cannot be null or empty");
+        }
+    }
+
+    public abstract CompleteMinecraftVersion getCompleteVersion(Version var1) throws IOException;
+
+    protected void replacePartialWithFull(PartialVersion var1, CompleteVersion var2) {
+        Collections.replaceAll(this.versions, var1, var2);
+        this.versionsByName.put(var1.getId(), var2);
+        if (this.latestVersions.get(var1.getType()) == var1) {
+            this.latestVersions.put(var1.getType(), var2);
+        }
+
+    }
+
+    protected void clearCache() {
+        this.versionsByName.clear();
+        this.versions.clear();
+        this.latestVersions.clear();
+    }
+
+    public abstract void refreshVersions() throws IOException;
+
+    public CompleteVersion addVersion(CompleteVersion var1) {
+        if (var1.getId() == null) {
+            throw new IllegalArgumentException("Cannot add blank version");
+        } else if (this.getVersion(var1.getId()) != null) {
+            throw new IllegalArgumentException("Version '" + var1.getId() + "' is already tracked");
+        } else {
+            this.versions.add(var1);
+            this.versionsByName.put(var1.getId(), var1);
+            return var1;
+        }
+    }
+
+    public void removeVersion(String var1) {
+        if (var1 != null && var1.length() != 0) {
+            Version var2 = this.getVersion(var1);
+            if (var2 == null) {
+                throw new IllegalArgumentException("Unknown version - cannot remove null");
+            } else {
+                this.removeVersion(var2);
+            }
+        } else {
+            throw new IllegalArgumentException("Name cannot be null or empty");
+        }
+    }
+
+    public void removeVersion(Version var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Cannot remove null version");
+        } else {
+            this.versions.remove(var1);
+            this.versionsByName.remove(var1.getId());
+            MinecraftReleaseType[] var2 = MinecraftReleaseType.values();
+            int var3 = var2.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+                MinecraftReleaseType var5 = var2[var4];
+                if (this.getLatestVersion(var5) == var1) {
+                    this.latestVersions.remove(var5);
+                }
+            }
+
+        }
+    }
+
+    public void setLatestVersion(Version var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Cannot set latest version to null");
+        } else {
+            this.latestVersions.put((MinecraftReleaseType)var1.getType(), var1);
+        }
+    }
+
+    public void setLatestVersion(String var1) {
+        if (var1 != null && var1.length() != 0) {
+            Version var2 = this.getVersion(var1);
+            if (var2 == null) {
+                throw new IllegalArgumentException("Unknown version - cannot set latest version to null");
+            } else {
+                this.setLatestVersion(var2);
+            }
+        } else {
+            throw new IllegalArgumentException("Name cannot be null or empty");
+        }
+    }
+
+    public String serializeVersion(CompleteVersion var1) {
+        if (var1 == null) {
+            throw new IllegalArgumentException("Cannot serialize null!");
+        } else {
+            return this.gson.toJson(var1);
+        }
+    }
+
+    public abstract boolean hasAllFiles(CompleteMinecraftVersion var1, OperatingSystem var2);
+
+    public void uninstallVersion(Version var1) {
+        this.removeVersion(var1);
+    }
+}
diff --git a/yggdrasil_session_pubkey.der b/yggdrasil_session_pubkey.der
new file mode 100644
index 0000000000000000000000000000000000000000..9c79a3aa4771da1f15af37a2af0898f878ad816f
GIT binary patch
literal 550
zcmV+>0@?jAf&wBi4F(A+hDe6@4FLfG1potr0uKN%f&vNxf&u{m%20R*skxUv<HENE
z&!JuY`QK6(FP9q=N`7P@ul8tRwF`L+%Y|cy32_&oMNui=#uIG7_~G4{t&ki<09H2U
z?Bpa=a32Lg_GfU7t07#1?MI`kbhXzNT$DV85iI1EsAEC3y*v=!UovsLh*IDXk^wUt
zJqGc2vwy{g;qpAFl}(wKV?~(ZoS3Tm3P<JRX*5qh@N5mP79(r5&lSvgd1!S#<(w?l
zzay9gwae%tU<WIX#m5Qq8P|MYa$|vXY2x(rLUaFrgapyNMD78~8$o}Aa`4nTvem4O
z_mm>>`)yD7%qARQ>bP36CtP}x@~Z9*VkPYUS6pWrZtT#q)8GCbf<y%=Kl9}scMO*I
zu#RDr=*Pn=>0*5+4Pyw;#Tq!Aq{bDO|Iw<43LnG*#4;?Z&LM<E(on|TyupXcARxlP
zx(fh&7Wy-JstTf-Ou!%gP$P$tMJ9OC`?kdSwnSG-uxlMc5`)hqy<Z^+&P&YW)6Srd
zk&z12viIiGJvY-w^ojXZ0px9ncp@#3(di|9vVw@kXW97{c>71zXE@J`@_dMl`?qQ1
z@3qR;mm=XG_-{G#4vhRxmZiQslrTtB_&7&0ECnD9)gZ}j`e&Je+s<w&Z{mU+*|6l^
oy;TO;3<Dz5n;~AJ@er{Uvv!~{@;#%uk6Tk{6LMDH0s{d60Z%FkUH||9

literal 0
HcmV?d00001

-- 
2.43.0.windows.1

From 59986764689a472e94fa22de641d6725cffa84d1 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 10 Mar 2022 01:37:59 -0600
Subject: [PATCH 02/33] Add maven project

---
 .gitignore                                    |   3 +
 Log4j-config.xsd                              | 133 -----------
 Log4j-events.dtd                              |  64 -----
 Log4j-events.xsd                              |  74 ------
 META-INF/MANIFEST.MF                          |   4 -
 pom.xml                                       | 223 ++++++++++++++++++
 .../main/java/com}/mojang/authlib/Agent.java  |   0
 .../mojang/authlib/AuthenticationService.java |   0
 .../authlib/BaseAuthenticationService.java    |   0
 .../authlib/BaseUserAuthentication.java       |   0
 .../java/com}/mojang/authlib/GameProfile.java |   0
 .../mojang/authlib/GameProfileRepository.java |   0
 .../authlib/HttpAuthenticationService.java    |   0
 .../authlib/HttpUserAuthentication.java       |   0
 .../mojang/authlib/ProfileLookupCallback.java |   0
 .../mojang/authlib/UserAuthentication.java    |   0
 .../java/com}/mojang/authlib/UserType.java    |   0
 .../exceptions/AuthenticationException.java   |   0
 .../AuthenticationUnavailableException.java   |   0
 .../InvalidCredentialsException.java          |   0
 .../exceptions/UserMigratedException.java     |   0
 .../legacy/LegacyAuthenticationService.java   |   0
 .../legacy/LegacyMinecraftSessionService.java |   0
 .../legacy/LegacyUserAuthentication.java      |   0
 .../BaseMinecraftSessionService.java          |   0
 .../HttpMinecraftSessionService.java          |   0
 .../minecraft/InsecureTextureException.java   |   0
 .../minecraft/MinecraftProfileTexture.java    |   0
 .../minecraft/MinecraftSessionService.java    |   0
 .../mojang/authlib/properties/Property.java   |   0
 .../authlib/properties/PropertyMap.java       |   0
 .../yggdrasil/ProfileIncompleteException.java |   0
 .../yggdrasil/ProfileNotFoundException.java   |   0
 .../YggdrasilAuthenticationService.java       |   0
 .../YggdrasilGameProfileRepository.java       |   0
 .../YggdrasilMinecraftSessionService.java     |   0
 .../YggdrasilUserAuthentication.java          |   0
 .../request/AuthenticationRequest.java        |   0
 .../yggdrasil/request/InvalidateRequest.java  |   0
 .../request/JoinMinecraftServerRequest.java   |   0
 .../yggdrasil/request/RefreshRequest.java     |   0
 .../yggdrasil/request/ValidateRequest.java    |   0
 .../response/AuthenticationResponse.java      |   0
 .../HasJoinedMinecraftServerResponse.java     |   0
 .../MinecraftProfilePropertiesResponse.java   |   0
 .../response/MinecraftTexturesPayload.java    |   0
 .../ProfileSearchResultsResponse.java         |   0
 .../yggdrasil/response/RefreshResponse.java   |   0
 .../authlib/yggdrasil/response/Response.java  |   0
 .../authlib/yggdrasil/response/User.java      |   0
 .../main/java/com}/mojang/launcher/Http.java  |   0
 .../java/com}/mojang/launcher/Launcher.java   |   0
 .../launcher/LegacyPropertyMapSerializer.java |   0
 .../com}/mojang/launcher/OperatingSystem.java |   0
 .../launcher/SharedLauncherConstants.java     |   0
 .../com}/mojang/launcher/UserInterface.java   |   0
 .../events/GameOutputLogProcessor.java        |   0
 .../events/RefreshedVersionsListener.java     |   0
 .../launcher/game/GameInstanceStatus.java     |   0
 .../game/process/AbstractGameProcess.java     |   0
 .../launcher/game/process/GameProcess.java    |   0
 .../game/process/GameProcessBuilder.java      |   0
 .../game/process/GameProcessFactory.java      |   0
 .../game/process/GameProcessRunnable.java     |   0
 .../process/direct/DirectGameProcess.java     |   0
 .../direct/DirectGameProcessFactory.java      |   0
 .../direct/DirectProcessInputMonitor.java     |   0
 .../game/runner/AbstractGameRunner.java       |   0
 .../launcher/game/runner/GameRunner.java      |   0
 .../game/runner/GameRunnerListener.java       |   0
 .../launcher/updater/DateTypeAdapter.java     |   0
 .../launcher/updater/DownloadProgress.java    |   0
 .../ExceptionalThreadPoolExecutor.java        |   0
 .../launcher/updater/FileTypeAdapter.java     |   0
 .../LowerCaseEnumTypeAdapterFactory.java      |   0
 .../launcher/updater/VersionFilter.java       |   0
 .../launcher/updater/VersionManager.java      |   0
 .../launcher/updater/VersionSyncInfo.java     |   0
 .../download/ChecksummedDownloadable.java     |   0
 .../updater/download/DownloadJob.java         |   0
 .../updater/download/DownloadListener.java    |   0
 .../updater/download/Downloadable.java        |   0
 .../updater/download/EtagDownloadable.java    |   0
 .../download/MonitoringInputStream.java       |   0
 .../updater/download/ProgressContainer.java   |   0
 .../download/assets/AssetDownloadable.java    |   0
 .../updater/download/assets/AssetIndex.java   |   0
 .../launcher/versions/CompatibilityRule.java  |   0
 .../launcher/versions/CompleteVersion.java    |   0
 .../launcher/versions/ExtractRules.java       |   0
 .../mojang/launcher/versions/ReleaseType.java |   0
 .../versions/ReleaseTypeAdapterFactory.java   |   0
 .../launcher/versions/ReleaseTypeFactory.java |   0
 .../mojang/launcher/versions/Version.java     |   0
 .../com}/mojang/util/QueueLogAppender.java    |   0
 .../com}/mojang/util/UUIDTypeAdapter.java     |   0
 .../java/net}/minecraft/hopper/Crash.java     |   0
 .../net}/minecraft/hopper/HopperService.java  |   0
 .../java/net}/minecraft/hopper/Problem.java   |   0
 .../net}/minecraft/hopper/PublishRequest.java |   0
 .../minecraft/hopper/PublishResponse.java     |   0
 .../java/net}/minecraft/hopper/Report.java    |   0
 .../java/net}/minecraft/hopper/Response.java  |   0
 .../net}/minecraft/hopper/SubmitRequest.java  |   0
 .../net}/minecraft/hopper/SubmitResponse.java |   0
 .../main/java/net}/minecraft/hopper/Util.java |   0
 .../minecraft/launcher/CompatibilityRule.java |   0
 .../launcher/CurrentLaunchFeatureMatcher.java |   0
 .../net}/minecraft/launcher/Launcher.java     |   0
 .../minecraft/launcher/LauncherConstants.java |   0
 .../java/net}/minecraft/launcher/Main.java    |   0
 .../launcher/MinecraftUserInterface.java      |   0
 .../launcher/SwingUserInterface.java          |   0
 .../launcher/game/GameLaunchDispatcher.java   |   0
 .../launcher/game/MinecraftGameRunner.java    |   0
 .../launcher/game/MinecraftReleaseType.java   |   0
 .../game/MinecraftReleaseTypeFactory.java     |   0
 .../profile/AuthenticationDatabase.java       |   0
 .../profile/LauncherVisibilityRule.java       |   0
 .../minecraft/launcher/profile/Profile.java   |   0
 .../launcher/profile/ProfileManager.java      |   0
 .../profile/RefreshedProfilesListener.java    |   0
 .../launcher/profile/UserChangedListener.java |   0
 .../minecraft/launcher/ui/BottomBarPanel.java |   0
 .../minecraft/launcher/ui/LauncherPanel.java  |   0
 .../minecraft/launcher/ui/TexturedPanel.java  |   0
 .../ui/bottombar/PlayButtonPanel.java         |   0
 .../ui/bottombar/PlayerInfoPanel.java         |   0
 .../ui/bottombar/ProfileSelectionPanel.java   |   0
 .../ui/bottombar/SidebarGridForm.java         |   0
 .../ui/bottombar/StatusPanelForm.java         |   0
 .../ui/popups/login/AuthErrorForm.java        |   0
 .../ui/popups/login/ExistingUserListForm.java |   0
 .../launcher/ui/popups/login/LogInForm.java   |   0
 .../launcher/ui/popups/login/LogInPopup.java  |   0
 .../ui/popups/profile/ProfileEditorPopup.java |   0
 .../ui/popups/profile/ProfileInfoPanel.java   |   0
 .../ui/popups/profile/ProfileJavaPanel.java   |   0
 .../popups/profile/ProfileVersionPanel.java   |   0
 .../launcher/ui/tabs/ConsoleTab.java          |   0
 .../launcher/ui/tabs/CrashReportTab.java      |   0
 .../launcher/ui/tabs/GameOutputTab.java       |   0
 .../launcher/ui/tabs/LauncherTabPanel.java    |   0
 .../launcher/ui/tabs/ProfileListTab.java      |   0
 .../launcher/ui/tabs/WebsiteTab.java          |   0
 .../launcher/ui/tabs/website/Browser.java     |   0
 .../launcher/ui/tabs/website/JFXBrowser.java  |   0
 .../ui/tabs/website/LegacySwingBrowser.java   |   0
 .../updater/AbstractDownloadInfo.java         |   0
 .../minecraft/launcher/updater/Argument.java  |   0
 .../launcher/updater/ArgumentType.java        |   0
 .../launcher/updater/AssetIndexInfo.java      |   0
 .../updater/CompleteMinecraftVersion.java     |   0
 .../launcher/updater/DownloadInfo.java        |   0
 .../launcher/updater/DownloadType.java        |   0
 .../updater/FileBasedVersionList.java         |   0
 .../minecraft/launcher/updater/Library.java   |   0
 .../launcher/updater/LibraryDownloadInfo.java |   0
 .../launcher/updater/LocalDownloadInfo.java   |   0
 .../launcher/updater/LocalVersionList.java    |   0
 .../updater/MinecraftVersionManager.java      |   0
 .../launcher/updater/PartialVersion.java      |   0
 .../updater/PreHashedDownloadable.java        |   0
 .../launcher/updater/RemoteVersionList.java   |   0
 .../launcher/updater/VersionList.java         |   0
 .../META-INF}/log4j-provider.properties       |   0
 dirt.png => src/main/resources/dirt.png       | Bin
 favicon.png => src/main/resources/favicon.png | Bin
 .../main/resources/launcher_properties.json   |   0
 log4j2.xml => src/main/resources/log4j2.xml   |   0
 .../main/resources/minecraft_logo.png         | Bin
 .../resources/yggdrasil_session_pubkey.der    | Bin
 172 files changed, 226 insertions(+), 275 deletions(-)
 create mode 100644 .gitignore
 delete mode 100644 Log4j-config.xsd
 delete mode 100644 Log4j-events.dtd
 delete mode 100644 Log4j-events.xsd
 delete mode 100644 META-INF/MANIFEST.MF
 create mode 100644 pom.xml
 rename {com => src/main/java/com}/mojang/authlib/Agent.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/AuthenticationService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/BaseAuthenticationService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/BaseUserAuthentication.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/GameProfile.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/GameProfileRepository.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/HttpAuthenticationService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/HttpUserAuthentication.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/ProfileLookupCallback.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/UserAuthentication.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/UserType.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/exceptions/AuthenticationException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/exceptions/AuthenticationUnavailableException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/exceptions/InvalidCredentialsException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/exceptions/UserMigratedException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/legacy/LegacyAuthenticationService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/legacy/LegacyMinecraftSessionService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/legacy/LegacyUserAuthentication.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/minecraft/BaseMinecraftSessionService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/minecraft/HttpMinecraftSessionService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/minecraft/InsecureTextureException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/minecraft/MinecraftProfileTexture.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/minecraft/MinecraftSessionService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/properties/Property.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/properties/PropertyMap.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/ProfileIncompleteException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/ProfileNotFoundException.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/request/AuthenticationRequest.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/request/InvalidateRequest.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/request/RefreshRequest.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/request/ValidateRequest.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/AuthenticationResponse.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/RefreshResponse.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/Response.java (100%)
 rename {com => src/main/java/com}/mojang/authlib/yggdrasil/response/User.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/Http.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/Launcher.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/LegacyPropertyMapSerializer.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/OperatingSystem.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/SharedLauncherConstants.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/UserInterface.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/events/GameOutputLogProcessor.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/events/RefreshedVersionsListener.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/GameInstanceStatus.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/AbstractGameProcess.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/GameProcess.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/GameProcessBuilder.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/GameProcessFactory.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/GameProcessRunnable.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/direct/DirectGameProcess.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/direct/DirectGameProcessFactory.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/runner/AbstractGameRunner.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/runner/GameRunner.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/game/runner/GameRunnerListener.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/DateTypeAdapter.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/DownloadProgress.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/FileTypeAdapter.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/VersionFilter.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/VersionManager.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/VersionSyncInfo.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/ChecksummedDownloadable.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/DownloadJob.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/DownloadListener.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/Downloadable.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/EtagDownloadable.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/MonitoringInputStream.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/ProgressContainer.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/assets/AssetDownloadable.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/updater/download/assets/AssetIndex.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/CompatibilityRule.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/CompleteVersion.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/ExtractRules.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/ReleaseType.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/ReleaseTypeAdapterFactory.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/ReleaseTypeFactory.java (100%)
 rename {com => src/main/java/com}/mojang/launcher/versions/Version.java (100%)
 rename {com => src/main/java/com}/mojang/util/QueueLogAppender.java (100%)
 rename {com => src/main/java/com}/mojang/util/UUIDTypeAdapter.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/Crash.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/HopperService.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/Problem.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/PublishRequest.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/PublishResponse.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/Report.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/Response.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/SubmitRequest.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/SubmitResponse.java (100%)
 rename {net => src/main/java/net}/minecraft/hopper/Util.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/CompatibilityRule.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/CurrentLaunchFeatureMatcher.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/Launcher.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/LauncherConstants.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/Main.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/MinecraftUserInterface.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/SwingUserInterface.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/game/GameLaunchDispatcher.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/game/MinecraftGameRunner.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/game/MinecraftReleaseType.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/game/MinecraftReleaseTypeFactory.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/AuthenticationDatabase.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/LauncherVisibilityRule.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/Profile.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/ProfileManager.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/RefreshedProfilesListener.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/profile/UserChangedListener.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/BottomBarPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/LauncherPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/TexturedPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/bottombar/PlayButtonPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/bottombar/SidebarGridForm.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/bottombar/StatusPanelForm.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/login/AuthErrorForm.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/login/ExistingUserListForm.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/login/LogInForm.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/login/LogInPopup.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/ConsoleTab.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/CrashReportTab.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/GameOutputTab.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/LauncherTabPanel.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/ProfileListTab.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/WebsiteTab.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/website/Browser.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/website/JFXBrowser.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/AbstractDownloadInfo.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/Argument.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/ArgumentType.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/AssetIndexInfo.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/CompleteMinecraftVersion.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/DownloadInfo.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/DownloadType.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/FileBasedVersionList.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/Library.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/LibraryDownloadInfo.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/LocalDownloadInfo.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/LocalVersionList.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/MinecraftVersionManager.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/PartialVersion.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/PreHashedDownloadable.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/RemoteVersionList.java (100%)
 rename {net => src/main/java/net}/minecraft/launcher/updater/VersionList.java (100%)
 rename {META-INF => src/main/resources/META-INF}/log4j-provider.properties (100%)
 rename dirt.png => src/main/resources/dirt.png (100%)
 rename favicon.png => src/main/resources/favicon.png (100%)
 rename launcher_properties.json => src/main/resources/launcher_properties.json (100%)
 rename log4j2.xml => src/main/resources/log4j2.xml (100%)
 rename minecraft_logo.png => src/main/resources/minecraft_logo.png (100%)
 rename yggdrasil_session_pubkey.der => src/main/resources/yggdrasil_session_pubkey.der (100%)

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..5231862
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+.idea
+*.iml
+target
diff --git a/Log4j-config.xsd b/Log4j-config.xsd
deleted file mode 100644
index a19e125..0000000
--- a/Log4j-config.xsd
+++ /dev/null
@@ -1,133 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Licensed to the Apache Software Foundation (ASF) under one or more
- contributor license agreements.  See the NOTICE file distributed with
- this work for additional information regarding copyright ownership.
- The ASF licenses this file to You under the Apache License, Version 2.0
- (the "License"); you may not use this file except in compliance with
- the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
-
--->
-<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
-    <xs:element name="Configuration" type="ConfigurationType"/>
-    <xs:complexType name="ConfigurationType">
-        <xs:sequence>
-            <xs:element name="Properties" type="PropertiesType"/>
-            <xs:choice minOccurs="0" maxOccurs="1">
-                <xs:element name="Filters" type="FiltersType"/>
-                <xs:element name="Filter" type="FilterType"/>
-            </xs:choice>
-            <xs:element name="ThresholdFilter" type="ThresholdFilterType"/>
-            <xs:element name="Appenders" type="AppendersType"/>
-            <xs:element name="Loggers" type="LoggersType"/>
-        </xs:sequence>
-        <xs:attribute name="packages" type="xs:string"/>
-        <xs:attribute name="status" type="xs:string"/>
-        <xs:attribute name="strict" type="xs:string"/>
-        <xs:attribute name="name" type="xs:string"/>
-        <xs:attribute name="advertiser" type="xs:string"/>
-    </xs:complexType>
-    <xs:complexType name="PropertiesType">
-        <xs:sequence>
-            <xs:element name="Property" type="PropertyType"/>
-        </xs:sequence>
-    </xs:complexType>
-    <xs:complexType name="AppenderType">
-        <xs:sequence>
-            <xs:element name="Layout" type="LayoutType" minOccurs="0"/>
-            <xs:choice minOccurs="0" maxOccurs="1">
-                <xs:element name="Filters" type="FiltersType"/>
-                <xs:element name="Filter" type="FilterType"/>
-            </xs:choice>
-        </xs:sequence>
-        <xs:attribute name="type" type="xs:string" use="required"/>
-        <xs:attribute name="name" type="xs:string" use="required"/>
-        <xs:attribute name="fileName" type="xs:string" use="optional"/>
-    </xs:complexType>
-    <xs:complexType name="RootType">
-        <xs:sequence>
-            <xs:element name="AppenderRef" type="AppenderRefType" minOccurs="1" maxOccurs="unbounded"/>
-        </xs:sequence>
-        <xs:attribute name="level" type="xs:string"/>
-    </xs:complexType>
-    <xs:complexType name="PropertyType">
-        <xs:simpleContent>
-            <xs:extension base="xs:string">
-                <xs:attribute name="name" type="xs:string"/>
-            </xs:extension>
-        </xs:simpleContent>
-    </xs:complexType>
-    <xs:complexType name="KeyValuePairType">
-        <xs:simpleContent>
-            <xs:extension base="xs:string">
-                <xs:attribute name="key" type="xs:string"/>
-                <xs:attribute name="value" type="xs:string"/>
-            </xs:extension>
-        </xs:simpleContent>
-    </xs:complexType>
-    <xs:complexType name="AppendersType">
-        <xs:sequence>
-            <xs:element name="Appender" type="AppenderType" minOccurs="1" maxOccurs="unbounded"/>
-        </xs:sequence>
-    </xs:complexType>
-    <xs:complexType name="AppenderRefType">
-        <xs:simpleContent>
-            <xs:extension base="xs:string">
-                <xs:attribute name="ref" type="xs:string" use="required"/>
-            </xs:extension>
-        </xs:simpleContent>
-    </xs:complexType>
-    <xs:complexType name="LoggerType">
-        <xs:sequence>
-            <xs:choice minOccurs="0" maxOccurs="1">
-                <xs:element name="Filters" type="FiltersType"/>
-                <xs:element name="Filter" type="FilterType"/>
-            </xs:choice>
-            <xs:element name="AppenderRef" type="AppenderRefType"/>
-        </xs:sequence>
-        <xs:attribute name="name" type="xs:string" use="required"/>
-        <xs:attribute name="level" type="xs:string" use="optional"/>
-        <xs:attribute name="additivity" type="xs:string" use="optional"/>
-    </xs:complexType>
-    <xs:complexType name="FilterType" mixed="true">
-        <xs:sequence>
-            <xs:element name="KeyValuePair" type="KeyValuePairType" minOccurs="0"/>
-        </xs:sequence>
-        <xs:attribute name="type" type="xs:string" use="required"/>
-        <xs:attribute name="level" type="xs:string" use="optional"/>
-        <xs:attribute name="marker" type="xs:string" use="optional"/>
-        <xs:attribute name="onMatch" type="xs:string" use="optional"/>
-        <xs:attribute name="onMismatch" type="xs:string" use="optional"/>
-    </xs:complexType>
-    <xs:complexType name="FiltersType">
-        <xs:sequence>
-            <xs:element name="Filter" type="FilterType" minOccurs="0" maxOccurs="unbounded"/>
-        </xs:sequence>
-    </xs:complexType>
-    <xs:complexType name="LoggersType" mixed="true">
-        <xs:sequence>
-            <xs:element name="Logger" type="LoggerType" minOccurs="0" maxOccurs="unbounded"/>
-            <xs:element name="Root" type="RootType" minOccurs="1" maxOccurs="1"/>
-        </xs:sequence>
-    </xs:complexType>
-    <xs:complexType name="LayoutType" mixed="true">
-        <xs:sequence>
-            <xs:element name="Pattern" type="xs:string" minOccurs="0"/>
-        </xs:sequence>
-        <xs:attribute name="Type" type="xs:string" use="required"/>
-        <xs:attribute name="Pattern" type="xs:string" use="optional"/>
-    </xs:complexType>
-    <xs:complexType name="ThresholdFilterType">
-        <xs:attribute name="level" type="xs:string" use="optional"/>
-        <xs:attribute name="onMatch" type="xs:string" use="optional"/>
-        <xs:attribute name="onMismatch" type="xs:string" use="optional"/>
-    </xs:complexType>
-</xs:schema>
diff --git a/Log4j-events.dtd b/Log4j-events.dtd
deleted file mode 100644
index 91af8c7..0000000
--- a/Log4j-events.dtd
+++ /dev/null
@@ -1,64 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Licensed to the Apache Software Foundation (ASF) under one or more
- contributor license agreements.  See the NOTICE file distributed with
- this work for additional information regarding copyright ownership.
- The ASF licenses this file to You under the Apache License, Version 2.0
- (the "License"); you may not use this file except in compliance with
- the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-<!--DTD generated by XMLSpy v2011 rel. 3 sp1 (x64) (http://www.altova.com)-->
-<!--the entity declarations may be overridden in the internal subset-->
-<!--namespace prefixes-->
-<!ENTITY % log4j_prefix "log4j">
-<!--namespace prefix to namespace uri mappings-->
-<!ENTITY % log4j_prefix.. "%log4j_prefix;:">
-<!--namespaces attributes for root element-->
-<!ENTITY % documentElementAttributes " xmlns:%log4j_prefix; CDATA 'http://logging.apache.org/log4j/2.0/events'">
-<!--the declarations below should not be modified-->
-<!--element name mappings-->
-<!ENTITY % log4j..Events "%log4j_prefix..;Events">
-<!ENTITY % log4j..Event "%log4j_prefix..;Event">
-<!ENTITY % log4j..Message "%log4j_prefix..;Message">
-<!ENTITY % log4j..NDC "%log4j_prefix..;NDC">
-<!ENTITY % log4j..Throwable "%log4j_prefix..;Throwable">
-<!ENTITY % log4j..LocationInfo "%log4j_prefix..;LocationInfo">
-<!ENTITY % log4j..Properties "%log4j_prefix..;Properties">
-<!ENTITY % log4j..Data "%log4j_prefix..;Data">
-<!--element and attribute declarations-->
-<!--Log4J 2.0 XML Schema-->
-<!ELEMENT %log4j..Events; ((%log4j..Event;)*)>
-<!ATTLIST %log4j..Events;
-	%documentElementAttributes;
->
-<!ELEMENT %log4j..Event; (%log4j..Message;, (%log4j..NDC;)?, (%log4j..Throwable;)?, (%log4j..LocationInfo;)?, (%log4j..Properties;)?)>
-<!ATTLIST %log4j..Event;
-	logger CDATA #REQUIRED
-	timestamp NMTOKEN #REQUIRED
-	level (OFF | FATAL | ERROR | WARN | INFO | DEBUG | TRACE | ALL) #REQUIRED
-	thread CDATA #REQUIRED
->
-<!ELEMENT %log4j..Message; ANY>
-<!ELEMENT %log4j..NDC; ANY>
-<!ELEMENT %log4j..Throwable; ANY>
-<!ELEMENT %log4j..LocationInfo; EMPTY>
-<!ATTLIST %log4j..LocationInfo;
-	class CDATA #REQUIRED
-	method CDATA #REQUIRED
-	file CDATA #REQUIRED
-	line NMTOKEN #REQUIRED
->
-<!ELEMENT %log4j..Properties; ((%log4j..Data;)+)>
-<!ELEMENT %log4j..Data; EMPTY>
-<!ATTLIST %log4j..Data;
-	name CDATA #REQUIRED
-	value CDATA #REQUIRED
->
diff --git a/Log4j-events.xsd b/Log4j-events.xsd
deleted file mode 100644
index 2310227..0000000
--- a/Log4j-events.xsd
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- edited with XMLSpy v2011 rel. 3 sp1 (x64) (http://www.altova.com) by Gary Gregory (Rocket Software) -->
-<!--
- Licensed to the Apache Software Foundation (ASF) under one or more
- contributor license agreements.  See the NOTICE file distributed with
- this work for additional information regarding copyright ownership.
- The ASF licenses this file to You under the Apache License, Version 2.0
- (the "License"); you may not use this file except in compliance with
- the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:log4j="http://logging.apache.org/log4j/2.0/events" targetNamespace="http://logging.apache.org/log4j/2.0/events" elementFormDefault="qualified" attributeFormDefault="unqualified">
-    <xs:element name="Events">
-        <xs:annotation>
-            <xs:documentation>Log4J 2.0 XML Schema for XML log event files.</xs:documentation>
-        </xs:annotation>
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element name="Event" minOccurs="0" maxOccurs="unbounded">
-                    <xs:complexType>
-                        <xs:sequence>
-                            <xs:element name="Message"/>
-                            <xs:element name="NDC" minOccurs="0"/>
-                            <xs:element name="Throwable" minOccurs="0"/>
-                            <xs:element name="LocationInfo" minOccurs="0">
-                                <xs:complexType>
-                                    <xs:attribute name="class" type="xs:string" use="required"/>
-                                    <xs:attribute name="method" type="xs:string" use="required"/>
-                                    <xs:attribute name="file" type="xs:string" use="required"/>
-                                    <xs:attribute name="line" type="xs:int" use="required"/>
-                                </xs:complexType>
-                            </xs:element>
-                            <xs:element name="Properties" minOccurs="0">
-                                <xs:complexType>
-                                    <xs:sequence>
-                                        <xs:element name="Data" maxOccurs="unbounded">
-                                            <xs:complexType>
-                                                <xs:attribute name="name" type="xs:string" use="required"/>
-                                                <xs:attribute name="value" use="required"/>
-                                            </xs:complexType>
-                                        </xs:element>
-                                    </xs:sequence>
-                                </xs:complexType>
-                            </xs:element>
-                        </xs:sequence>
-                        <xs:attribute name="logger" type="xs:string" use="required"/>
-                        <xs:attribute name="timestamp" type="xs:long" use="required"/>
-                        <xs:attribute name="level" type="log4j:LevelEnum" use="required"/>
-                        <xs:attribute name="thread" type="xs:string" use="required"/>
-                    </xs:complexType>
-                </xs:element>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:simpleType name="LevelEnum">
-        <xs:restriction base="xs:string">
-            <xs:enumeration value="OFF"/>
-            <xs:enumeration value="FATAL"/>
-            <xs:enumeration value="ERROR"/>
-            <xs:enumeration value="WARN"/>
-            <xs:enumeration value="INFO"/>
-            <xs:enumeration value="DEBUG"/>
-            <xs:enumeration value="TRACE"/>
-            <xs:enumeration value="ALL"/>
-        </xs:restriction>
-    </xs:simpleType>
-</xs:schema>
diff --git a/META-INF/MANIFEST.MF b/META-INF/MANIFEST.MF
deleted file mode 100644
index 6c5d5ec..0000000
--- a/META-INF/MANIFEST.MF
+++ /dev/null
@@ -1,4 +0,0 @@
-Manifest-Version: 1.0
-Implementation-Version: 1.6.93
-Main-Class: net.minecraft.launcher.Main
-
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..6ba32c4
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,223 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>dev.figboot</groupId>
+        <artifactId>olauncher-parent</artifactId>
+        <version>0.1.0</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <artifactId>olauncher</artifactId>
+    <version>1.7.3_01</version>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.8.0</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-jar-plugin</artifactId>
+                <version>3.2.0</version>
+                <configuration>
+                    <archive>
+                        <addMavenDescriptor>false</addMavenDescriptor>
+                        <manifest>
+                            <addClasspath>false</addClasspath>
+                        </manifest>
+                        <manifestEntries>
+                            <Main-Class>net.minecraft.launcher.Main</Main-Class>
+                            <Implementation-Version>${project.version}</Implementation-Version>
+                            <Multi-Release>true</Multi-Release> <!-- workaround to allow the launcher to run on newer java -->
+                        </manifestEntries>
+                    </archive>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.2.4</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <minimizeJar>true</minimizeJar>
+                    <filters>
+                        <filter>
+                            <artifact>*log4j*:*log4j*</artifact>
+                            <includes>
+                                <include>**</include>
+                            </includes>
+                        </filter>
+                    </filters>
+                    <createDependencyReducedPom>false</createDependencyReducedPom>
+                    <transformers>
+                        <transformer
+                                implementation="io.github.edwgiz.log4j.maven.plugins.shade.transformer.Log4j2PluginCacheFileTransformer">
+                        </transformer>
+                    </transformers>
+                </configuration>
+                <dependencies>
+                    <dependency>
+                        <groupId>io.github.edwgiz</groupId>
+                        <artifactId>log4j-maven-shade-plugin-extensions</artifactId>
+                        <version>2.17.1</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+            <plugin>
+                <groupId>io.github.git-commit-id</groupId>
+                <artifactId>git-commit-id-maven-plugin</artifactId>
+                <version>5.0.0</version>
+                <executions>
+                    <execution>
+                        <id>inner-repo</id>
+                        <phase>initialize</phase>
+                        <goals>
+                            <goal>revision</goal>
+                        </goals>
+                        <configuration>
+                            <generateGitPropertiesFilename>${project.build.outputDirectory}/ver/git-inner.properties</generateGitPropertiesFilename>
+                            <includeOnlyProperties>
+                                <property>^git.dirty$</property>
+                            </includeOnlyProperties>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>outer-repo</id>
+                        <phase>initialize</phase>
+                        <goals>
+                            <goal>revision</goal>
+                        </goals>
+                        <configuration>
+                            <generateGitPropertiesFilename>${project.build.outputDirectory}/ver/git-outer.properties</generateGitPropertiesFilename>
+                            <dotGitDirectory>../.git</dotGitDirectory>
+                            <includeOnlyProperties>
+                                <property>^git.closest.tag.name$</property>
+                                <property>^git.closest.tag.commit.count$</property>
+                                <property>^git.dirty$</property>
+                                <property>^git.commit.id.abbrev$</property>
+                            </includeOnlyProperties>
+                        </configuration>
+                    </execution>
+                </executions>
+                <configuration>
+                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+    <repositories>
+        <repository>
+            <id>central</id>
+            <url>https://repo1.maven.org/maven2/</url>
+        </repository>
+    </repositories>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>2.17.2</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>commons-io</groupId>
+            <artifactId>commons-io</artifactId>
+            <version>2.11.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>commons-codec</groupId>
+            <artifactId>commons-codec</artifactId>
+            <version>1.15</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+            <version>3.12.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-compress</artifactId>
+            <version>1.21</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-text</artifactId>
+            <version>1.9</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.tukaani</groupId>
+            <artifactId>xz</artifactId>
+            <version>1.9</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.9.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>31.1-jre</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>net.sf.jopt-simple</groupId>
+            <artifactId>jopt-simple</artifactId>
+            <version>5.0.4</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-controls</artifactId>
+            <version>17</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-swing</artifactId>
+            <version>17</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-web</artifactId>
+            <version>17</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.22</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/com/mojang/authlib/Agent.java b/src/main/java/com/mojang/authlib/Agent.java
similarity index 100%
rename from com/mojang/authlib/Agent.java
rename to src/main/java/com/mojang/authlib/Agent.java
diff --git a/com/mojang/authlib/AuthenticationService.java b/src/main/java/com/mojang/authlib/AuthenticationService.java
similarity index 100%
rename from com/mojang/authlib/AuthenticationService.java
rename to src/main/java/com/mojang/authlib/AuthenticationService.java
diff --git a/com/mojang/authlib/BaseAuthenticationService.java b/src/main/java/com/mojang/authlib/BaseAuthenticationService.java
similarity index 100%
rename from com/mojang/authlib/BaseAuthenticationService.java
rename to src/main/java/com/mojang/authlib/BaseAuthenticationService.java
diff --git a/com/mojang/authlib/BaseUserAuthentication.java b/src/main/java/com/mojang/authlib/BaseUserAuthentication.java
similarity index 100%
rename from com/mojang/authlib/BaseUserAuthentication.java
rename to src/main/java/com/mojang/authlib/BaseUserAuthentication.java
diff --git a/com/mojang/authlib/GameProfile.java b/src/main/java/com/mojang/authlib/GameProfile.java
similarity index 100%
rename from com/mojang/authlib/GameProfile.java
rename to src/main/java/com/mojang/authlib/GameProfile.java
diff --git a/com/mojang/authlib/GameProfileRepository.java b/src/main/java/com/mojang/authlib/GameProfileRepository.java
similarity index 100%
rename from com/mojang/authlib/GameProfileRepository.java
rename to src/main/java/com/mojang/authlib/GameProfileRepository.java
diff --git a/com/mojang/authlib/HttpAuthenticationService.java b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
similarity index 100%
rename from com/mojang/authlib/HttpAuthenticationService.java
rename to src/main/java/com/mojang/authlib/HttpAuthenticationService.java
diff --git a/com/mojang/authlib/HttpUserAuthentication.java b/src/main/java/com/mojang/authlib/HttpUserAuthentication.java
similarity index 100%
rename from com/mojang/authlib/HttpUserAuthentication.java
rename to src/main/java/com/mojang/authlib/HttpUserAuthentication.java
diff --git a/com/mojang/authlib/ProfileLookupCallback.java b/src/main/java/com/mojang/authlib/ProfileLookupCallback.java
similarity index 100%
rename from com/mojang/authlib/ProfileLookupCallback.java
rename to src/main/java/com/mojang/authlib/ProfileLookupCallback.java
diff --git a/com/mojang/authlib/UserAuthentication.java b/src/main/java/com/mojang/authlib/UserAuthentication.java
similarity index 100%
rename from com/mojang/authlib/UserAuthentication.java
rename to src/main/java/com/mojang/authlib/UserAuthentication.java
diff --git a/com/mojang/authlib/UserType.java b/src/main/java/com/mojang/authlib/UserType.java
similarity index 100%
rename from com/mojang/authlib/UserType.java
rename to src/main/java/com/mojang/authlib/UserType.java
diff --git a/com/mojang/authlib/exceptions/AuthenticationException.java b/src/main/java/com/mojang/authlib/exceptions/AuthenticationException.java
similarity index 100%
rename from com/mojang/authlib/exceptions/AuthenticationException.java
rename to src/main/java/com/mojang/authlib/exceptions/AuthenticationException.java
diff --git a/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java b/src/main/java/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
similarity index 100%
rename from com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
rename to src/main/java/com/mojang/authlib/exceptions/AuthenticationUnavailableException.java
diff --git a/com/mojang/authlib/exceptions/InvalidCredentialsException.java b/src/main/java/com/mojang/authlib/exceptions/InvalidCredentialsException.java
similarity index 100%
rename from com/mojang/authlib/exceptions/InvalidCredentialsException.java
rename to src/main/java/com/mojang/authlib/exceptions/InvalidCredentialsException.java
diff --git a/com/mojang/authlib/exceptions/UserMigratedException.java b/src/main/java/com/mojang/authlib/exceptions/UserMigratedException.java
similarity index 100%
rename from com/mojang/authlib/exceptions/UserMigratedException.java
rename to src/main/java/com/mojang/authlib/exceptions/UserMigratedException.java
diff --git a/com/mojang/authlib/legacy/LegacyAuthenticationService.java b/src/main/java/com/mojang/authlib/legacy/LegacyAuthenticationService.java
similarity index 100%
rename from com/mojang/authlib/legacy/LegacyAuthenticationService.java
rename to src/main/java/com/mojang/authlib/legacy/LegacyAuthenticationService.java
diff --git a/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java b/src/main/java/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
similarity index 100%
rename from com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
rename to src/main/java/com/mojang/authlib/legacy/LegacyMinecraftSessionService.java
diff --git a/com/mojang/authlib/legacy/LegacyUserAuthentication.java b/src/main/java/com/mojang/authlib/legacy/LegacyUserAuthentication.java
similarity index 100%
rename from com/mojang/authlib/legacy/LegacyUserAuthentication.java
rename to src/main/java/com/mojang/authlib/legacy/LegacyUserAuthentication.java
diff --git a/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java b/src/main/java/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
similarity index 100%
rename from com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
rename to src/main/java/com/mojang/authlib/minecraft/BaseMinecraftSessionService.java
diff --git a/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java b/src/main/java/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
similarity index 100%
rename from com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
rename to src/main/java/com/mojang/authlib/minecraft/HttpMinecraftSessionService.java
diff --git a/com/mojang/authlib/minecraft/InsecureTextureException.java b/src/main/java/com/mojang/authlib/minecraft/InsecureTextureException.java
similarity index 100%
rename from com/mojang/authlib/minecraft/InsecureTextureException.java
rename to src/main/java/com/mojang/authlib/minecraft/InsecureTextureException.java
diff --git a/com/mojang/authlib/minecraft/MinecraftProfileTexture.java b/src/main/java/com/mojang/authlib/minecraft/MinecraftProfileTexture.java
similarity index 100%
rename from com/mojang/authlib/minecraft/MinecraftProfileTexture.java
rename to src/main/java/com/mojang/authlib/minecraft/MinecraftProfileTexture.java
diff --git a/com/mojang/authlib/minecraft/MinecraftSessionService.java b/src/main/java/com/mojang/authlib/minecraft/MinecraftSessionService.java
similarity index 100%
rename from com/mojang/authlib/minecraft/MinecraftSessionService.java
rename to src/main/java/com/mojang/authlib/minecraft/MinecraftSessionService.java
diff --git a/com/mojang/authlib/properties/Property.java b/src/main/java/com/mojang/authlib/properties/Property.java
similarity index 100%
rename from com/mojang/authlib/properties/Property.java
rename to src/main/java/com/mojang/authlib/properties/Property.java
diff --git a/com/mojang/authlib/properties/PropertyMap.java b/src/main/java/com/mojang/authlib/properties/PropertyMap.java
similarity index 100%
rename from com/mojang/authlib/properties/PropertyMap.java
rename to src/main/java/com/mojang/authlib/properties/PropertyMap.java
diff --git a/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java b/src/main/java/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
rename to src/main/java/com/mojang/authlib/yggdrasil/ProfileIncompleteException.java
diff --git a/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java b/src/main/java/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
rename to src/main/java/com/mojang/authlib/yggdrasil/ProfileNotFoundException.java
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
rename to src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
rename to src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
rename to src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
diff --git a/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
rename to src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
diff --git a/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
rename to src/main/java/com/mojang/authlib/yggdrasil/request/AuthenticationRequest.java
diff --git a/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
rename to src/main/java/com/mojang/authlib/yggdrasil/request/InvalidateRequest.java
diff --git a/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
rename to src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
diff --git a/com/mojang/authlib/yggdrasil/request/RefreshRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/RefreshRequest.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/request/RefreshRequest.java
rename to src/main/java/com/mojang/authlib/yggdrasil/request/RefreshRequest.java
diff --git a/com/mojang/authlib/yggdrasil/request/ValidateRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/ValidateRequest.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/request/ValidateRequest.java
rename to src/main/java/com/mojang/authlib/yggdrasil/request/ValidateRequest.java
diff --git a/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java b/src/main/java/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/AuthenticationResponse.java
diff --git a/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java b/src/main/java/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/HasJoinedMinecraftServerResponse.java
diff --git a/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java b/src/main/java/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse.java
diff --git a/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java b/src/main/java/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload.java
diff --git a/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java b/src/main/java/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/ProfileSearchResultsResponse.java
diff --git a/com/mojang/authlib/yggdrasil/response/RefreshResponse.java b/src/main/java/com/mojang/authlib/yggdrasil/response/RefreshResponse.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/RefreshResponse.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/RefreshResponse.java
diff --git a/com/mojang/authlib/yggdrasil/response/Response.java b/src/main/java/com/mojang/authlib/yggdrasil/response/Response.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/Response.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/Response.java
diff --git a/com/mojang/authlib/yggdrasil/response/User.java b/src/main/java/com/mojang/authlib/yggdrasil/response/User.java
similarity index 100%
rename from com/mojang/authlib/yggdrasil/response/User.java
rename to src/main/java/com/mojang/authlib/yggdrasil/response/User.java
diff --git a/com/mojang/launcher/Http.java b/src/main/java/com/mojang/launcher/Http.java
similarity index 100%
rename from com/mojang/launcher/Http.java
rename to src/main/java/com/mojang/launcher/Http.java
diff --git a/com/mojang/launcher/Launcher.java b/src/main/java/com/mojang/launcher/Launcher.java
similarity index 100%
rename from com/mojang/launcher/Launcher.java
rename to src/main/java/com/mojang/launcher/Launcher.java
diff --git a/com/mojang/launcher/LegacyPropertyMapSerializer.java b/src/main/java/com/mojang/launcher/LegacyPropertyMapSerializer.java
similarity index 100%
rename from com/mojang/launcher/LegacyPropertyMapSerializer.java
rename to src/main/java/com/mojang/launcher/LegacyPropertyMapSerializer.java
diff --git a/com/mojang/launcher/OperatingSystem.java b/src/main/java/com/mojang/launcher/OperatingSystem.java
similarity index 100%
rename from com/mojang/launcher/OperatingSystem.java
rename to src/main/java/com/mojang/launcher/OperatingSystem.java
diff --git a/com/mojang/launcher/SharedLauncherConstants.java b/src/main/java/com/mojang/launcher/SharedLauncherConstants.java
similarity index 100%
rename from com/mojang/launcher/SharedLauncherConstants.java
rename to src/main/java/com/mojang/launcher/SharedLauncherConstants.java
diff --git a/com/mojang/launcher/UserInterface.java b/src/main/java/com/mojang/launcher/UserInterface.java
similarity index 100%
rename from com/mojang/launcher/UserInterface.java
rename to src/main/java/com/mojang/launcher/UserInterface.java
diff --git a/com/mojang/launcher/events/GameOutputLogProcessor.java b/src/main/java/com/mojang/launcher/events/GameOutputLogProcessor.java
similarity index 100%
rename from com/mojang/launcher/events/GameOutputLogProcessor.java
rename to src/main/java/com/mojang/launcher/events/GameOutputLogProcessor.java
diff --git a/com/mojang/launcher/events/RefreshedVersionsListener.java b/src/main/java/com/mojang/launcher/events/RefreshedVersionsListener.java
similarity index 100%
rename from com/mojang/launcher/events/RefreshedVersionsListener.java
rename to src/main/java/com/mojang/launcher/events/RefreshedVersionsListener.java
diff --git a/com/mojang/launcher/game/GameInstanceStatus.java b/src/main/java/com/mojang/launcher/game/GameInstanceStatus.java
similarity index 100%
rename from com/mojang/launcher/game/GameInstanceStatus.java
rename to src/main/java/com/mojang/launcher/game/GameInstanceStatus.java
diff --git a/com/mojang/launcher/game/process/AbstractGameProcess.java b/src/main/java/com/mojang/launcher/game/process/AbstractGameProcess.java
similarity index 100%
rename from com/mojang/launcher/game/process/AbstractGameProcess.java
rename to src/main/java/com/mojang/launcher/game/process/AbstractGameProcess.java
diff --git a/com/mojang/launcher/game/process/GameProcess.java b/src/main/java/com/mojang/launcher/game/process/GameProcess.java
similarity index 100%
rename from com/mojang/launcher/game/process/GameProcess.java
rename to src/main/java/com/mojang/launcher/game/process/GameProcess.java
diff --git a/com/mojang/launcher/game/process/GameProcessBuilder.java b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
similarity index 100%
rename from com/mojang/launcher/game/process/GameProcessBuilder.java
rename to src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
diff --git a/com/mojang/launcher/game/process/GameProcessFactory.java b/src/main/java/com/mojang/launcher/game/process/GameProcessFactory.java
similarity index 100%
rename from com/mojang/launcher/game/process/GameProcessFactory.java
rename to src/main/java/com/mojang/launcher/game/process/GameProcessFactory.java
diff --git a/com/mojang/launcher/game/process/GameProcessRunnable.java b/src/main/java/com/mojang/launcher/game/process/GameProcessRunnable.java
similarity index 100%
rename from com/mojang/launcher/game/process/GameProcessRunnable.java
rename to src/main/java/com/mojang/launcher/game/process/GameProcessRunnable.java
diff --git a/com/mojang/launcher/game/process/direct/DirectGameProcess.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
similarity index 100%
rename from com/mojang/launcher/game/process/direct/DirectGameProcess.java
rename to src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
diff --git a/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
similarity index 100%
rename from com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
rename to src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
diff --git a/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
similarity index 100%
rename from com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
rename to src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
diff --git a/com/mojang/launcher/game/runner/AbstractGameRunner.java b/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
similarity index 100%
rename from com/mojang/launcher/game/runner/AbstractGameRunner.java
rename to src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
diff --git a/com/mojang/launcher/game/runner/GameRunner.java b/src/main/java/com/mojang/launcher/game/runner/GameRunner.java
similarity index 100%
rename from com/mojang/launcher/game/runner/GameRunner.java
rename to src/main/java/com/mojang/launcher/game/runner/GameRunner.java
diff --git a/com/mojang/launcher/game/runner/GameRunnerListener.java b/src/main/java/com/mojang/launcher/game/runner/GameRunnerListener.java
similarity index 100%
rename from com/mojang/launcher/game/runner/GameRunnerListener.java
rename to src/main/java/com/mojang/launcher/game/runner/GameRunnerListener.java
diff --git a/com/mojang/launcher/updater/DateTypeAdapter.java b/src/main/java/com/mojang/launcher/updater/DateTypeAdapter.java
similarity index 100%
rename from com/mojang/launcher/updater/DateTypeAdapter.java
rename to src/main/java/com/mojang/launcher/updater/DateTypeAdapter.java
diff --git a/com/mojang/launcher/updater/DownloadProgress.java b/src/main/java/com/mojang/launcher/updater/DownloadProgress.java
similarity index 100%
rename from com/mojang/launcher/updater/DownloadProgress.java
rename to src/main/java/com/mojang/launcher/updater/DownloadProgress.java
diff --git a/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java b/src/main/java/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
similarity index 100%
rename from com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
rename to src/main/java/com/mojang/launcher/updater/ExceptionalThreadPoolExecutor.java
diff --git a/com/mojang/launcher/updater/FileTypeAdapter.java b/src/main/java/com/mojang/launcher/updater/FileTypeAdapter.java
similarity index 100%
rename from com/mojang/launcher/updater/FileTypeAdapter.java
rename to src/main/java/com/mojang/launcher/updater/FileTypeAdapter.java
diff --git a/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
similarity index 100%
rename from com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
rename to src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
diff --git a/com/mojang/launcher/updater/VersionFilter.java b/src/main/java/com/mojang/launcher/updater/VersionFilter.java
similarity index 100%
rename from com/mojang/launcher/updater/VersionFilter.java
rename to src/main/java/com/mojang/launcher/updater/VersionFilter.java
diff --git a/com/mojang/launcher/updater/VersionManager.java b/src/main/java/com/mojang/launcher/updater/VersionManager.java
similarity index 100%
rename from com/mojang/launcher/updater/VersionManager.java
rename to src/main/java/com/mojang/launcher/updater/VersionManager.java
diff --git a/com/mojang/launcher/updater/VersionSyncInfo.java b/src/main/java/com/mojang/launcher/updater/VersionSyncInfo.java
similarity index 100%
rename from com/mojang/launcher/updater/VersionSyncInfo.java
rename to src/main/java/com/mojang/launcher/updater/VersionSyncInfo.java
diff --git a/com/mojang/launcher/updater/download/ChecksummedDownloadable.java b/src/main/java/com/mojang/launcher/updater/download/ChecksummedDownloadable.java
similarity index 100%
rename from com/mojang/launcher/updater/download/ChecksummedDownloadable.java
rename to src/main/java/com/mojang/launcher/updater/download/ChecksummedDownloadable.java
diff --git a/com/mojang/launcher/updater/download/DownloadJob.java b/src/main/java/com/mojang/launcher/updater/download/DownloadJob.java
similarity index 100%
rename from com/mojang/launcher/updater/download/DownloadJob.java
rename to src/main/java/com/mojang/launcher/updater/download/DownloadJob.java
diff --git a/com/mojang/launcher/updater/download/DownloadListener.java b/src/main/java/com/mojang/launcher/updater/download/DownloadListener.java
similarity index 100%
rename from com/mojang/launcher/updater/download/DownloadListener.java
rename to src/main/java/com/mojang/launcher/updater/download/DownloadListener.java
diff --git a/com/mojang/launcher/updater/download/Downloadable.java b/src/main/java/com/mojang/launcher/updater/download/Downloadable.java
similarity index 100%
rename from com/mojang/launcher/updater/download/Downloadable.java
rename to src/main/java/com/mojang/launcher/updater/download/Downloadable.java
diff --git a/com/mojang/launcher/updater/download/EtagDownloadable.java b/src/main/java/com/mojang/launcher/updater/download/EtagDownloadable.java
similarity index 100%
rename from com/mojang/launcher/updater/download/EtagDownloadable.java
rename to src/main/java/com/mojang/launcher/updater/download/EtagDownloadable.java
diff --git a/com/mojang/launcher/updater/download/MonitoringInputStream.java b/src/main/java/com/mojang/launcher/updater/download/MonitoringInputStream.java
similarity index 100%
rename from com/mojang/launcher/updater/download/MonitoringInputStream.java
rename to src/main/java/com/mojang/launcher/updater/download/MonitoringInputStream.java
diff --git a/com/mojang/launcher/updater/download/ProgressContainer.java b/src/main/java/com/mojang/launcher/updater/download/ProgressContainer.java
similarity index 100%
rename from com/mojang/launcher/updater/download/ProgressContainer.java
rename to src/main/java/com/mojang/launcher/updater/download/ProgressContainer.java
diff --git a/com/mojang/launcher/updater/download/assets/AssetDownloadable.java b/src/main/java/com/mojang/launcher/updater/download/assets/AssetDownloadable.java
similarity index 100%
rename from com/mojang/launcher/updater/download/assets/AssetDownloadable.java
rename to src/main/java/com/mojang/launcher/updater/download/assets/AssetDownloadable.java
diff --git a/com/mojang/launcher/updater/download/assets/AssetIndex.java b/src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java
similarity index 100%
rename from com/mojang/launcher/updater/download/assets/AssetIndex.java
rename to src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java
diff --git a/com/mojang/launcher/versions/CompatibilityRule.java b/src/main/java/com/mojang/launcher/versions/CompatibilityRule.java
similarity index 100%
rename from com/mojang/launcher/versions/CompatibilityRule.java
rename to src/main/java/com/mojang/launcher/versions/CompatibilityRule.java
diff --git a/com/mojang/launcher/versions/CompleteVersion.java b/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
similarity index 100%
rename from com/mojang/launcher/versions/CompleteVersion.java
rename to src/main/java/com/mojang/launcher/versions/CompleteVersion.java
diff --git a/com/mojang/launcher/versions/ExtractRules.java b/src/main/java/com/mojang/launcher/versions/ExtractRules.java
similarity index 100%
rename from com/mojang/launcher/versions/ExtractRules.java
rename to src/main/java/com/mojang/launcher/versions/ExtractRules.java
diff --git a/com/mojang/launcher/versions/ReleaseType.java b/src/main/java/com/mojang/launcher/versions/ReleaseType.java
similarity index 100%
rename from com/mojang/launcher/versions/ReleaseType.java
rename to src/main/java/com/mojang/launcher/versions/ReleaseType.java
diff --git a/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java b/src/main/java/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
similarity index 100%
rename from com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
rename to src/main/java/com/mojang/launcher/versions/ReleaseTypeAdapterFactory.java
diff --git a/com/mojang/launcher/versions/ReleaseTypeFactory.java b/src/main/java/com/mojang/launcher/versions/ReleaseTypeFactory.java
similarity index 100%
rename from com/mojang/launcher/versions/ReleaseTypeFactory.java
rename to src/main/java/com/mojang/launcher/versions/ReleaseTypeFactory.java
diff --git a/com/mojang/launcher/versions/Version.java b/src/main/java/com/mojang/launcher/versions/Version.java
similarity index 100%
rename from com/mojang/launcher/versions/Version.java
rename to src/main/java/com/mojang/launcher/versions/Version.java
diff --git a/com/mojang/util/QueueLogAppender.java b/src/main/java/com/mojang/util/QueueLogAppender.java
similarity index 100%
rename from com/mojang/util/QueueLogAppender.java
rename to src/main/java/com/mojang/util/QueueLogAppender.java
diff --git a/com/mojang/util/UUIDTypeAdapter.java b/src/main/java/com/mojang/util/UUIDTypeAdapter.java
similarity index 100%
rename from com/mojang/util/UUIDTypeAdapter.java
rename to src/main/java/com/mojang/util/UUIDTypeAdapter.java
diff --git a/net/minecraft/hopper/Crash.java b/src/main/java/net/minecraft/hopper/Crash.java
similarity index 100%
rename from net/minecraft/hopper/Crash.java
rename to src/main/java/net/minecraft/hopper/Crash.java
diff --git a/net/minecraft/hopper/HopperService.java b/src/main/java/net/minecraft/hopper/HopperService.java
similarity index 100%
rename from net/minecraft/hopper/HopperService.java
rename to src/main/java/net/minecraft/hopper/HopperService.java
diff --git a/net/minecraft/hopper/Problem.java b/src/main/java/net/minecraft/hopper/Problem.java
similarity index 100%
rename from net/minecraft/hopper/Problem.java
rename to src/main/java/net/minecraft/hopper/Problem.java
diff --git a/net/minecraft/hopper/PublishRequest.java b/src/main/java/net/minecraft/hopper/PublishRequest.java
similarity index 100%
rename from net/minecraft/hopper/PublishRequest.java
rename to src/main/java/net/minecraft/hopper/PublishRequest.java
diff --git a/net/minecraft/hopper/PublishResponse.java b/src/main/java/net/minecraft/hopper/PublishResponse.java
similarity index 100%
rename from net/minecraft/hopper/PublishResponse.java
rename to src/main/java/net/minecraft/hopper/PublishResponse.java
diff --git a/net/minecraft/hopper/Report.java b/src/main/java/net/minecraft/hopper/Report.java
similarity index 100%
rename from net/minecraft/hopper/Report.java
rename to src/main/java/net/minecraft/hopper/Report.java
diff --git a/net/minecraft/hopper/Response.java b/src/main/java/net/minecraft/hopper/Response.java
similarity index 100%
rename from net/minecraft/hopper/Response.java
rename to src/main/java/net/minecraft/hopper/Response.java
diff --git a/net/minecraft/hopper/SubmitRequest.java b/src/main/java/net/minecraft/hopper/SubmitRequest.java
similarity index 100%
rename from net/minecraft/hopper/SubmitRequest.java
rename to src/main/java/net/minecraft/hopper/SubmitRequest.java
diff --git a/net/minecraft/hopper/SubmitResponse.java b/src/main/java/net/minecraft/hopper/SubmitResponse.java
similarity index 100%
rename from net/minecraft/hopper/SubmitResponse.java
rename to src/main/java/net/minecraft/hopper/SubmitResponse.java
diff --git a/net/minecraft/hopper/Util.java b/src/main/java/net/minecraft/hopper/Util.java
similarity index 100%
rename from net/minecraft/hopper/Util.java
rename to src/main/java/net/minecraft/hopper/Util.java
diff --git a/net/minecraft/launcher/CompatibilityRule.java b/src/main/java/net/minecraft/launcher/CompatibilityRule.java
similarity index 100%
rename from net/minecraft/launcher/CompatibilityRule.java
rename to src/main/java/net/minecraft/launcher/CompatibilityRule.java
diff --git a/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java b/src/main/java/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
similarity index 100%
rename from net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
rename to src/main/java/net/minecraft/launcher/CurrentLaunchFeatureMatcher.java
diff --git a/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
similarity index 100%
rename from net/minecraft/launcher/Launcher.java
rename to src/main/java/net/minecraft/launcher/Launcher.java
diff --git a/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
similarity index 100%
rename from net/minecraft/launcher/LauncherConstants.java
rename to src/main/java/net/minecraft/launcher/LauncherConstants.java
diff --git a/net/minecraft/launcher/Main.java b/src/main/java/net/minecraft/launcher/Main.java
similarity index 100%
rename from net/minecraft/launcher/Main.java
rename to src/main/java/net/minecraft/launcher/Main.java
diff --git a/net/minecraft/launcher/MinecraftUserInterface.java b/src/main/java/net/minecraft/launcher/MinecraftUserInterface.java
similarity index 100%
rename from net/minecraft/launcher/MinecraftUserInterface.java
rename to src/main/java/net/minecraft/launcher/MinecraftUserInterface.java
diff --git a/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
similarity index 100%
rename from net/minecraft/launcher/SwingUserInterface.java
rename to src/main/java/net/minecraft/launcher/SwingUserInterface.java
diff --git a/net/minecraft/launcher/game/GameLaunchDispatcher.java b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
similarity index 100%
rename from net/minecraft/launcher/game/GameLaunchDispatcher.java
rename to src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
diff --git a/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
similarity index 100%
rename from net/minecraft/launcher/game/MinecraftGameRunner.java
rename to src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
diff --git a/net/minecraft/launcher/game/MinecraftReleaseType.java b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
similarity index 100%
rename from net/minecraft/launcher/game/MinecraftReleaseType.java
rename to src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
diff --git a/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
similarity index 100%
rename from net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
rename to src/main/java/net/minecraft/launcher/game/MinecraftReleaseTypeFactory.java
diff --git a/net/minecraft/launcher/profile/AuthenticationDatabase.java b/src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java
similarity index 100%
rename from net/minecraft/launcher/profile/AuthenticationDatabase.java
rename to src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java
diff --git a/net/minecraft/launcher/profile/LauncherVisibilityRule.java b/src/main/java/net/minecraft/launcher/profile/LauncherVisibilityRule.java
similarity index 100%
rename from net/minecraft/launcher/profile/LauncherVisibilityRule.java
rename to src/main/java/net/minecraft/launcher/profile/LauncherVisibilityRule.java
diff --git a/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
similarity index 100%
rename from net/minecraft/launcher/profile/Profile.java
rename to src/main/java/net/minecraft/launcher/profile/Profile.java
diff --git a/net/minecraft/launcher/profile/ProfileManager.java b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
similarity index 100%
rename from net/minecraft/launcher/profile/ProfileManager.java
rename to src/main/java/net/minecraft/launcher/profile/ProfileManager.java
diff --git a/net/minecraft/launcher/profile/RefreshedProfilesListener.java b/src/main/java/net/minecraft/launcher/profile/RefreshedProfilesListener.java
similarity index 100%
rename from net/minecraft/launcher/profile/RefreshedProfilesListener.java
rename to src/main/java/net/minecraft/launcher/profile/RefreshedProfilesListener.java
diff --git a/net/minecraft/launcher/profile/UserChangedListener.java b/src/main/java/net/minecraft/launcher/profile/UserChangedListener.java
similarity index 100%
rename from net/minecraft/launcher/profile/UserChangedListener.java
rename to src/main/java/net/minecraft/launcher/profile/UserChangedListener.java
diff --git a/net/minecraft/launcher/ui/BottomBarPanel.java b/src/main/java/net/minecraft/launcher/ui/BottomBarPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/BottomBarPanel.java
rename to src/main/java/net/minecraft/launcher/ui/BottomBarPanel.java
diff --git a/net/minecraft/launcher/ui/LauncherPanel.java b/src/main/java/net/minecraft/launcher/ui/LauncherPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/LauncherPanel.java
rename to src/main/java/net/minecraft/launcher/ui/LauncherPanel.java
diff --git a/net/minecraft/launcher/ui/TexturedPanel.java b/src/main/java/net/minecraft/launcher/ui/TexturedPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/TexturedPanel.java
rename to src/main/java/net/minecraft/launcher/ui/TexturedPanel.java
diff --git a/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java b/src/main/java/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
rename to src/main/java/net/minecraft/launcher/ui/bottombar/PlayButtonPanel.java
diff --git a/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java b/src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
rename to src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
diff --git a/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java b/src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
rename to src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
diff --git a/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java b/src/main/java/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
similarity index 100%
rename from net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
rename to src/main/java/net/minecraft/launcher/ui/bottombar/SidebarGridForm.java
diff --git a/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java b/src/main/java/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
similarity index 100%
rename from net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
rename to src/main/java/net/minecraft/launcher/ui/bottombar/StatusPanelForm.java
diff --git a/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
rename to src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
diff --git a/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
rename to src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
diff --git a/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/login/LogInForm.java
rename to src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
diff --git a/net/minecraft/launcher/ui/popups/login/LogInPopup.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/login/LogInPopup.java
rename to src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
rename to src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
rename to src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
rename to src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
diff --git a/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
rename to src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
diff --git a/net/minecraft/launcher/ui/tabs/ConsoleTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/ConsoleTab.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/ConsoleTab.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/ConsoleTab.java
diff --git a/net/minecraft/launcher/ui/tabs/CrashReportTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/CrashReportTab.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java
diff --git a/net/minecraft/launcher/ui/tabs/GameOutputTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/GameOutputTab.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/GameOutputTab.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/GameOutputTab.java
diff --git a/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java b/src/main/java/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/LauncherTabPanel.java
diff --git a/net/minecraft/launcher/ui/tabs/ProfileListTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/ProfileListTab.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java
diff --git a/net/minecraft/launcher/ui/tabs/WebsiteTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/WebsiteTab.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java
diff --git a/net/minecraft/launcher/ui/tabs/website/Browser.java b/src/main/java/net/minecraft/launcher/ui/tabs/website/Browser.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/website/Browser.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/website/Browser.java
diff --git a/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java b/src/main/java/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/website/JFXBrowser.java
diff --git a/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java b/src/main/java/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
similarity index 100%
rename from net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
rename to src/main/java/net/minecraft/launcher/ui/tabs/website/LegacySwingBrowser.java
diff --git a/net/minecraft/launcher/updater/AbstractDownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/AbstractDownloadInfo.java
similarity index 100%
rename from net/minecraft/launcher/updater/AbstractDownloadInfo.java
rename to src/main/java/net/minecraft/launcher/updater/AbstractDownloadInfo.java
diff --git a/net/minecraft/launcher/updater/Argument.java b/src/main/java/net/minecraft/launcher/updater/Argument.java
similarity index 100%
rename from net/minecraft/launcher/updater/Argument.java
rename to src/main/java/net/minecraft/launcher/updater/Argument.java
diff --git a/net/minecraft/launcher/updater/ArgumentType.java b/src/main/java/net/minecraft/launcher/updater/ArgumentType.java
similarity index 100%
rename from net/minecraft/launcher/updater/ArgumentType.java
rename to src/main/java/net/minecraft/launcher/updater/ArgumentType.java
diff --git a/net/minecraft/launcher/updater/AssetIndexInfo.java b/src/main/java/net/minecraft/launcher/updater/AssetIndexInfo.java
similarity index 100%
rename from net/minecraft/launcher/updater/AssetIndexInfo.java
rename to src/main/java/net/minecraft/launcher/updater/AssetIndexInfo.java
diff --git a/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
similarity index 100%
rename from net/minecraft/launcher/updater/CompleteMinecraftVersion.java
rename to src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
diff --git a/net/minecraft/launcher/updater/DownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/DownloadInfo.java
similarity index 100%
rename from net/minecraft/launcher/updater/DownloadInfo.java
rename to src/main/java/net/minecraft/launcher/updater/DownloadInfo.java
diff --git a/net/minecraft/launcher/updater/DownloadType.java b/src/main/java/net/minecraft/launcher/updater/DownloadType.java
similarity index 100%
rename from net/minecraft/launcher/updater/DownloadType.java
rename to src/main/java/net/minecraft/launcher/updater/DownloadType.java
diff --git a/net/minecraft/launcher/updater/FileBasedVersionList.java b/src/main/java/net/minecraft/launcher/updater/FileBasedVersionList.java
similarity index 100%
rename from net/minecraft/launcher/updater/FileBasedVersionList.java
rename to src/main/java/net/minecraft/launcher/updater/FileBasedVersionList.java
diff --git a/net/minecraft/launcher/updater/Library.java b/src/main/java/net/minecraft/launcher/updater/Library.java
similarity index 100%
rename from net/minecraft/launcher/updater/Library.java
rename to src/main/java/net/minecraft/launcher/updater/Library.java
diff --git a/net/minecraft/launcher/updater/LibraryDownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
similarity index 100%
rename from net/minecraft/launcher/updater/LibraryDownloadInfo.java
rename to src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
diff --git a/net/minecraft/launcher/updater/LocalDownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/LocalDownloadInfo.java
similarity index 100%
rename from net/minecraft/launcher/updater/LocalDownloadInfo.java
rename to src/main/java/net/minecraft/launcher/updater/LocalDownloadInfo.java
diff --git a/net/minecraft/launcher/updater/LocalVersionList.java b/src/main/java/net/minecraft/launcher/updater/LocalVersionList.java
similarity index 100%
rename from net/minecraft/launcher/updater/LocalVersionList.java
rename to src/main/java/net/minecraft/launcher/updater/LocalVersionList.java
diff --git a/net/minecraft/launcher/updater/MinecraftVersionManager.java b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
similarity index 100%
rename from net/minecraft/launcher/updater/MinecraftVersionManager.java
rename to src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
diff --git a/net/minecraft/launcher/updater/PartialVersion.java b/src/main/java/net/minecraft/launcher/updater/PartialVersion.java
similarity index 100%
rename from net/minecraft/launcher/updater/PartialVersion.java
rename to src/main/java/net/minecraft/launcher/updater/PartialVersion.java
diff --git a/net/minecraft/launcher/updater/PreHashedDownloadable.java b/src/main/java/net/minecraft/launcher/updater/PreHashedDownloadable.java
similarity index 100%
rename from net/minecraft/launcher/updater/PreHashedDownloadable.java
rename to src/main/java/net/minecraft/launcher/updater/PreHashedDownloadable.java
diff --git a/net/minecraft/launcher/updater/RemoteVersionList.java b/src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java
similarity index 100%
rename from net/minecraft/launcher/updater/RemoteVersionList.java
rename to src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java
diff --git a/net/minecraft/launcher/updater/VersionList.java b/src/main/java/net/minecraft/launcher/updater/VersionList.java
similarity index 100%
rename from net/minecraft/launcher/updater/VersionList.java
rename to src/main/java/net/minecraft/launcher/updater/VersionList.java
diff --git a/META-INF/log4j-provider.properties b/src/main/resources/META-INF/log4j-provider.properties
similarity index 100%
rename from META-INF/log4j-provider.properties
rename to src/main/resources/META-INF/log4j-provider.properties
diff --git a/dirt.png b/src/main/resources/dirt.png
similarity index 100%
rename from dirt.png
rename to src/main/resources/dirt.png
diff --git a/favicon.png b/src/main/resources/favicon.png
similarity index 100%
rename from favicon.png
rename to src/main/resources/favicon.png
diff --git a/launcher_properties.json b/src/main/resources/launcher_properties.json
similarity index 100%
rename from launcher_properties.json
rename to src/main/resources/launcher_properties.json
diff --git a/log4j2.xml b/src/main/resources/log4j2.xml
similarity index 100%
rename from log4j2.xml
rename to src/main/resources/log4j2.xml
diff --git a/minecraft_logo.png b/src/main/resources/minecraft_logo.png
similarity index 100%
rename from minecraft_logo.png
rename to src/main/resources/minecraft_logo.png
diff --git a/yggdrasil_session_pubkey.der b/src/main/resources/yggdrasil_session_pubkey.der
similarity index 100%
rename from yggdrasil_session_pubkey.der
rename to src/main/resources/yggdrasil_session_pubkey.der
-- 
2.43.0.windows.1

From cf8a154547d88f60533b4086ee5f3156f5211c8f Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 10 Mar 2022 02:35:36 -0600
Subject: [PATCH 03/33] Fix compile issues

---
 .../authlib/properties/PropertyMap.java       | 10 ++--
 .../YggdrasilAuthenticationService.java       |  2 +-
 .../game/process/GameProcessBuilder.java      |  3 +-
 .../process/direct/DirectGameProcess.java     |  3 +-
 .../LowerCaseEnumTypeAdapterFactory.java      |  9 +--
 .../com/mojang/util/QueueLogAppender.java     |  9 +--
 .../net/minecraft/hopper/HopperService.java   |  2 +-
 .../java/net/minecraft/launcher/Launcher.java | 11 ++--
 .../minecraft/launcher/LauncherConstants.java |  3 +-
 .../launcher/game/GameLaunchDispatcher.java   |  7 ++-
 .../launcher/game/MinecraftGameRunner.java    |  3 +-
 .../minecraft/launcher/profile/Profile.java   |  3 +-
 .../launcher/ui/popups/login/LogInForm.java   |  5 +-
 .../updater/CompleteMinecraftVersion.java     | 55 +++++++++++--------
 .../minecraft/launcher/updater/Library.java   | 20 ++++---
 .../launcher/updater/LibraryDownloadInfo.java | 11 ++--
 16 files changed, 88 insertions(+), 68 deletions(-)

diff --git a/src/main/java/com/mojang/authlib/properties/PropertyMap.java b/src/main/java/com/mojang/authlib/properties/PropertyMap.java
index 548a122..6a1e76a 100644
--- a/src/main/java/com/mojang/authlib/properties/PropertyMap.java
+++ b/src/main/java/com/mojang/authlib/properties/PropertyMap.java
@@ -33,19 +33,19 @@ public class PropertyMap extends ForwardingMultimap<String, Property> {
             PropertyMap var4 = new PropertyMap();
             if (var1 instanceof JsonObject) {
                 JsonObject var5 = (JsonObject)var1;
-                Iterator var6 = var5.entrySet().iterator();
+                Iterator<Entry<String, JsonElement>> var6 = var5.entrySet().iterator(); // olauncher - fix generic
 
                 while(true) {
-                    Entry var7;
+                    Entry<String, JsonElement> var7; // olauncher - fix generic
                     do {
                         if (!var6.hasNext()) {
                             return var4;
                         }
 
-                        var7 = (Entry)var6.next();
+                        var7 = var6.next(); // olauncher - remove cast
                     } while(!(var7.getValue() instanceof JsonArray));
 
-                    Iterator var8 = ((JsonArray)var7.getValue()).iterator();
+                    Iterator<JsonElement> var8 = ((JsonArray)var7.getValue()).iterator(); // olauncher - fix generic
 
                     while(var8.hasNext()) {
                         JsonElement var9 = (JsonElement)var8.next();
@@ -53,7 +53,7 @@ public class PropertyMap extends ForwardingMultimap<String, Property> {
                     }
                 }
             } else if (var1 instanceof JsonArray) {
-                Iterator var10 = ((JsonArray)var1).iterator();
+                Iterator<JsonElement> var10 = ((JsonArray)var1).iterator(); // olauncher - fix generic
 
                 while(var10.hasNext()) {
                     JsonElement var11 = (JsonElement)var10.next();
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
index 53a0ec9..adf434b 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
@@ -60,7 +60,7 @@ public class YggdrasilAuthenticationService extends HttpAuthenticationService {
     protected <T extends Response> T makeRequest(URL var1, Object var2, Class<T> var3) throws AuthenticationException {
         try {
             String var4 = var2 == null ? this.performGetRequest(var1) : this.performPostRequest(var1, this.gson.toJson(var2), "application/json");
-            Response var5 = (Response)this.gson.fromJson(var4, var3);
+            T var5 = this.gson.fromJson(var4, var3); // olauncher - use generic
             if (var5 == null) {
                 return null;
             } else if (StringUtils.isNotBlank(var5.getError())) {
diff --git a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
index 6681b03..c5df30c 100644
--- a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
+++ b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
@@ -1,5 +1,6 @@
 package com.mojang.launcher.game.process;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
@@ -76,6 +77,6 @@ public class GameProcessBuilder {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("processPath", this.processPath).add("arguments", this.arguments).add("sysOutFilter", this.sysOutFilter).add("directory", this.directory).add("logProcessor", this.logProcessor).toString();
+        return MoreObjects.toStringHelper(this).add("processPath", this.processPath).add("arguments", this.arguments).add("sysOutFilter", this.sysOutFilter).add("directory", this.directory).add("logProcessor", this.logProcessor).toString(); // olauncher - Objects -> MoreObjects
     }
 }
diff --git a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
index 66a7107..2d0aca3 100644
--- a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
+++ b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
@@ -1,5 +1,6 @@
 package com.mojang.launcher.game.process.direct;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.EvictingQueue;
@@ -48,7 +49,7 @@ public class DirectGameProcess extends AbstractGameProcess {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("process", this.process).add("monitor", this.monitor).toString();
+        return MoreObjects.toStringHelper(this).add("process", this.process).add("monitor", this.monitor).toString(); // olauncher - Objects -> MoreObjects
     }
 
     public void stop() {
diff --git a/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
index d53c3af..d15c531 100644
--- a/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
@@ -16,16 +16,17 @@ public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     }
 
     public <T> TypeAdapter<T> create(Gson var1, TypeToken<T> var2) {
-        Class var3 = var2.getRawType();
+        // olauncher - fix generics
+        Class<? super T> var3 = var2.getRawType();
         if (!var3.isEnum()) {
             return null;
         } else {
-            final HashMap var4 = new HashMap();
-            Object[] var5 = var3.getEnumConstants();
+            final HashMap<String, T> var4 = new HashMap<>();
+            T[] var5 = (T[])var3.getEnumConstants();
             int var6 = var5.length;
 
             for(int var7 = 0; var7 < var6; ++var7) {
-                Object var8 = var5[var7];
+                T var8 = var5[var7];
                 var4.put(this.toLowercase(var8), var8);
             }
 
diff --git a/src/main/java/com/mojang/util/QueueLogAppender.java b/src/main/java/com/mojang/util/QueueLogAppender.java
index cfa709b..1abc840 100644
--- a/src/main/java/com/mojang/util/QueueLogAppender.java
+++ b/src/main/java/com/mojang/util/QueueLogAppender.java
@@ -56,18 +56,19 @@ public class QueueLogAppender extends AbstractAppender {
             }
 
             QUEUE_LOCK.writeLock().lock();
-            Object var6 = (BlockingQueue)QUEUES.get(var4);
+            BlockingQueue<String> var6 = QUEUES.get(var4); // olauncher - fix type
             if (var6 == null) {
-                var6 = new LinkedBlockingQueue();
+                var6 = new LinkedBlockingQueue<>(); // olauncher - fix generic
                 QUEUES.put(var4, var6);
             }
 
             QUEUE_LOCK.writeLock().unlock();
             if (var2 == null) {
-                var2 = PatternLayout.createLayout((String)null, (Configuration)null, (RegexReplacement)null, (String)null, (String)null);
+                //var2 = PatternLayout.createLayout((String)null, (Configuration)null, (RegexReplacement)null, (String)null, (String)null);
+                var2 = PatternLayout.createDefaultLayout(); // olauncher - fix layout
             }
 
-            return new QueueLogAppender(var0, var3, (Layout)var2, var5, (BlockingQueue)var6);
+            return new QueueLogAppender(var0, var3, var2, var5, var6); // olauncher - remove casts
         }
     }
 
diff --git a/src/main/java/net/minecraft/hopper/HopperService.java b/src/main/java/net/minecraft/hopper/HopperService.java
index 90d2aca..96e7665 100644
--- a/src/main/java/net/minecraft/hopper/HopperService.java
+++ b/src/main/java/net/minecraft/hopper/HopperService.java
@@ -49,7 +49,7 @@ public final class HopperService {
 
     private static <T extends Response> T makeRequest(Proxy var0, URL var1, Object var2, Class<T> var3) throws IOException {
         String var4 = Util.performPost(var1, GSON.toJson(var2), var0, "application/json", true);
-        Response var5 = (Response)GSON.fromJson(var4, var3);
+        T var5 = GSON.fromJson(var4, var3); // olauncher - use generic
         if (var5 == null) {
             return null;
         } else if (var5.getError() != null) {
diff --git a/src/main/java/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
index a4849b1..a9a6ee3 100644
--- a/src/main/java/net/minecraft/launcher/Launcher.java
+++ b/src/main/java/net/minecraft/launcher/Launcher.java
@@ -15,6 +15,7 @@ import com.mojang.launcher.versions.CompleteVersion;
 import com.mojang.launcher.versions.Version;
 import com.mojang.util.UUIDTypeAdapter;
 import java.io.File;
+import java.io.FileFilter;
 import java.io.IOException;
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.net.PasswordAuthentication;
@@ -297,14 +298,14 @@ public class Launcher {
                 File var9;
                 do {
                     if (!var5.hasNext()) {
-                        File[] var15 = var3.listFiles(DirectoryFileFilter.DIRECTORY);
+                        File[] var15 = var3.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
                         if (var15 != null) {
                             File[] var16 = var15;
                             int var17 = var15.length;
 
                             for(int var18 = 0; var18 < var17; ++var18) {
                                 var9 = var16[var18];
-                                File[] var19 = var9.listFiles(FileFileFilter.FILE);
+                                File[] var19 = var9.listFiles((FileFilter)FileFileFilter.FILE); // olauncher - cast to FileFilter
                                 if (var19 != null) {
                                     File[] var20 = var19;
                                     int var21 = var19.length;
@@ -422,7 +423,7 @@ public class Launcher {
         var4.add(5, -5);
         Date var5 = var4.getTime();
         if (var2.isDirectory()) {
-            File[] var6 = var2.listFiles(DirectoryFileFilter.DIRECTORY);
+            File[] var6 = var2.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
             if (var6 != null) {
                 File[] var7 = var6;
                 int var8 = var6.length;
@@ -452,14 +453,14 @@ public class Launcher {
         LOGGER.info("Looking for old natives & assets to clean up...");
         AgeFileFilter var2 = new AgeFileFilter(System.currentTimeMillis() - 3600000L);
         if (var1.isDirectory()) {
-            File[] var3 = var1.listFiles(DirectoryFileFilter.DIRECTORY);
+            File[] var3 = var1.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
             if (var3 != null) {
                 File[] var4 = var3;
                 int var5 = var3.length;
 
                 for(int var6 = 0; var6 < var5; ++var6) {
                     File var7 = var4[var6];
-                    File[] var8 = var7.listFiles(FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2}));
+                    File[] var8 = var7.listFiles((FileFilter)FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2})); // olauncher - cast to FileFilter
                     if (var8 != null) {
                         File[] var9 = var8;
                         int var10 = var8.length;
diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index fe2d1c0..c739732 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -61,7 +62,7 @@ public class LauncherConstants {
     }
 
     public static String getVersionName() {
-        return (String)Objects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown");
+        return (String)MoreObjects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown"); // olauncher - Objects -> MoreObjects
     }
 
     private static LauncherConstants.LauncherProperties getProperties() {
diff --git a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
index 49e9797..730aa86 100644
--- a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
+++ b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.game;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
@@ -110,7 +111,7 @@ public class GameLaunchDispatcher implements GameRunnerListener {
 
         this.launcher.getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
             public void run() {
-                var5.setVisibility((LauncherVisibilityRule)Objects.firstNonNull(var2.getLauncherVisibilityOnGameClose(), Profile.DEFAULT_LAUNCHER_VISIBILITY));
+                var5.setVisibility((LauncherVisibilityRule)MoreObjects.firstNonNull(var2.getLauncherVisibilityOnGameClose(), Profile.DEFAULT_LAUNCHER_VISIBILITY)); // olauncher - Objects -> MoreObjects
                 VersionSyncInfo var1 = null;
                 if (var4 != null) {
                     var1 = GameLaunchDispatcher.this.launcher.getLauncher().getVersionManager().getVersionSyncInfo(var4);
@@ -160,14 +161,14 @@ public class GameLaunchDispatcher implements GameRunnerListener {
         this.lock.lock();
 
         try {
-            File var1 = (File)Objects.firstNonNull(this.launcher.getProfileManager().getSelectedProfile().getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+            File var1 = (File)MoreObjects.firstNonNull(this.launcher.getProfileManager().getSelectedProfile().getGameDir(), this.launcher.getLauncher().getWorkingDirectory()); // olauncher - Objects -> MoreObjects
             Iterator var2 = this.instances.values().iterator();
 
             while(var2.hasNext()) {
                 MinecraftGameRunner var3 = (MinecraftGameRunner)var2.next();
                 Profile var4 = var3.getSelectedProfile();
                 if (var4 != null) {
-                    File var5 = (File)Objects.firstNonNull(var4.getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+                    File var5 = (File)MoreObjects.firstNonNull(var4.getGameDir(), this.launcher.getLauncher().getWorkingDirectory()); // olauncher - Objects -> MoreObjects
                     if (var1.equals(var5)) {
                         boolean var6 = true;
                         return var6;
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 2ddba9a..d77ad7f 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.game;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.gson.Gson;
@@ -155,7 +156,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
                 var3.mkdirs();
             }
 
-            GameProcessBuilder var4 = new GameProcessBuilder((String)Objects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir()));
+            GameProcessBuilder var4 = new GameProcessBuilder((String)MoreObjects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir())); // olauncher - Objects -> MoreObjects
             var4.withSysOutFilter(new Predicate<String>() {
                 public boolean apply(String var1) {
                     return var1.contains("#@!@#");
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index 6bf1d94..9de6c6f 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.profile;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.Sets;
 import com.mojang.launcher.updater.VersionFilter;
@@ -47,7 +48,7 @@ public class Profile implements Comparable<Profile> {
     }
 
     public String getName() {
-        return (String)Objects.firstNonNull(this.name, "");
+        return (String)MoreObjects.firstNonNull(this.name, ""); // olauncher - Objects -> MoreObjects
     }
 
     public void setName(String var1) {
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
index 337403e..32b2ced 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -116,7 +116,7 @@ public class LogInForm extends JPanel implements ActionListener {
     public void tryLogIn() {
         if (this.authentication.isLoggedIn() && this.authentication.getSelectedProfile() == null && ArrayUtils.isNotEmpty(this.authentication.getAvailableProfiles())) {
             this.popup.setCanLogIn(false);
-            final GameProfile var6 = null;
+            GameProfile var6 = null; // olauncher - move final declaration...
             GameProfile[] var2 = this.authentication.getAvailableProfiles();
             int var3 = var2.length;
 
@@ -132,10 +132,11 @@ public class LogInForm extends JPanel implements ActionListener {
                 var6 = this.authentication.getAvailableProfiles()[0];
             }
 
+            final GameProfile var6Final = var6; // olauncher - ...here
             this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
                 public void run() {
                     try {
-                        LogInForm.this.authentication.selectGameProfile(var6);
+                        LogInForm.this.authentication.selectGameProfile(var6Final);
                         LogInForm.this.popup.getMinecraftLauncher().getProfileManager().getAuthDatabase().register(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()), LogInForm.this.authentication);
                         LogInForm.this.popup.setLoggedIn(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()));
                     } catch (InvalidCredentialsException var2) {
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index ad40fd8..b9ac4df 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.updater;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -70,33 +71,37 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         this.assets = var1.assets;
         this.jar = var1.jar;
         this.downloads = var1.downloads;
-        Iterator var2;
+        // olauncher - iterator surgery (raw types are no longer cool)
+        //Iterator var2;
+        Iterator<Library> libraryIter;
         if (var1.libraries != null) {
             this.libraries = Lists.newArrayList();
-            var2 = var1.getLibraries().iterator();
+            libraryIter = var1.getLibraries().iterator();
 
-            while(var2.hasNext()) {
-                Library var3 = (Library)var2.next();
+            while(libraryIter.hasNext()) {
+                Library var3 = libraryIter.next();
                 this.libraries.add(new Library(var3));
             }
         }
 
+        Iterator<Entry<ArgumentType, List<Argument>>> argumentIter;
         if (var1.arguments != null) {
             this.arguments = Maps.newEnumMap(ArgumentType.class);
-            var2 = var1.arguments.entrySet().iterator();
+            argumentIter = var1.arguments.entrySet().iterator();
 
-            while(var2.hasNext()) {
-                Entry var4 = (Entry)var2.next();
-                this.arguments.put(var4.getKey(), new ArrayList((Collection)var4.getValue()));
+            while(argumentIter.hasNext()) {
+                Entry<ArgumentType, List<Argument>> var4 = argumentIter.next();
+                this.arguments.put(var4.getKey(), new ArrayList<>(var4.getValue()));
             }
         }
 
+        Iterator<CompatibilityRule> ruleIter;
         if (var1.compatibilityRules != null) {
             this.compatibilityRules = Lists.newArrayList();
-            var2 = var1.compatibilityRules.iterator();
+            ruleIter = var1.compatibilityRules.iterator();
 
-            while(var2.hasNext()) {
-                CompatibilityRule var5 = (CompatibilityRule)var2.next();
+            while(ruleIter.hasNext()) {
+                CompatibilityRule var5 = ruleIter.next();
                 this.compatibilityRules.add(new CompatibilityRule(var5));
             }
         }
@@ -329,29 +334,31 @@ public class CompleteMinecraftVersion implements CompleteVersion {
                 var5.libraries = var6;
             }
 
-            Iterator var9;
+            // olauncher - more iterator surgery
+            Iterator<Entry<ArgumentType, List<Argument>>> var9;
             if (this.arguments != null) {
                 if (var5.arguments == null) {
-                    var5.arguments = new EnumMap(ArgumentType.class);
+                    var5.arguments = new EnumMap<>(ArgumentType.class);
                 }
 
-                Entry var10;
-                Object var12;
-                for(var9 = this.arguments.entrySet().iterator(); var9.hasNext(); ((List)var12).addAll((Collection)var10.getValue())) {
-                    var10 = (Entry)var9.next();
-                    var12 = (List)var5.arguments.get(var10.getKey());
+                Entry<ArgumentType, List<Argument>> var10;
+                List<Argument> var12; // olauncher - fix type
+                for(var9 = this.arguments.entrySet().iterator(); var9.hasNext(); var12.addAll(var10.getValue())) {
+                    var10 = var9.next();
+                    var12 = var5.arguments.get(var10.getKey());
                     if (var12 == null) {
-                        var12 = new ArrayList();
+                        var12 = new ArrayList<>();
                         var5.arguments.put(var10.getKey(), var12);
                     }
                 }
             }
 
+            Iterator<CompatibilityRule> ruleIter;
             if (this.compatibilityRules != null) {
-                var9 = this.compatibilityRules.iterator();
+                ruleIter = this.compatibilityRules.iterator();
 
-                while(var9.hasNext()) {
-                    CompatibilityRule var11 = (CompatibilityRule)var9.next();
+                while(ruleIter.hasNext()) {
+                    CompatibilityRule var11 = ruleIter.next();
                     var5.compatibilityRules.add(new CompatibilityRule(var11));
                 }
             }
@@ -361,7 +368,7 @@ public class CompleteMinecraftVersion implements CompleteVersion {
     }
 
     public CompleteMinecraftVersion getSavableVersion() {
-        return (CompleteMinecraftVersion)Objects.firstNonNull(this.savableVersion, this);
+        return (CompleteMinecraftVersion)MoreObjects.firstNonNull(this.savableVersion, this); // olauncher - Objects -> MoreObjects
     }
 
     public AbstractDownloadInfo getDownloadURL(DownloadType var1) {
@@ -370,7 +377,7 @@ public class CompleteMinecraftVersion implements CompleteVersion {
 
     public AssetIndexInfo getAssetIndex() {
         if (this.assetIndex == null) {
-            this.assetIndex = new AssetIndexInfo((String)Objects.firstNonNull(this.assets, "legacy"));
+            this.assetIndex = new AssetIndexInfo((String)MoreObjects.firstNonNull(this.assets, "legacy")); // olauncher - Objects -> MoreObjects
         }
 
         return this.assetIndex;
diff --git a/src/main/java/net/minecraft/launcher/updater/Library.java b/src/main/java/net/minecraft/launcher/updater/Library.java
index a9da116..32814c0 100644
--- a/src/main/java/net/minecraft/launcher/updater/Library.java
+++ b/src/main/java/net/minecraft/launcher/updater/Library.java
@@ -51,23 +51,25 @@ public class Library {
             this.extract = new ExtractRules(var1.extract);
         }
 
-        Iterator var2;
+        // olauncher - more iterator surgery
+        Iterator<CompatibilityRule> ruleIter;
         if (var1.rules != null) {
-            this.rules = new ArrayList();
-            var2 = var1.rules.iterator();
+            this.rules = new ArrayList<>();
+            ruleIter = var1.rules.iterator();
 
-            while(var2.hasNext()) {
-                CompatibilityRule var3 = (CompatibilityRule)var2.next();
+            while(ruleIter.hasNext()) {
+                CompatibilityRule var3 = ruleIter.next();
                 this.rules.add(new CompatibilityRule(var3));
             }
         }
 
+        Iterator<Entry<OperatingSystem, String>> nativeIter;
         if (var1.natives != null) {
-            this.natives = new LinkedHashMap();
-            var2 = var1.getNatives().entrySet().iterator();
+            this.natives = new LinkedHashMap<>();
+            nativeIter = var1.getNatives().entrySet().iterator();
 
-            while(var2.hasNext()) {
-                Entry var4 = (Entry)var2.next();
+            while(nativeIter.hasNext()) {
+                Entry<OperatingSystem, String> var4 = nativeIter.next();
                 this.natives.put(var4.getKey(), var4.getValue());
             }
         }
diff --git a/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
index 21dbec3..4e7612f 100644
--- a/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
+++ b/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
@@ -15,18 +15,19 @@ public class LibraryDownloadInfo {
     public LibraryDownloadInfo(LibraryDownloadInfo var1) {
         this.artifact = var1.artifact;
         if (var1.classifiers != null) {
-            this.classifiers = new LinkedHashMap();
-            Iterator var2 = var1.classifiers.entrySet().iterator();
+            this.classifiers = new LinkedHashMap<>();
+            // olauncher - iterator surgery
+            Iterator<Entry<String, DownloadInfo>> var2 = var1.classifiers.entrySet().iterator();
 
             while(var2.hasNext()) {
-                Entry var3 = (Entry)var2.next();
-                this.classifiers.put(var3.getKey(), new DownloadInfo((DownloadInfo)var3.getValue()));
+                Entry<String, DownloadInfo> var3 = var2.next();
+                this.classifiers.put(var3.getKey(), new DownloadInfo(var3.getValue())); // olauncher - remove cast
             }
         }
 
     }
 
     public AbstractDownloadInfo getDownloadInfo(String var1) {
-        return (AbstractDownloadInfo)(var1 == null ? this.artifact : (AbstractDownloadInfo)this.classifiers.get(var1));
+        return (var1 == null ? this.artifact : (AbstractDownloadInfo)this.classifiers.get(var1)); // olauncher - remove cast
     }
 }
-- 
2.43.0.windows.1

From c9f1e81b617d95f142da35f49b15d4c0390fca46 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Mon, 14 Mar 2022 10:09:55 -0500
Subject: [PATCH 04/33] Modernize JVM arguments

---
 .../net/minecraft/launcher/game/MinecraftGameRunner.java     | 2 +-
 src/main/java/net/minecraft/launcher/profile/Profile.java    | 5 +++--
 .../launcher/ui/popups/profile/ProfileJavaPanel.java         | 4 +++-
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index d77ad7f..e82aa38 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -169,7 +169,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
                 var4.withArguments(var5.split(" "));
             } else {
                 boolean var6 = "32".equals(System.getProperty("sun.arch.data.model"));
-                String var7 = var6 ? "-Xmx512M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M" : "-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
+                String var7 = var6 ? Profile.DEFAULT_JRE_ARGUMENTS_32BIT : Profile.DEFAULT_JRE_ARGUMENTS_64BIT; // olauncher - use default JVM argument variables
                 var4.withArguments(var7.split(" "));
             }
 
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index 9de6c6f..a450ca3 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -11,8 +11,9 @@ import net.minecraft.launcher.game.MinecraftReleaseType;
 import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
 
 public class Profile implements Comparable<Profile> {
-    public static final String DEFAULT_JRE_ARGUMENTS_64BIT = "-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
-    public static final String DEFAULT_JRE_ARGUMENTS_32BIT = "-Xmx512M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M";
+    // olauncher - modernize default JVM arguments
+    public static final String DEFAULT_JRE_ARGUMENTS_64BIT = "-Xmx2G -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:G1NewSizePercent=20 -XX:G1ReservePercent=20 -XX:MaxGCPauseMillis=50 -XX:G1HeapRegionSize=32M";
+    public static final String DEFAULT_JRE_ARGUMENTS_32BIT = "-Xmx2G -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:G1NewSizePercent=20 -XX:G1ReservePercent=20 -XX:MaxGCPauseMillis=50 -XX:G1HeapRegionSize=32M";
     public static final Profile.Resolution DEFAULT_RESOLUTION = new Profile.Resolution(854, 480);
     public static final LauncherVisibilityRule DEFAULT_LAUNCHER_VISIBILITY;
     public static final Set<MinecraftReleaseType> DEFAULT_RELEASE_TYPES;
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
index e61b076..e510a79 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
@@ -1,6 +1,8 @@
 package net.minecraft.launcher.ui.popups.profile;
 
 import com.mojang.launcher.OperatingSystem;
+import net.minecraft.launcher.profile.Profile;
+
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.Insets;
@@ -67,7 +69,7 @@ public class ProfileJavaPanel extends JPanel {
             this.javaArgsField.setText(var2);
         } else {
             this.javaArgsCustom.setSelected(false);
-            this.javaArgsField.setText("-Xmx1G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -Xmn128M");
+            this.javaArgsField.setText(Profile.DEFAULT_JRE_ARGUMENTS_64BIT); // olauncher - use default JVM argument variable
         }
 
         this.updateJavaArgsState();
-- 
2.43.0.windows.1

From 32c828bb203966966655edf86ad01b81731d67a7 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 17 Mar 2022 04:40:30 -0500
Subject: [PATCH 05/33] Add Microsoft authentication

---
 .../authlib/HttpAuthenticationService.java    |  16 +
 .../java/com/mojang/authlib/UserType.java     |   3 +-
 .../figboot/olauncher/OLauncherConstants.java |  31 ++
 .../figboot/olauncher/auth/MCProfileInfo.java |  82 ++++++
 .../figboot/olauncher/auth/MSLoginServer.java | 231 +++++++++++++++
 .../auth/MicrosoftAuthenticationService.java  | 127 ++++++++
 .../auth/MicrosoftUserAuthentication.java     | 277 ++++++++++++++++++
 .../requests/MinecraftXboxLoginRequest.java   |  29 ++
 .../auth/requests/XSTSAuthRequest.java        |  44 +++
 .../auth/requests/XboxLiveAuthRequest.java    |  47 +++
 .../olauncher/auth/responses/MSResponse.java  |  30 ++
 .../auth/responses/MSTokenAuthResponse.java   |  32 ++
 .../responses/MinecraftXboxLoginResponse.java |  32 ++
 .../auth/responses/XSTSAuthResponse.java      |  42 +++
 .../auth/responses/XboxLiveAuthResponse.java  |  48 +++
 .../olauncher/auth/ui/MSLoginDialog.java      | 141 +++++++++
 .../olauncher/auth/ui/MSLoginDialog2.java     | 152 ++++++++++
 .../olauncher/util/BetterUUIDTypeAdapter.java |  41 +++
 .../olauncher/util/InstantTypeAdapter.java    |  38 +++
 .../profile/AuthenticationDatabase.java       |   7 +-
 .../launcher/profile/ProfileManager.java      |   7 +-
 .../launcher/ui/popups/login/LogInForm.java   |  23 ++
 .../launcher/ui/popups/login/LogInPopup.java  |  35 ++-
 src/main/resources/log4j2.xml                 |   2 +-
 24 files changed, 1507 insertions(+), 10 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/OLauncherConstants.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/requests/MinecraftXboxLoginRequest.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/requests/XboxLiveAuthRequest.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MSTokenAuthResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MinecraftXboxLoginResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/XboxLiveAuthResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java
 create mode 100644 src/main/java/dev/figboot/olauncher/util/BetterUUIDTypeAdapter.java
 create mode 100644 src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java

diff --git a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
index 247c8df..597a17a 100644
--- a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
@@ -42,6 +42,11 @@ public abstract class HttpAuthenticationService extends BaseAuthenticationServic
     }
 
     public String performPostRequest(URL var1, String var2, String var3) throws IOException {
+        return performPostRequest(var1, var2, var3, null); // olauncher - call new function
+    }
+
+    // olauncher - allow providing bearer token
+    public String performPostRequest(URL var1, String var2, String var3, String bearer) throws IOException {
         Validate.notNull(var1);
         Validate.notNull(var2);
         Validate.notNull(var3);
@@ -49,6 +54,11 @@ public abstract class HttpAuthenticationService extends BaseAuthenticationServic
         byte[] var5 = var2.getBytes(Charsets.UTF_8);
         var4.setRequestProperty("Content-Type", var3 + "; charset=utf-8");
         var4.setRequestProperty("Content-Length", "" + var5.length);
+
+        if (bearer != null) { // olauncher - set bearer token
+            var4.setRequestProperty("Authorization", "Bearer " + bearer);
+        }
+
         var4.setDoOutput(true);
         LOGGER.debug("Writing POST data to " + var1 + ": " + var2);
         OutputStream var6 = null;
@@ -95,8 +105,14 @@ public abstract class HttpAuthenticationService extends BaseAuthenticationServic
     }
 
     public String performGetRequest(URL var1) throws IOException {
+        return performGetRequest(var1, null); // olauncher - call new function
+    }
+
+    // olauncher - allow providing bearer token
+    public String performGetRequest(URL var1, String bearer) throws IOException {
         Validate.notNull(var1);
         HttpURLConnection var2 = this.createUrlConnection(var1);
+        if (bearer != null) var2.setRequestProperty("Authorization", "Bearer " + bearer); // olauncher - set bearer token
         LOGGER.debug("Reading data from " + var1);
         InputStream var3 = null;
 
diff --git a/src/main/java/com/mojang/authlib/UserType.java b/src/main/java/com/mojang/authlib/UserType.java
index da99d2a..a7f91d7 100644
--- a/src/main/java/com/mojang/authlib/UserType.java
+++ b/src/main/java/com/mojang/authlib/UserType.java
@@ -5,7 +5,8 @@ import java.util.Map;
 
 public enum UserType {
     LEGACY("legacy"),
-    MOJANG("mojang");
+    MOJANG("mojang"),
+    MICROSOFT("msa"); // olauncher - add MSA user type
 
     private static final Map<String, UserType> BY_NAME = new HashMap();
     private final String name;
diff --git a/src/main/java/dev/figboot/olauncher/OLauncherConstants.java b/src/main/java/dev/figboot/olauncher/OLauncherConstants.java
new file mode 100644
index 0000000..67728f6
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/OLauncherConstants.java
@@ -0,0 +1,31 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher;
+
+import java.util.UUID;
+
+public final class OLauncherConstants {
+    private OLauncherConstants() { }
+
+    public static final String MC_LOGIN_URL = "https://login.live.com/oauth20_authorize.srf?client_id=00000000402b5328&response_type=code&scope=service%3A%3Auser.auth.xboxlive.com%3A%3AMBI_SSL&redirect_uri=https%3A%2F%2Flogin.live.com%2Foauth20_desktop.srf";
+    public static final UUID APP_CLIENT_ID = UUID.fromString("60b6cc54-fc07-4bab-bca9-cbe9aa713c80");
+    public static final String APP_SCOPES = "XboxLive.signin offline_access";
+    public static final int REDIR_URI_PORT = 6183;
+    public static final String REDIR_URI = "http://localhost:" + REDIR_URI_PORT;
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java b/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
new file mode 100644
index 0000000..b9a8ab6
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
@@ -0,0 +1,82 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth;
+
+import lombok.Getter;
+
+import java.util.List;
+import java.util.UUID;
+
+@Getter
+public class MCProfileInfo {
+    private UUID id;
+    private String name;
+
+    private List<Skin> skins;
+
+    private List<Cape> capes;
+
+    @Getter
+    public static class Skin {
+        private UUID id;
+        private String state;
+        private String url;
+        private String variant;
+        private String alias;
+
+        @Override
+        public String toString() {
+            return "Skin{" +
+                    "id='" + id + '\'' +
+                    ", state='" + state + '\'' +
+                    ", url='" + url + '\'' +
+                    ", variant='" + variant + '\'' +
+                    ", alias='" + alias + '\'' +
+                    '}';
+        }
+    }
+
+    @Getter
+    public static class Cape {
+        private UUID id;
+        private String state;
+        private String url;
+        private String alias;
+
+        @Override
+        public String toString() {
+            return "Cape{" +
+                    "id='" + id + '\'' +
+                    ", state='" + state + '\'' +
+                    ", url='" + url + '\'' +
+                    ", alias='" + alias + '\'' +
+                    '}';
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "MCProfileInfo{" +
+                "id='" + id + '\'' +
+                ", name='" + name + '\'' +
+                ", skins=" + skins +
+                ", capes=" + capes +
+                '}';
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java b/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
new file mode 100644
index 0000000..6b4130e
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
@@ -0,0 +1,231 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth;
+
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Consumer;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class MSLoginServer {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private ServerSocket sock;
+    private boolean running, stop;
+    private final Object stateVarLock = new Object();
+
+    private final InetAddress addr;
+    private final int port;
+
+    private final Thread serverThread;
+    private final Consumer<Response> handleComplete;
+
+    private final Object handlerSync = new Object();
+    private boolean handlerCalled;
+
+    public MSLoginServer(InetAddress addr, int port, Consumer<Response> handleComplete) throws IOException {
+        handlerCalled = false;
+
+        running = false;
+        stop = false;
+
+        this.handleComplete = handleComplete;
+
+        this.addr = addr;
+        this.port = port;
+
+        sock = new ServerSocket(port, 20, addr);
+        sock.setReuseAddress(true);
+        sock.setSoTimeout(500);
+
+        serverThread = new Thread(() -> {
+            try {
+                handle();
+                LOGGER.info("Server thread complete");
+            } catch (IOException ex) {
+                LOGGER.warn("I/O error when listening for authentication responses");
+                LOGGER.warn(ex.getClass().getName() + ": " + ex.getMessage());
+            } catch (Exception ex) {
+                LOGGER.error("Error when listening for authentication responses");
+                ex.printStackTrace();
+            } finally {
+                synchronized (handlerSync) {
+                    if (!handlerCalled) handleComplete.accept(new Response(null, null, null));
+                    handlerCalled = true;
+                }
+
+                try {
+                    if (sock != null) sock.close();
+                } catch (IOException ex) {
+                    LOGGER.error("Error when closing server socket:");
+                    ex.printStackTrace();
+                }
+            }
+        });
+    }
+
+    public void listen() {
+        synchronized (stateVarLock) {
+            if (running) throw new IllegalStateException("The server is already running");
+        }
+
+        serverThread.start();
+    }
+
+    public void stop() {
+        synchronized (stateVarLock) {
+            stop = true;
+        }
+        serverThread.interrupt();
+    }
+
+    private boolean isStopped() {
+        synchronized (stateVarLock) {
+            return stop;
+        }
+    }
+
+    public void waitStop(long timeout) throws InterruptedException {
+        serverThread.join(timeout);
+    }
+
+    private static final Pattern GET_RQ_PATTERN = Pattern.compile("^GET /\\?code=([a-zA-Z0-9_.\\-]+) HTTP/[0-9.]+$");
+    private static final Pattern GET_ERROR_PATTERN = Pattern.compile("^GET /\\?error=([a-zA-Z0-9_\\-]+)&error_description=(.+) HTTP/[0-9.]+$");
+    private static final Pattern AUTH_COMPLETE_PATTERN = Pattern.compile("^GET /authComplete HTTP/[0-9.]+$");
+    private void handle() throws Exception {
+        synchronized (stateVarLock) {
+            running = true;
+        }
+
+        while (!isStopped()) {
+            Socket client;
+            try {
+                client = sock.accept();
+                client.setSoTimeout(500);
+            } catch (SocketTimeoutException ex) {
+                continue;
+            }
+
+            try (InputStream is = client.getInputStream()) {
+                BufferedReader br = new BufferedReader(new InputStreamReader(is));
+                String line;
+                Matcher matcher;
+                while ((line = br.readLine()) != null) {
+                    if ((matcher = GET_RQ_PATTERN.matcher(line)).matches()) {
+                        String code = matcher.group(1);
+                        LOGGER.info("GET request received (/)");
+                        client.getOutputStream().write("HTTP/1.1 301 Moved Permanently\r\n".getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write("Location: /authComplete\r\n\r\n".getBytes(StandardCharsets.UTF_8));
+
+                        synchronized (handlerSync) {
+                            if (!handlerCalled) handleComplete.accept(new Response(code, null, null));
+                            handlerCalled = true;
+                        }
+
+                        break;
+                    } else if ((matcher = GET_ERROR_PATTERN.matcher(line)).matches()) {
+                        LOGGER.info("Authorization error");
+                        String error = matcher.group(1);
+                        String errorDesc = URLDecoder.decode(matcher.group(2), "UTF-8");
+
+                        String content = "The authorization has been cancelled. You may now close this window.";
+                        byte[] contentBytes = content.getBytes(StandardCharsets.UTF_8);
+                        client.getOutputStream().write("HTTP/1.1 200 OK\r\n".getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write("Content-type: text/plain\r\n".getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write(("Content-length: " + contentBytes.length + "\r\n\r\n").getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write(contentBytes);
+
+                        synchronized (stateVarLock) {
+                            stop = true;
+                        }
+
+                        synchronized (handlerSync) {
+                            if (!handlerCalled) handleComplete.accept(new Response(null, error, errorDesc));
+                            handlerCalled = true;
+                        }
+
+                        break;
+                    } else if ((matcher = AUTH_COMPLETE_PATTERN.matcher(line)).matches()) {
+                        LOGGER.info("GET request received (/authComplete)");
+                        String content = "The code has been received. You may now close this window.";
+                        byte[] contentBytes = content.getBytes(StandardCharsets.UTF_8);
+                        client.getOutputStream().write("HTTP/1.1 200 OK\r\n".getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write("Content-type: text/plain\r\n".getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write(("Content-length: " + contentBytes.length + "\r\n\r\n").getBytes(StandardCharsets.UTF_8));
+                        client.getOutputStream().write(contentBytes);
+
+                        synchronized (stateVarLock) {
+                            stop = true;
+                        }
+
+                        synchronized (handlerSync) {
+                            if (!handlerCalled) handleComplete.accept(new Response(null, null, null));
+                            handlerCalled = true;
+                        }
+
+                        break;
+                    } else {
+                        client.getOutputStream().write("HTTP/1.1 404 Not Found\r\n\r\n".getBytes(StandardCharsets.UTF_8));
+                    }
+                }
+            }
+        }
+    }
+
+    @RequiredArgsConstructor(access = AccessLevel.PACKAGE)
+    @Getter
+    public static class Response {
+        private final String code;
+        private final String error;
+        private final String errorDesc;
+
+        public boolean isSuccess() {
+            return code != null;
+        }
+
+        public boolean isAuthError() {
+            return code == null && error != null;
+        }
+
+        public boolean isInternalError() {
+            return code == null && error == null;
+        }
+
+        @Override
+        public String toString() {
+            return "Response{" +
+                    "code='" + code + '\'' +
+                    ", error='" + error + '\'' +
+                    ", errorDesc='" + errorDesc + '\'' +
+                    '}';
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
new file mode 100644
index 0000000..de4725c
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
@@ -0,0 +1,127 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.UserAuthentication;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import dev.figboot.olauncher.auth.responses.MSResponse;
+import dev.figboot.olauncher.util.BetterUUIDTypeAdapter;
+import dev.figboot.olauncher.util.InstantTypeAdapter;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.Proxy;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.time.Instant;
+import java.util.UUID;
+
+public class MicrosoftAuthenticationService extends YggdrasilAuthenticationService {
+    public static final URL ROUTE_LOGIN_LIVE_TOKEN = constantURL("https://login.live.com/oauth20_token.srf");
+    public static final URL ROUTE_XBOXLIVE_AUTH = constantURL("https://user.auth.xboxlive.com/user/authenticate");
+    public static final URL ROUTE_XBOXLIVE_XSTS = constantURL("https://xsts.auth.xboxlive.com/xsts/authorize");
+    public static final URL ROUTE_MINECRAFT_XBOX_LOGIN = constantURL("https://api.minecraftservices.com/authentication/login_with_xbox");
+    public static final URL ROUTE_MINECRAFT_PROFILE = constantURL("https://api.minecraftservices.com/minecraft/profile");
+
+    private final Gson gson;
+
+    public MicrosoftAuthenticationService(Proxy proxy, String token) {
+        super(proxy, token);
+        GsonBuilder builder = new GsonBuilder();
+        builder.registerTypeAdapter(UUID.class, new BetterUUIDTypeAdapter());
+        builder.registerTypeAdapter(Instant.class, new InstantTypeAdapter());
+        gson = builder.create();
+    }
+
+    @Override
+    public UserAuthentication createUserAuthentication(Agent var1) {
+        return new MicrosoftUserAuthentication(this, var1);
+    }
+
+    protected <T extends MSResponse> T post(URL var1, Object var2, Class<T> clazz) throws AuthenticationException {
+        try {
+            String res = performPostRequest(var1, gson.toJson(var2), "application/json");
+            return gson.fromJson(res, clazz);
+        } catch (IOException ex) {
+            throw new AuthenticationException("Cannot connect to server", ex);
+        }
+    }
+
+    protected <T extends MSResponse> T postForm(URL var1, String data, Class<T> clazz) throws AuthenticationException {
+        try {
+            String res = performPostRequest(var1, data, "application/x-www-form-urlencoded");
+            return gson.fromJson(res, clazz);
+        } catch (IOException ex) {
+            throw new AuthenticationException("Cannot connect to server", ex);
+        }
+    }
+
+    protected <T extends MSResponse> T get(URL url, Class<T> clazz) throws AuthenticationException {
+        try {
+            String res = performGetRequest(url);
+            return gson.fromJson(res, clazz);
+        } catch (IOException ex) {
+            throw new AuthenticationException("Cannot connect to server", ex);
+        }
+    }
+
+    protected <T> T getAuthenticated(URL url, String token, Class<T> clazz) throws AuthenticationException {
+        try {
+            String res = performGetRequest(url, token);
+            return gson.fromJson(res, clazz);
+        } catch (IOException ex) {
+            throw new AuthenticationException("Cannot connect to server", ex);
+        }
+    }
+
+    protected static class FormURLEncodedBuilder {
+        private final StringBuilder data;
+        private boolean firstParam = true;
+
+        public FormURLEncodedBuilder(String base) {
+            data = new StringBuilder(base);
+        }
+
+        public FormURLEncodedBuilder append(String key, String val) {
+            if (firstParam) {
+                firstParam = false;
+            } else {
+                data.append("&");
+            }
+
+            try {
+                data.append(URLEncoder.encode(key, "UTF-8"));
+                data.append("=");
+                data.append(URLEncoder.encode(val, "UTF-8"));
+            } catch (UnsupportedEncodingException ex) {
+                throw new RuntimeException(ex);
+            }
+
+            return this;
+        }
+
+        public String build() {
+            return data.toString();
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
new file mode 100644
index 0000000..632af6a
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -0,0 +1,277 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth;
+
+import com.mojang.authlib.*;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import dev.figboot.olauncher.OLauncherConstants;
+import dev.figboot.olauncher.auth.requests.MinecraftXboxLoginRequest;
+import dev.figboot.olauncher.auth.requests.XSTSAuthRequest;
+import dev.figboot.olauncher.auth.requests.XboxLiveAuthRequest;
+import dev.figboot.olauncher.auth.responses.MSTokenAuthResponse;
+import dev.figboot.olauncher.auth.responses.MinecraftXboxLoginResponse;
+import dev.figboot.olauncher.auth.responses.XSTSAuthResponse;
+import dev.figboot.olauncher.auth.responses.XboxLiveAuthResponse;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Map;
+
+public class MicrosoftUserAuthentication extends HttpUserAuthentication {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final Agent agent;
+    private GameProfile[] profiles;
+
+    private MCProfileInfo profileInfo;
+
+    private String msRefreshToken;
+    private String xblToken;
+    private Instant xblTokenExpire;
+    private String mojToken;
+    private Instant mojTokenExpire;
+    private boolean loggedIn;
+
+    private MSLoginServer.Response msLoginRes;
+
+    private final MinecraftSessionService sessionService;
+
+    public MicrosoftUserAuthentication(MicrosoftAuthenticationService service, Agent agent) {
+        super(service);
+        this.agent = agent;
+        profiles = null;
+
+        msRefreshToken = "";
+        mojToken = "";
+        loggedIn = false;
+
+        msLoginRes = null;
+
+        sessionService = service.createMinecraftSessionService();
+    }
+
+    @Override
+    public boolean canLogIn() {
+        return !canPlayOnline();
+    }
+
+    @Override
+    public boolean isLoggedIn() {
+        return super.isLoggedIn() && loggedIn;
+    }
+
+    @Override
+    public void logIn() throws AuthenticationException {
+        if (msLoginRes == null && msRefreshToken == null) throw new AuthenticationException("Username/email and password login is not supported");
+
+        if (msLoginRes != null) {
+            if (msLoginRes.isInternalError())
+                throw new AuthenticationException("An internal error occurred while authorizing your account");
+            if (msLoginRes.isAuthError())
+                throw new AuthenticationException(msLoginRes.getErrorDesc() + " (" + msLoginRes.getError() + ")");
+        }
+
+        String msAuthCode = msLoginRes == null ? null : this.msLoginRes.getCode();
+        this.msLoginRes = null;
+
+        Instant later = Instant.now().plus(6, ChronoUnit.HOURS);
+        if (mojTokenValid(later)) {
+            LOGGER.info("Mojang token valid, fetching profile...");
+            profileLogIn();
+        } else if (xblTokenValid(later)) {
+            LOGGER.info("XBL token valid, logging in...");
+            xstsAndMinecraftLogIn(null);
+            profileLogIn();
+        } else if (msRefreshToken != null) {
+            LOGGER.info("Refresh token present, using that...");
+            String hash = msAndXblWarmLogIn();
+            xstsAndMinecraftLogIn(hash);
+            profileLogIn();
+        } else {
+            String hash = msAndXblColdLogIn(msAuthCode);
+            xstsAndMinecraftLogIn(hash);
+            profileLogIn();
+        }
+    }
+
+    private String msAndXblColdLogIn(String msAuthCode) throws AuthenticationException {
+        LOGGER.debug("Getting access token from live...");
+        MSTokenAuthResponse tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
+                new MicrosoftAuthenticationService.FormURLEncodedBuilder("")
+                        .append("client_id", OLauncherConstants.APP_CLIENT_ID.toString())
+                        .append("code", msAuthCode)
+                        .append("grant_type", "authorization_code")
+                        .append("redirect_uri", OLauncherConstants.REDIR_URI)
+                        .build(), MSTokenAuthResponse.class);
+
+        if (tokAuthRes.getError() != null) {
+            throw new AuthenticationException(tokAuthRes.getError() + " - " + tokAuthRes.getErrorDescription());
+        }
+
+        this.msRefreshToken = tokAuthRes.getRefreshToken();
+
+        return xblLogIn(tokAuthRes.getAccessToken());
+    }
+
+    private String msAndXblWarmLogIn() throws AuthenticationException {
+        LOGGER.debug("Logging into live with a refresh token...");
+        MSTokenAuthResponse tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
+                new MicrosoftAuthenticationService.FormURLEncodedBuilder("")
+                        .append("client_id", OLauncherConstants.APP_CLIENT_ID.toString())
+                        .append("refresh_token", msRefreshToken)
+                        .append("grant_type", "refresh_token")
+                        .append("redirect_uri", OLauncherConstants.REDIR_URI).build(),
+                MSTokenAuthResponse.class);
+
+        if (tokAuthRes.getError() != null) {
+            throw new AuthenticationException(tokAuthRes.getError() + " - " + tokAuthRes.getErrorDescription());
+        }
+
+        this.msRefreshToken = tokAuthRes.getRefreshToken();
+
+        return xblLogIn(tokAuthRes.getAccessToken());
+    }
+
+    private String xblLogIn(String msAccessToken) throws AuthenticationException {
+        LOGGER.debug("Logging into Xbox Live...");
+        XboxLiveAuthResponse xboxLiveAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_AUTH,
+                new XboxLiveAuthRequest(msAccessToken, true),
+                XboxLiveAuthResponse.class);
+
+        this.xblToken = xboxLiveAuthRes.getToken();
+        this.xblTokenExpire = xboxLiveAuthRes.getExpireInstant();
+        return xboxLiveAuthRes.getUserHash();
+    }
+
+    private void xstsAndMinecraftLogIn(String userHash) throws AuthenticationException {
+        LOGGER.debug("Acquiring XSTS token...");
+        XSTSAuthResponse xstsAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_XSTS,
+                new XSTSAuthRequest(xblToken),
+                XSTSAuthResponse.class);
+
+        if (userHash != null && !userHash.equals(xstsAuthRes.getUserHash())) {
+            throw new AuthenticationException("The user hash has changed?");
+        }
+
+        LOGGER.debug("Logging into Minecraft...");
+        MinecraftXboxLoginResponse mcLoginRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_MINECRAFT_XBOX_LOGIN,
+                new MinecraftXboxLoginRequest(xstsAuthRes.getUserHash(), xstsAuthRes.getToken(), true),
+                MinecraftXboxLoginResponse.class);
+        this.mojToken = mcLoginRes.getAccessToken();
+        this.mojTokenExpire = Instant.now().plus(mcLoginRes.getExpiresIn(), ChronoUnit.SECONDS);
+    }
+
+    private void profileLogIn() throws AuthenticationException {
+        LOGGER.debug("Getting your user profile...");
+        profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
+                mojToken, MCProfileInfo.class);
+
+        GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
+        profile = sessionService.fillProfileProperties(profile, false);
+
+        loggedIn = true;
+        setUserid(profileInfo.getId().toString().replace("-", ""));
+        profiles = new GameProfile[]{profile};
+        setSelectedProfile(profile);
+        getModifiableUserProperties().clear();
+        getModifiableUserProperties().putAll(profile.getProperties());
+        setUserType(UserType.MICROSOFT);
+    }
+
+    public MCProfileInfo getProfileInfo() {
+        return profileInfo;
+    }
+
+    @Override
+    public void logOut() {
+        super.logOut();
+
+        msRefreshToken = null;
+        mojToken = null;
+        loggedIn = false;
+        //msAuthCode = null;
+        profileInfo = null;
+    }
+
+    private boolean mojTokenValid(Instant now) {
+        return mojToken != null && mojTokenExpire != null && !now.isAfter(mojTokenExpire);
+    }
+
+    private boolean xblTokenValid(Instant now) {
+        return xblToken != null && xblTokenExpire != null && !now.isAfter(xblTokenExpire);
+    }
+
+    private boolean refreshTokenValid() {
+        return msRefreshToken != null;
+    }
+
+    public void setLoginResponse(MSLoginServer.Response code) {
+        msLoginRes = code;
+    }
+
+    @Override
+    public boolean canPlayOnline() {
+        return isLoggedIn() && getSelectedProfile() != null && StringUtils.isNotBlank(mojToken) && mojTokenValid(Instant.now());
+    }
+
+    @Override
+    public GameProfile[] getAvailableProfiles() {
+        return profiles;
+    }
+
+    @Override
+    public void selectGameProfile(GameProfile var1) throws AuthenticationException {
+        throw new AuthenticationException("Switching game profiles is not supported");
+    }
+
+    @Override
+    public void loadFromStorage(Map<String, Object> var1) {
+        super.loadFromStorage(var1);
+        msRefreshToken = (String)var1.get("refreshToken");
+        xblToken = (String)var1.get("xboxLiveToken");
+        xblTokenExpire = Instant.parse((String)var1.get("xboxLiveTokenExpire"));
+        mojToken = (String)var1.get("mojToken");
+        mojTokenExpire = Instant.parse((String)var1.get("mojTokenExpire"));
+    }
+
+    @Override
+    public Map<String, Object> saveForStorage() {
+        Map<String, Object> map = super.saveForStorage();
+        map.put("refreshToken", msRefreshToken);
+        map.put("xboxLiveToken", xblToken);
+        map.put("xboxLiveTokenExpire", xblTokenExpire.toString());
+        map.put("mojToken", mojToken);
+        map.put("mojTokenExpire", mojTokenExpire.toString());
+        return map;
+    }
+
+    @Override
+    public String getAuthenticatedToken() {
+        return mojToken;
+    }
+
+    @Override
+    public MicrosoftAuthenticationService getAuthenticationService() {
+        return (MicrosoftAuthenticationService)super.getAuthenticationService();
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/requests/MinecraftXboxLoginRequest.java b/src/main/java/dev/figboot/olauncher/auth/requests/MinecraftXboxLoginRequest.java
new file mode 100644
index 0000000..a4dcf22
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/requests/MinecraftXboxLoginRequest.java
@@ -0,0 +1,29 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.requests;
+
+public class MinecraftXboxLoginRequest {
+    private String identityToken;
+    private boolean ensureLegacyEnabled;
+
+    public MinecraftXboxLoginRequest(String userHash, String xstsToken, boolean ensureLegacyEnabled) {
+        this.identityToken = String.format("XBL3.0 x=%s;%s", userHash, xstsToken);
+        this.ensureLegacyEnabled = ensureLegacyEnabled;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java b/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
new file mode 100644
index 0000000..73cd161
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
@@ -0,0 +1,44 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.requests;
+
+import java.util.Collections;
+import java.util.List;
+
+public class XSTSAuthRequest {
+    private final TagProperties Properties;
+    private final String RelyingParty;
+    private final String TokenType;
+
+    public XSTSAuthRequest(String xblToken) {
+        Properties = new TagProperties(xblToken);
+        RelyingParty = "rp://api.minecraftservices.com/";
+        TokenType = "JWT";
+    }
+
+    public static class TagProperties {
+        private final String SandboxId;
+        private final List<String> UserTokens;
+
+        public TagProperties(String xblToken) {
+            SandboxId = "RETAIL";
+            UserTokens = Collections.singletonList(xblToken);
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/requests/XboxLiveAuthRequest.java b/src/main/java/dev/figboot/olauncher/auth/requests/XboxLiveAuthRequest.java
new file mode 100644
index 0000000..c02fc58
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/requests/XboxLiveAuthRequest.java
@@ -0,0 +1,47 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.requests;
+
+public class XboxLiveAuthRequest {
+    private final TagProperties Properties;
+    private final String RelyingParty;
+    private final String TokenType;
+
+    public XboxLiveAuthRequest(String accessToken, boolean flag) {
+        Properties = new TagProperties(accessToken, flag);
+        RelyingParty = "http://auth.xboxlive.com";
+        TokenType = "JWT"; // JSON web token
+    }
+
+    public static class TagProperties {
+        private final String AuthMethod;
+        private final String SiteName;
+        private final String RpsTicket;
+
+        private TagProperties(String accessToken, boolean flag) {
+            AuthMethod = "RPS";
+            SiteName = "user.auth.xboxlive.com";
+            if (flag) {
+                RpsTicket = "d=" + accessToken;
+            } else {
+                RpsTicket = accessToken;
+            }
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
new file mode 100644
index 0000000..0159f0b
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
@@ -0,0 +1,30 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.responses;
+
+import lombok.Getter;
+
+public class MSResponse {
+    @Getter private String error;
+    private String error_description;
+
+    public String getErrorDescription() {
+        return error_description;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MSTokenAuthResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MSTokenAuthResponse.java
new file mode 100644
index 0000000..fe01aa4
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MSTokenAuthResponse.java
@@ -0,0 +1,32 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.responses;
+
+public class MSTokenAuthResponse extends MSResponse {
+    private String access_token;
+    private String refresh_token;
+
+    public String getAccessToken() {
+        return access_token;
+    }
+
+    public String getRefreshToken() {
+        return refresh_token;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftXboxLoginResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftXboxLoginResponse.java
new file mode 100644
index 0000000..7970e25
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftXboxLoginResponse.java
@@ -0,0 +1,32 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.responses;
+
+public class MinecraftXboxLoginResponse extends MSResponse {
+    private String access_token;
+    private long expires_in;
+
+    public String getAccessToken() {
+        return access_token;
+    }
+
+    public long getExpiresIn() {
+        return expires_in;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
new file mode 100644
index 0000000..3a959db
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
@@ -0,0 +1,42 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.responses;
+
+import java.util.List;
+
+public class XSTSAuthResponse extends MSResponse {
+    private String Token;
+    private TagDisplayClaims DisplayClaims;
+
+    public String getToken() {
+        return Token;
+    }
+
+    public String getUserHash() {
+        return DisplayClaims.xui.get(0).uhs;
+    }
+
+    public static class TagDisplayClaims {
+        private List<TagUserHashContainer> xui;
+
+        public static class TagUserHashContainer {
+            private String uhs;
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/XboxLiveAuthResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/XboxLiveAuthResponse.java
new file mode 100644
index 0000000..3fd4d79
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/XboxLiveAuthResponse.java
@@ -0,0 +1,48 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.responses;
+
+import java.time.Instant;
+import java.util.List;
+
+public class XboxLiveAuthResponse extends MSResponse {
+    private String Token;
+    private Instant NotAfter;
+    private TagDisplayClaims DisplayClaims;
+
+    public String getToken() {
+        return Token;
+    }
+
+    public String getUserHash() {
+        return DisplayClaims.xui.get(0).uhs;
+    }
+
+    public Instant getExpireInstant() {
+        return NotAfter;
+    }
+
+    public static class TagDisplayClaims {
+        private List<TagUserHashContainer> xui;
+
+        public static class TagUserHashContainer {
+            private String uhs;
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
new file mode 100644
index 0000000..10dbf2a
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
@@ -0,0 +1,141 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.ui;
+
+import com.mojang.launcher.OperatingSystem;
+import dev.figboot.olauncher.OLauncherConstants;
+import dev.figboot.olauncher.auth.MSLoginServer;
+import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.datatransfer.StringSelection;
+import java.awt.event.ActionEvent;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.URI;
+import java.net.URLEncoder;
+import java.util.function.Consumer;
+
+public class MSLoginDialog extends JDialog {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final JLabel lblInfo;
+    private final JButton btnCancel;
+    private final JButton btnCopy;
+    private final String link;
+
+    private MSLoginServer loginServer;
+    private final Consumer<MSLoginServer.Response> callback;
+
+    public MSLoginDialog(Consumer<MSLoginServer.Response> callback) {
+        this.callback = callback;
+
+        lblInfo = new JLabel("Waiting for webpage response...");
+        btnCancel = new JButton("Cancel");
+        btnCopy = new JButton("Copy Link");
+
+        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
+
+        btnCancel.addActionListener(this::btnCancelClick);
+        btnCopy.addActionListener(this::btnCopyLink);
+
+        addWindowListener(new WindowAdapter() {
+            @Override
+            public void windowClosing(WindowEvent e) {
+                if (loginServer != null) {
+                    loginServer.stop();
+                    btnCancel.setEnabled(false);
+
+                    try {
+                        loginServer.waitStop(5000);
+                    } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                    }
+                }
+                dispose();
+            }
+        });
+
+        try {
+            loginServer = new MSLoginServer(InetAddress.getByName("127.0.0.1"), OLauncherConstants.REDIR_URI_PORT, this::handleComplete);
+            loginServer.listen();
+            OperatingSystem.openLink(URI.create(link = String.format("https://login.live.com/oauth20_authorize.srf?client_id=%s&response_type=code&redirect_uri=%s&scope=%s",
+                    URLEncoder.encode(OLauncherConstants.APP_CLIENT_ID.toString(), "UTF-8"),
+                    URLEncoder.encode(OLauncherConstants.REDIR_URI, "UTF-8"),
+                    URLEncoder.encode(OLauncherConstants.APP_SCOPES, "UTF-8")
+            )));
+
+            initInterface();
+        } catch (IOException ex) {
+            if (loginServer != null) loginServer.stop();
+            LOGGER.error("Unable to start login server");
+            ex.printStackTrace();
+            dispose();
+            JOptionPane.showMessageDialog(null, "Error authenticating with Microsoft", "Error", JOptionPane.ERROR_MESSAGE);
+            throw new RuntimeException(ex);
+        }
+    }
+
+    private void initInterface() {
+        setModal(true);
+        setModalityType(ModalityType.APPLICATION_MODAL);
+        setLayout(new BorderLayout());
+        add(lblInfo, BorderLayout.CENTER);
+
+        JPanel pnlButtons = new JPanel();
+        pnlButtons.setLayout(new FlowLayout(FlowLayout.RIGHT));
+        pnlButtons.add(btnCopy);
+        pnlButtons.add(btnCancel);
+        add(pnlButtons, BorderLayout.PAGE_END);
+
+        pack();
+        setLocationRelativeTo(this);
+        setVisible(true);
+    }
+
+    private void btnCancelClick(ActionEvent evt) {
+        loginServer.stop();
+        Object src = evt.getSource();
+        if (src instanceof Component) ((Component)src).setEnabled(false);
+
+        try {
+            loginServer.waitStop(5000);
+        } catch (InterruptedException ex) {
+            Thread.currentThread().interrupt();
+        }
+        dispose();
+    }
+
+    private void btnCopyLink(ActionEvent evt) {
+        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(link), null);
+    }
+
+    private void handleComplete(MSLoginServer.Response response) {
+        LOGGER.debug("Code get! " + response);
+        SwingUtilities.invokeLater(() -> {
+            dispose();
+            callback.accept(response);
+        });
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java
new file mode 100644
index 0000000..97e9988
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java
@@ -0,0 +1,152 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.auth.ui;
+
+import com.mojang.authlib.UserAuthentication;
+import com.sun.javafx.webkit.WebConsoleListener;
+import dev.figboot.olauncher.OLauncherConstants;
+import javafx.application.Platform;
+import javafx.embed.swing.JFXPanel;
+import javafx.scene.Group;
+import javafx.scene.Scene;
+import javafx.scene.web.WebEngine;
+import javafx.scene.web.WebView;
+import org.apache.commons.io.IOUtils;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ComponentAdapter;
+import java.awt.event.ComponentEvent;
+import java.io.*;
+import java.net.*;
+import java.nio.charset.StandardCharsets;;
+import java.util.UUID;
+
+public class MSLoginDialog2 extends JDialog {
+    private final UserAuthentication auth;
+
+    private WebView webView;
+    private WebEngine engine;
+
+    private final UUID stateId = UUID.randomUUID();
+
+    public MSLoginDialog2(UserAuthentication auth) {
+        this.auth = auth;
+        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
+    }
+
+    public void init() {
+        Platform.runLater(() -> {
+            JFXPanel panel = new JFXPanel();
+            Group group = new Group();
+            Scene scene = new Scene(group);
+
+            webView = new WebView();
+            engine = webView.getEngine();
+            webView.setVisible(true);
+            webView.setContextMenuEnabled(false);
+            webView.getEngine().setUserAgent("OLauncher/1.6.93");
+
+            WebConsoleListener.setDefaultListener(new WebConsoleListener() {
+                @Override
+                public void messageAdded(WebView webView, String s, int i, String s1) {
+                    System.out.println("Console: [" + i + ":" + s1 + "] " + s);
+                }
+            });
+            engine.titleProperty().addListener((observableValue, s, newValue) -> SwingUtilities.invokeLater(() -> setTitle(newValue)));
+            engine.locationProperty().addListener((val, s, newVal) -> {
+                System.out.println(newVal);
+            });
+            engine.getLoadWorker().exceptionProperty().addListener((val, s, newVal) -> {
+                newVal.printStackTrace();
+            });
+
+            group.getChildren().add(webView);
+            group.setVisible(true);
+            panel.setScene(scene);
+
+            SwingUtilities.invokeLater(() -> {
+                setModal(true);
+                setModalityType(ModalityType.APPLICATION_MODAL);
+                setLocationByPlatform(true);
+                setSize(new Dimension(800, 600));
+
+                setLayout(new BorderLayout());
+                add(panel, BorderLayout.CENTER);
+
+                resizeWebView(getContentPane().getSize());
+
+                getContentPane().addComponentListener(new ComponentAdapter() {
+                    @Override
+                    public void componentResized(ComponentEvent e) {
+                        resizeWebView(e.getComponent().getSize());
+                    }
+                });
+
+                //try {
+                    //loadURL("https://html5test.com");
+                    /*loadURL(String.format("https://login.live.com/oauth20_authorize.srf?client_id=%s&response_type=code&redirect_uri=%s&scope=%s&state=%s",
+                            URLEncoder.encode(OLauncherConstants.APP_CLIENT_ID.toString(), "UTF-8"),
+                            URLEncoder.encode(OLauncherConstants.REDIR_URI, "UTF-8"),
+                            URLEncoder.encode(OLauncherConstants.APP_SCOPES, "UTF-8"),
+                            URLEncoder.encode(stateId.toString(), "UTF-8")
+                    ));*/
+                    loadURL(OLauncherConstants.MC_LOGIN_URL);
+                //} catch (UnsupportedEncodingException ex) {
+                //    throw new RuntimeException(ex);
+                //}
+
+                setVisible(true);
+            });
+        });
+    }
+
+    private void resizeWebView(Dimension dim) {
+        Platform.runLater(() -> {
+            webView.setMaxSize(dim.getWidth(), dim.getHeight());
+            webView.setMinSize(dim.getWidth(), dim.getHeight());
+            webView.setPrefSize(dim.getWidth(), dim.getHeight());
+        });
+    }
+
+    private void loadURL(String url) {
+        Thread t = new Thread(() -> {
+            try {
+                URL urlObj = new URL(url);
+                HttpURLConnection conn = (HttpURLConnection)urlObj.openConnection();
+                conn.addRequestProperty("User-Agent", "OLauncher/1.6.93");
+                try (InputStream is = conn.getInputStream()) {
+                    String s = IOUtils.toString(is, StandardCharsets.UTF_8);
+
+                    Platform.runLater(() -> {
+                        engine.setJavaScriptEnabled(true);
+                        engine.loadContent(s.replace("integrity", "integrity_"));
+                    });
+                }
+            } catch (Exception ex) {
+                throw new RuntimeException(ex);
+            }
+        });
+        t.start();
+    }
+
+    static {
+        new JFXPanel();
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/util/BetterUUIDTypeAdapter.java b/src/main/java/dev/figboot/olauncher/util/BetterUUIDTypeAdapter.java
new file mode 100644
index 0000000..dc064de
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/util/BetterUUIDTypeAdapter.java
@@ -0,0 +1,41 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.util;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class BetterUUIDTypeAdapter extends TypeAdapter<UUID> {
+    @Override
+    public void write(JsonWriter jsonWriter, UUID uuid) throws IOException {
+        jsonWriter.value(uuid.toString());
+    }
+
+    @Override
+    public UUID read(JsonReader jsonReader) throws IOException {
+        String s = jsonReader.nextString();
+        return s.length() == 32 ?
+                UUID.fromString(s.replaceFirst("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})", "$1-$2-$3-$4-$5")) :
+                UUID.fromString(s);
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java b/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java
new file mode 100644
index 0000000..b73990e
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java
@@ -0,0 +1,38 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.util;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+
+import java.io.IOException;
+import java.time.Instant;
+
+public class InstantTypeAdapter extends TypeAdapter<Instant> {
+    @Override
+    public void write(JsonWriter jsonWriter, Instant instant) throws IOException {
+        jsonWriter.value(instant.toString());
+    }
+
+    @Override
+    public Instant read(JsonReader jsonReader) throws IOException {
+        return Instant.parse(jsonReader.nextString());
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java b/src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java
index 50dcae8..65a1aeb 100644
--- a/src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java
+++ b/src/main/java/net/minecraft/launcher/profile/AuthenticationDatabase.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSerializer;
 import com.mojang.authlib.AuthenticationService;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.UserAuthentication;
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -21,6 +21,8 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+
+import dev.figboot.olauncher.auth.MicrosoftAuthenticationService;
 import net.minecraft.launcher.Launcher;
 
 public class AuthenticationDatabase {
@@ -112,7 +114,8 @@ public class AuthenticationDatabase {
         public AuthenticationDatabase deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
             HashMap var4 = new HashMap();
             Map var5 = this.deserializeCredentials((JsonObject)var1, var3);
-            YggdrasilAuthenticationService var6 = new YggdrasilAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString());
+            // olauncher - use new authentication service
+            MicrosoftAuthenticationService var6 = new MicrosoftAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString());
             Iterator var7 = var5.entrySet().iterator();
 
             while(var7.hasNext()) {
diff --git a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
index d6a2f98..a29c749 100644
--- a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
+++ b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
@@ -29,6 +29,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+
+import dev.figboot.olauncher.auth.MicrosoftAuthenticationService;
 import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.LauncherConstants;
 import org.apache.commons.io.FileUtils;
@@ -57,7 +59,7 @@ public class ProfileManager {
         var2.registerTypeAdapter(ProfileManager.RawProfileList.class, new ProfileManager.RawProfileList.Serializer(var1));
         var2.setPrettyPrinting();
         this.gson = var2.create();
-        this.authDatabase = new AuthenticationDatabase(new YggdrasilAuthenticationService(var1.getLauncher().getProxy(), var1.getClientToken().toString()));
+        this.authDatabase = new AuthenticationDatabase(new MicrosoftAuthenticationService(var1.getLauncher().getProxy(), var1.getClientToken().toString()));
     }
 
     public void saveProfiles() throws IOException {
@@ -231,7 +233,8 @@ public class ProfileManager {
                     var7 = (UUID)var3.deserialize(var4.get("clientToken"), UUID.class);
                 }
 
-                AuthenticationDatabase var8 = new AuthenticationDatabase(new YggdrasilAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString()));
+                // olauncher - use new authentication service
+                AuthenticationDatabase var8 = new AuthenticationDatabase(new MicrosoftAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString()));
                 if (var4.has("authenticationDatabase")) {
                     var8 = (AuthenticationDatabase)var3.deserialize(var4.get("authenticationDatabase"), AuthenticationDatabase.class);
                 }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
index 32b2ced..31f1846 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -23,6 +23,10 @@ import javax.swing.JPanel;
 import javax.swing.JPasswordField;
 import javax.swing.JTextField;
 import javax.swing.SwingUtilities;
+
+import dev.figboot.olauncher.auth.MSLoginServer;
+import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
+import dev.figboot.olauncher.auth.ui.MSLoginDialog;
 import net.minecraft.launcher.LauncherConstants;
 import net.minecraft.launcher.profile.AuthenticationDatabase;
 import org.apache.commons.lang3.ArrayUtils;
@@ -211,4 +215,23 @@ public class LogInForm extends JPanel implements ActionListener {
         }
 
     }
+
+    // olauncher - add and handle login button
+    public void openMSLogin() {
+        SwingUtilities.invokeLater(() -> {
+            new MSLoginDialog(this::handleMSLogin);
+        });
+    }
+
+    public void handleMSLogin(MSLoginServer.Response response) {
+        if (response == null) {
+            this.popup.getErrorForm().displayError(new AuthenticationException("The authentication code is null"), "The authentication request was cancelled.");
+            return;
+        }
+
+        if (authentication instanceof MicrosoftUserAuthentication) {
+            ((MicrosoftUserAuthentication)authentication).setLoginResponse(response);
+            tryLogIn();
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
index 8f0c250..0c66c11 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
@@ -1,8 +1,8 @@
 package net.minecraft.launcher.ui.popups.login;
 
 import com.mojang.launcher.OperatingSystem;
-import java.awt.GridLayout;
-import java.awt.Window;
+
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.image.BufferedImage;
@@ -18,6 +18,7 @@ import javax.swing.JPanel;
 import javax.swing.JProgressBar;
 import javax.swing.SwingUtilities;
 import javax.swing.border.EmptyBorder;
+
 import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.LauncherConstants;
 
@@ -29,6 +30,7 @@ public class LogInPopup extends JPanel implements ActionListener {
     private final LogInForm logInForm;
     private final JButton loginButton = new JButton("Log In");
     private final JButton registerButton = new JButton("Register");
+    private final JButton microsoftLoginButton = new JButton("Log In with Microsoft"); // olauncher - Add MS login button
     private final JProgressBar progressBar = new JProgressBar();
 
     public LogInPopup(Launcher var1, LogInPopup.Callback var2) {
@@ -41,6 +43,7 @@ public class LogInPopup extends JPanel implements ActionListener {
         this.createInterface();
         this.loginButton.addActionListener(this);
         this.registerButton.addActionListener(this);
+        this.microsoftLoginButton.addActionListener(this);
     }
 
     protected void createInterface() {
@@ -69,9 +72,31 @@ public class LogInPopup extends JPanel implements ActionListener {
         this.add(this.logInForm);
         this.add(Box.createVerticalStrut(15));
         JPanel var6 = new JPanel();
-        var6.setLayout(new GridLayout(1, 2, 10, 0));
+        /*var6.setLayout(new GridLayout(1, 2, 10, 0));
         var6.add(this.registerButton);
-        var6.add(this.loginButton);
+        var6.add(this.loginButton);*/
+        // olauncher - Add MS login button
+        var6.setLayout(new GridBagLayout());
+        GridBagConstraints regConstraints = new GridBagConstraints(),
+                           loginConstraints = new GridBagConstraints(),
+                           msLoginConstraints = new GridBagConstraints();
+
+        regConstraints.gridx = 0;
+        regConstraints.gridy = 0;
+        regConstraints.insets = new Insets(0, 0, 5, 5);
+        var6.add(registerButton, regConstraints);
+
+        loginConstraints.gridx = 1;
+        loginConstraints.gridy = 0;
+        loginConstraints.insets = new Insets(0, 5, 5, 0);
+        var6.add(loginButton, loginConstraints);
+
+        msLoginConstraints.gridx = 0;
+        msLoginConstraints.gridy = 1;
+        msLoginConstraints.gridwidth = 2;
+        msLoginConstraints.insets = new Insets(5, 0, 0, 0);
+        var6.add(microsoftLoginButton, msLoginConstraints);
+
         this.add(var6);
         this.progressBar.setIndeterminate(true);
         this.progressBar.setVisible(false);
@@ -83,6 +108,8 @@ public class LogInPopup extends JPanel implements ActionListener {
             this.logInForm.tryLogIn();
         } else if (var1.getSource() == this.registerButton) {
             OperatingSystem.openLink(LauncherConstants.URL_REGISTER);
+        } else if (var1.getSource() == this.microsoftLoginButton) { // olauncher - handle MS login button
+            logInForm.openMSLogin();
         }
 
     }
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index b1484fa..720caf7 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -17,4 +17,4 @@
             <AppenderRef ref="Async"/>
         </Root>
     </Loggers>
-</Configuration>
\ No newline at end of file
+</Configuration>
-- 
2.43.0.windows.1

From 475e85e8d3f13bc9f0d092abd8a7bfbddff6e001 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 17 Mar 2022 16:58:53 -0500
Subject: [PATCH 06/33] Add xuid parameter and remove unused imports

---
 .../launcher/game/process/GameProcessBuilder.java |  1 -
 .../game/process/direct/DirectGameProcess.java    |  1 -
 .../java/com/mojang/util/QueueLogAppender.java    |  2 --
 .../dev/figboot/olauncher/auth/MSLoginServer.java |  1 -
 .../auth/MicrosoftUserAuthentication.java         | 15 +++++++++++++++
 .../figboot/olauncher/auth/ui/MSLoginDialog.java  |  1 -
 .../net/minecraft/launcher/LauncherConstants.java |  1 -
 .../launcher/game/GameLaunchDispatcher.java       |  1 -
 .../launcher/game/MinecraftGameRunner.java        | 10 +++++++++-
 .../net/minecraft/launcher/profile/Profile.java   |  1 -
 .../updater/CompleteMinecraftVersion.java         |  1 -
 11 files changed, 24 insertions(+), 11 deletions(-)

diff --git a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
index c5df30c..dd3dd57 100644
--- a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
+++ b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
@@ -1,7 +1,6 @@
 package com.mojang.launcher.game.process;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
diff --git a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
index 2d0aca3..1b40430 100644
--- a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
+++ b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
@@ -1,7 +1,6 @@
 package com.mojang.launcher.game.process.direct;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.EvictingQueue;
 import com.mojang.launcher.events.GameOutputLogProcessor;
diff --git a/src/main/java/com/mojang/util/QueueLogAppender.java b/src/main/java/com/mojang/util/QueueLogAppender.java
index 1abc840..8928e0c 100644
--- a/src/main/java/com/mojang/util/QueueLogAppender.java
+++ b/src/main/java/com/mojang/util/QueueLogAppender.java
@@ -11,13 +11,11 @@ import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
-import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.core.pattern.RegexReplacement;
 
 @Plugin(
     name = "Queue",
diff --git a/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java b/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
index 6b4130e..0728a4d 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MSLoginServer.java
@@ -30,7 +30,6 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index 632af6a..923af20 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -18,6 +18,9 @@
 
 package dev.figboot.olauncher.auth;
 
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
 import com.mojang.authlib.*;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
@@ -29,12 +32,15 @@ import dev.figboot.olauncher.auth.responses.MSTokenAuthResponse;
 import dev.figboot.olauncher.auth.responses.MinecraftXboxLoginResponse;
 import dev.figboot.olauncher.auth.responses.XSTSAuthResponse;
 import dev.figboot.olauncher.auth.responses.XboxLiveAuthResponse;
+import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.nio.charset.StandardCharsets;
 import java.time.Instant;
 import java.time.temporal.ChronoUnit;
+import java.util.Base64;
 import java.util.Map;
 
 public class MicrosoftUserAuthentication extends HttpUserAuthentication {
@@ -49,6 +55,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private String xblToken;
     private Instant xblTokenExpire;
     private String mojToken;
+    @Getter private String xuid;
     private Instant mojTokenExpire;
     private boolean loggedIn;
 
@@ -179,6 +186,12 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
                 MinecraftXboxLoginResponse.class);
         this.mojToken = mcLoginRes.getAccessToken();
         this.mojTokenExpire = Instant.now().plus(mcLoginRes.getExpiresIn(), ChronoUnit.SECONDS);
+
+        // Extract xuid from mojToken (JWT)
+
+        JsonElement elem = JsonParser.parseString(new String(Base64.getUrlDecoder().decode(mojToken.split("\\.")[1].getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));
+        JsonObject root = elem.getAsJsonObject();
+        this.xuid = root.get("xuid").getAsString();
     }
 
     private void profileLogIn() throws AuthenticationException {
@@ -250,6 +263,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         msRefreshToken = (String)var1.get("refreshToken");
         xblToken = (String)var1.get("xboxLiveToken");
         xblTokenExpire = Instant.parse((String)var1.get("xboxLiveTokenExpire"));
+        xuid = (String)var1.get("xuid");
         mojToken = (String)var1.get("mojToken");
         mojTokenExpire = Instant.parse((String)var1.get("mojTokenExpire"));
     }
@@ -260,6 +274,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         map.put("refreshToken", msRefreshToken);
         map.put("xboxLiveToken", xblToken);
         map.put("xboxLiveTokenExpire", xblTokenExpire.toString());
+        map.put("xuid", xuid);
         map.put("mojToken", mojToken);
         map.put("mojTokenExpire", mojTokenExpire.toString());
         return map;
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
index 10dbf2a..83bd084 100644
--- a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
@@ -21,7 +21,6 @@ package dev.figboot.olauncher.auth.ui;
 import com.mojang.launcher.OperatingSystem;
 import dev.figboot.olauncher.OLauncherConstants;
 import dev.figboot.olauncher.auth.MSLoginServer;
-import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index c739732..db78fda 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -1,7 +1,6 @@
 package net.minecraft.launcher;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
diff --git a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
index 730aa86..2e671dd 100644
--- a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
+++ b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
@@ -1,7 +1,6 @@
 package net.minecraft.launcher.game;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
 import com.mojang.authlib.UserAuthentication;
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index e82aa38..6f7050d 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -1,7 +1,6 @@
 package net.minecraft.launcher.game;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -46,6 +45,8 @@ import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
+
+import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
 import net.minecraft.launcher.CompatibilityRule;
 import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
 import net.minecraft.launcher.Launcher;
@@ -318,6 +319,13 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
         var6.put("classpath", this.constructClassPath(this.getVersion()));
         var6.put("classpath_separator", System.getProperty("path.separator"));
         var6.put("primary_jar", (new File(this.getLauncher().getWorkingDirectory(), "versions/" + this.getVersion().getJar() + "/" + this.getVersion().getJar() + ".jar")).getAbsolutePath());
+
+        // olauncher - add MSA options
+        if (var5 instanceof MicrosoftUserAuthentication) {
+            var6.put("auth_xuid", ((MicrosoftUserAuthentication)var5).getXuid());
+            // TODO: clientid as well
+        }
+
         return new StrSubstitutor(var6);
     }
 
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index a450ca3..fdd24fc 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -1,7 +1,6 @@
 package net.minecraft.launcher.profile;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.collect.Sets;
 import com.mojang.launcher.updater.VersionFilter;
 import com.mojang.launcher.versions.ReleaseType;
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index b9ac4df..9d786d5 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -1,7 +1,6 @@
 package net.minecraft.launcher.updater;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Objects;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-- 
2.43.0.windows.1

From 607e1f94f3c082f3b2af82b920233b875daf5bc7 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 24 Mar 2022 00:25:56 -0500
Subject: [PATCH 07/33] Use the new news website

---
 src/main/java/net/minecraft/launcher/LauncherConstants.java | 2 +-
 src/main/java/net/minecraft/launcher/ui/LauncherPanel.java  | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index db78fda..faf0dc0 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -19,7 +19,7 @@ public class LauncherConstants {
     public static final String URL_JAR_FALLBACK = "https://s3.amazonaws.com/Minecraft.Download/";
     public static final String URL_RESOURCE_BASE = "http://resources.download.minecraft.net/";
     public static final String URL_LIBRARY_BASE = "https://libraries.minecraft.net/";
-    public static final String URL_BLOG = "http://mcupdate.tumblr.com";
+    public static final String URL_BLOG = "https://olauncher.github.io/news";
     public static final String URL_SUPPORT = "http://help.mojang.com/?ref=launcher";
     public static final String URL_STATUS_CHECKER = "http://status.mojang.com/check";
     public static final int UNVERSIONED_BOOTSTRAP_VERSION = 0;
diff --git a/src/main/java/net/minecraft/launcher/ui/LauncherPanel.java b/src/main/java/net/minecraft/launcher/ui/LauncherPanel.java
index 3553a21..711b417 100644
--- a/src/main/java/net/minecraft/launcher/ui/LauncherPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/LauncherPanel.java
@@ -47,7 +47,7 @@ public class LauncherPanel extends JPanel {
 
     protected JPanel createLauncherInterface() {
         JPanel var1 = new JPanel(new BorderLayout());
-        this.tabPanel.getBlog().setPage("http://mcupdate.tumblr.com");
+        this.tabPanel.getBlog().setPage(LauncherConstants.URL_BLOG);
         boolean var2 = this.getMinecraftLauncher().getBootstrapVersion() < 100;
         boolean var3 = OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS;
         if (OperatingSystem.getCurrentPlatform() == OperatingSystem.OSX) {
-- 
2.43.0.windows.1

From 8f56836bddb6dd1c91bfaf19b530ba83ad002da3 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Sat, 26 Mar 2022 15:24:44 -0500
Subject: [PATCH 08/33] Add bundled java runtime functionality

---
 .../java/com/mojang/launcher/Launcher.java    |   8 +
 .../game/runner/AbstractGameRunner.java       |  87 ++++++-
 .../launcher/game/runner/GameRunner.java      |   2 +-
 .../launcher/versions/CompleteVersion.java    |   5 +
 .../figboot/olauncher/OLauncherConstants.java |   5 +
 .../olauncher/launcher/JavaVersionInfo.java   |  41 +++
 .../launcher/runtime/JavaRuntimeManager.java  | 246 ++++++++++++++++++
 .../launcher/runtime/RuntimesManifest.java    |  38 +++
 .../download/RuntimeFileDownloadable.java     | 218 ++++++++++++++++
 .../launcher/runtime/file/RuntimeFile.java    |  26 ++
 .../runtime/file/RuntimeFileDirectory.java    |  30 +++
 .../runtime/file/RuntimeFileFile.java         |  44 ++++
 .../runtime/file/RuntimeFileLink.java         |  35 +++
 .../runtime/file/RuntimeFileList.java         |  27 ++
 .../olauncher/util/DeletingFileVisitor.java   |  59 +++++
 .../util/runtime/RuntimeFileDeserializer.java |  46 ++++
 .../java/net/minecraft/launcher/Launcher.java |  17 ++
 .../launcher/SwingUserInterface.java          |   2 +
 .../launcher/game/GameLaunchDispatcher.java   |   2 +-
 .../launcher/game/MinecraftGameRunner.java    |  13 +-
 .../ui/popups/profile/ProfileJavaPanel.java   |  13 +-
 .../updater/CompleteMinecraftVersion.java     |  16 ++
 22 files changed, 974 insertions(+), 6 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/JavaVersionInfo.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/JavaRuntimeManager.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/RuntimesManifest.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/download/RuntimeFileDownloadable.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFile.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileDirectory.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileFile.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileLink.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileList.java
 create mode 100644 src/main/java/dev/figboot/olauncher/util/DeletingFileVisitor.java
 create mode 100644 src/main/java/dev/figboot/olauncher/util/runtime/RuntimeFileDeserializer.java

diff --git a/src/main/java/com/mojang/launcher/Launcher.java b/src/main/java/com/mojang/launcher/Launcher.java
index f79a4b6..100ab0f 100644
--- a/src/main/java/com/mojang/launcher/Launcher.java
+++ b/src/main/java/com/mojang/launcher/Launcher.java
@@ -9,6 +9,10 @@ import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+
+import dev.figboot.olauncher.OLauncherConstants;
+import dev.figboot.olauncher.launcher.runtime.JavaRuntimeManager;
+import lombok.Getter;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -24,6 +28,8 @@ public class Launcher {
     private final ReleaseTypeFactory releaseTypeFactory;
     private final int launcherFormatVersion;
 
+    @Getter private final JavaRuntimeManager jreManager; // olauncher - add java runtime manager
+
     public Launcher(UserInterface var1, File var2, Proxy var3, PasswordAuthentication var4, VersionManager var5, Agent var6, ReleaseTypeFactory var7, int var8) {
         this.downloaderExecutorService = new ExceptionalThreadPoolExecutor(16, 16, 30L, TimeUnit.SECONDS);
         this.ui = var1;
@@ -35,6 +41,8 @@ public class Launcher {
         this.releaseTypeFactory = var7;
         this.launcherFormatVersion = var8;
         this.downloaderExecutorService.allowCoreThreadTimeOut(true);
+
+        this.jreManager = new JavaRuntimeManager(OLauncherConstants.JRE_MANIFEST_URL, var3, var2); // olauncher - add java runtime manager
     }
 
     public ReleaseTypeFactory getReleaseTypeFactory() {
diff --git a/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java b/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
index f3546fc..cd37a5b 100644
--- a/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
+++ b/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
@@ -10,9 +10,16 @@ import com.mojang.launcher.updater.download.DownloadListener;
 import com.mojang.launcher.updater.download.Downloadable;
 import com.mojang.launcher.versions.CompleteVersion;
 import java.io.IOException;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
+import dev.figboot.olauncher.launcher.runtime.JavaRuntimeManager;
+import dev.figboot.olauncher.launcher.runtime.RuntimesManifest;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileList;
+import lombok.AccessLevel;
+import lombok.Getter;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -24,6 +31,8 @@ public abstract class AbstractGameRunner implements GameRunner, DownloadListener
     private GameInstanceStatus status;
     private final List<GameRunnerListener> listeners;
 
+    @Getter(AccessLevel.PROTECTED) private Path bundledRuntimeDir; // olauncher - add bundled runtime directory
+
     public AbstractGameRunner() {
         this.status = GameInstanceStatus.IDLE;
         this.listeners = Lists.newArrayList();
@@ -48,7 +57,7 @@ public abstract class AbstractGameRunner implements GameRunner, DownloadListener
         return this.status;
     }
 
-    public void playGame(VersionSyncInfo var1) {
+    public void playGame(VersionSyncInfo var1, boolean bundledRuntime) { // olauncher - add bundledRuntime argument
         synchronized(this.lock) {
             if (this.getStatus() != GameInstanceStatus.IDLE) {
                 LOGGER.warn("Tried to play game but game is already starting!");
@@ -109,12 +118,88 @@ public abstract class AbstractGameRunner implements GameRunner, DownloadListener
                     }
 
                     this.setStatus(GameInstanceStatus.DOWNLOADING);
+
+                    // olauncher start - handle java runtime setting
+                    if (bundledRuntime) {
+                        try {
+                            ensureRuntime();
+                        } catch (IOException ex) {
+                            LOGGER.error("I/O error setting up bundled java runtime", ex);
+                            setStatus(GameInstanceStatus.IDLE);
+                            return;
+                        } catch (RuntimeException ex) {
+                            LOGGER.error("Error setting up bundled java runtime", ex);
+                            setStatus(GameInstanceStatus.IDLE);
+                            return;
+                        }
+                    }
+                    // olauncher end
+
                     this.downloadRequiredFiles(var1);
                 }
             }
         }
     }
 
+    // olauncher start - java runtime functions
+    private void ensureRuntime() throws IOException {
+        JavaRuntimeManager jreManager = getLauncher().getJreManager();
+        String component = version.getJavaVersion().getComponent();
+        List<RuntimesManifest.Runtime> runtimes = jreManager.getRuntimes(component);
+
+        if (runtimes.size() == 0) {
+            throw new RuntimeException("There are no supported java runtimes. You choose one manually.");
+        }
+
+        if (runtimes.size() > 1) {
+            LOGGER.warn("More than one java runtime is available, choosing one at random:");
+            for (RuntimesManifest.Runtime runtime : runtimes) {
+                LOGGER.warn("- " + runtime.getVersion().getName() + " (Released at " + runtime.getVersion().getReleased().toString() + ")");
+            }
+        }
+
+        RuntimesManifest.Runtime runtime = runtimes.get(0);
+        if (!jreManager.shouldDownloadRuntime(component, runtime)) {
+            bundledRuntimeDir = jreManager.getJavaExecutable(component);
+            return; // the runtime is up-to-date! :)
+        }
+
+        LOGGER.info("Need to download java runtime '" + runtime.getVersion().getName() + "' (Released at " + runtime.getVersion().getReleased().toString() + ")");
+
+        jreManager.deleteRuntime(component);
+        RuntimeFileList files = jreManager.downloadFileList(component, runtime);
+        jreManager.preDownloadRuntime(component, runtime, files);
+        bundledRuntimeDir = jreManager.getJavaExecutable(component);
+
+        // Download the runtime
+        DownloadJob job = new DownloadJob("Java Runtime", false, new DownloadListener() {
+            @Override
+            public void onDownloadJobFinished(DownloadJob var1) {
+                afterDownloadRuntime(jreManager, component, runtime);
+                AbstractGameRunner.this.onDownloadJobFinished(var1);
+            }
+
+            @Override
+            public void onDownloadJobProgressChanged(DownloadJob var1) {
+                updateProgressBar();
+            }
+        });
+
+        addJob(job);
+        jreManager.downloadRuntime(job, component, files);
+        job.startDownloading(getLauncher().getDownloaderExecutorService());
+    }
+
+    private void afterDownloadRuntime(JavaRuntimeManager jreManager, String component, RuntimesManifest.Runtime runtime) {
+        try {
+            jreManager.postDownloadRuntime(component, runtime);
+        } catch (IOException ex) {
+            LOGGER.error("Error writing java runtime version description, the runtime may be redownloaded", ex);
+        }
+    }
+
+    // olauncher end
+
     protected void downloadRequiredFiles(VersionSyncInfo var1) {
         try {
             DownloadJob var2 = new DownloadJob("Version & Libraries", false, this);
diff --git a/src/main/java/com/mojang/launcher/game/runner/GameRunner.java b/src/main/java/com/mojang/launcher/game/runner/GameRunner.java
index 7bd69c9..5d5fa85 100644
--- a/src/main/java/com/mojang/launcher/game/runner/GameRunner.java
+++ b/src/main/java/com/mojang/launcher/game/runner/GameRunner.java
@@ -7,7 +7,7 @@ import com.mojang.launcher.updater.download.DownloadJob;
 public interface GameRunner {
     GameInstanceStatus getStatus();
 
-    void playGame(VersionSyncInfo var1);
+    void playGame(VersionSyncInfo var1, boolean bundledRuntime); // olauncher - add bundledRuntime argument
 
     boolean hasRemainingJobs();
 
diff --git a/src/main/java/com/mojang/launcher/versions/CompleteVersion.java b/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
index afa4dd4..c05c7f7 100644
--- a/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
+++ b/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
@@ -1,5 +1,7 @@
 package com.mojang.launcher.versions;
 
+import dev.figboot.olauncher.launcher.JavaVersionInfo;
+
 import java.util.Date;
 
 public interface CompleteVersion extends Version {
@@ -20,4 +22,7 @@ public interface CompleteVersion extends Version {
     boolean isSynced();
 
     void setSynced(boolean var1);
+
+    // olauncher - JavaVersion getter
+    JavaVersionInfo getJavaVersion();
 }
diff --git a/src/main/java/dev/figboot/olauncher/OLauncherConstants.java b/src/main/java/dev/figboot/olauncher/OLauncherConstants.java
index 67728f6..e88d992 100644
--- a/src/main/java/dev/figboot/olauncher/OLauncherConstants.java
+++ b/src/main/java/dev/figboot/olauncher/OLauncherConstants.java
@@ -18,8 +18,11 @@
 
 package dev.figboot.olauncher;
 
+import java.net.URL;
 import java.util.UUID;
 
+import static net.minecraft.launcher.LauncherConstants.constantURL;
+
 public final class OLauncherConstants {
     private OLauncherConstants() { }
 
@@ -28,4 +31,6 @@ public final class OLauncherConstants {
     public static final String APP_SCOPES = "XboxLive.signin offline_access";
     public static final int REDIR_URI_PORT = 6183;
     public static final String REDIR_URI = "http://localhost:" + REDIR_URI_PORT;
+
+    public static final URL JRE_MANIFEST_URL = constantURL("https://launchermeta.mojang.com/v1/products/java-runtime/2ec0cc96c44e5a76b9c8b7c39df7210883d12871/all.json");
 }
diff --git a/src/main/java/dev/figboot/olauncher/launcher/JavaVersionInfo.java b/src/main/java/dev/figboot/olauncher/launcher/JavaVersionInfo.java
new file mode 100644
index 0000000..14ddc9a
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/JavaVersionInfo.java
@@ -0,0 +1,41 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher;
+
+import lombok.Getter;
+
+public class JavaVersionInfo {
+    public static final JavaVersionInfo DEFAULT;
+
+    @Getter private String component;
+    @Getter private int majorVersion;
+
+    public JavaVersionInfo() { }
+
+    public JavaVersionInfo(JavaVersionInfo other) {
+        this.component = other.component;
+        this.majorVersion = other.majorVersion;
+    }
+
+    static {
+        DEFAULT = new JavaVersionInfo();
+        DEFAULT.component = "jre-legacy";
+        DEFAULT.majorVersion = 8;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/JavaRuntimeManager.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/JavaRuntimeManager.java
new file mode 100644
index 0000000..cfb06a0
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/JavaRuntimeManager.java
@@ -0,0 +1,246 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime;
+
+import com.google.common.reflect.TypeToken;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.mojang.launcher.Http;
+import com.mojang.launcher.OperatingSystem;
+import com.mojang.launcher.updater.ExceptionalThreadPoolExecutor;
+import com.mojang.launcher.updater.download.DownloadJob;
+import com.mojang.launcher.updater.download.Downloadable;
+import dev.figboot.olauncher.launcher.runtime.download.RuntimeFileDownloadable;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFile;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileFile;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileList;
+import dev.figboot.olauncher.util.DeletingFileVisitor;
+import dev.figboot.olauncher.util.InstantTypeAdapter;
+import dev.figboot.olauncher.util.runtime.RuntimeFileDeserializer;
+import lombok.Getter;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.BufferedReader;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.math.BigInteger;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.security.DigestInputStream;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.time.Instant;
+import java.util.*;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class JavaRuntimeManager {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private boolean refreshing;
+    private final Object refreshingLock = new Object();
+
+    private final URL manifestUrl;
+    private final Proxy proxy;
+
+    private final Path runtimesDirectory;
+    private final Path platformDirectory;
+    private final Gson gson;
+
+    private final String jrePlatformName;
+    @Getter private final ThreadPoolExecutor executorService;
+    private Map<String, Map<String, List<RuntimesManifest.Runtime>>> manifest;
+
+    public JavaRuntimeManager(URL manifestUrl, Proxy proxy, File workDir) {
+        refreshing = false;
+        this.manifestUrl = manifestUrl;
+        this.proxy = proxy;
+
+        runtimesDirectory = workDir.toPath().resolve("olruntime");
+        gson = new GsonBuilder()
+                .registerTypeAdapter(Instant.class, new InstantTypeAdapter())
+                .registerTypeAdapter(RuntimeFile.class, new RuntimeFileDeserializer())
+                .create();
+
+        jrePlatformName = findPlatformName(System.getProperty("os.arch").contains("64")); // FIXME: make accurate
+        platformDirectory = runtimesDirectory.resolve(jrePlatformName);
+        executorService = new ExceptionalThreadPoolExecutor(4, 8, 30L, TimeUnit.SECONDS);
+    }
+
+    public void reloadRuntimes() throws IOException {
+        synchronized (refreshingLock) {
+            refreshing = true;
+        }
+
+        manifest = gson.fromJson(Http.performGet(manifestUrl, proxy), new TypeToken<Map<String, Map<String, List<RuntimesManifest.Runtime>>>>(){}.getType());
+
+        LOGGER.info("Your java runtime platform is '" + jrePlatformName + "'.");
+
+        if (!manifest.containsKey(jrePlatformName)) {
+            LOGGER.error("Your JVM platform (" + jrePlatformName + ") is NOT PRESENT in the runtime manifest! The launcher will now break spectacularly.");
+        }
+
+        LOGGER.info("Finished refreshing java runtime list.");
+        synchronized (refreshingLock) {
+            refreshing = false;
+        }
+    }
+
+    public List<RuntimesManifest.Runtime> getRuntimes(String component) {
+        synchronized (refreshingLock) {
+            if (refreshing) return Collections.emptyList();
+        }
+
+        List<RuntimesManifest.Runtime> runtimes = manifest.get(jrePlatformName).get(component);
+        if (runtimes == null) return Collections.emptyList();
+        return Collections.unmodifiableList(runtimes);
+    }
+
+    public boolean shouldDownloadRuntime(String component, RuntimesManifest.Runtime runtime) throws IOException {
+        Path componentFolder = platformDirectory.resolve(component);
+
+        if (!Files.isDirectory(componentFolder)) {
+            return true;
+        }
+
+        Path descPath = componentFolder.resolve(".version");
+        if (Files.notExists(descPath)) return true;
+
+        Instant updateTime;
+        String version;
+
+        try (DataInputStream dis = new DataInputStream(Files.newInputStream(descPath))) {
+            updateTime = Instant.ofEpochMilli(dis.readLong());
+            version = dis.readUTF();
+        }
+
+        return runtime.getVersion().getReleased().isAfter(updateTime) || !runtime.getVersion().getName().equals(version);
+    }
+
+    public Path getJavaExecutable(String component) {
+        Path runtimeDir = platformDirectory.resolve(component).resolve("runtime");
+        OperatingSystem os = OperatingSystem.getCurrentPlatform();
+        if (component.equals("minecraft-java-exe")) {
+            return runtimeDir.resolve("MinecraftJava.exe");
+        } else if (os == OperatingSystem.WINDOWS) {
+            return runtimeDir.resolve("bin").resolve("javaw.exe");
+        } else if (os == OperatingSystem.OSX) {
+            return runtimeDir.resolve("jre.bundle").resolve("Contents").resolve("Home").resolve("bin").resolve("java");
+        } else { // LINUX
+            return runtimeDir.resolve("bin").resolve("java");
+        }
+    }
+
+    public void deleteRuntime(String component) throws IOException {
+        Path componentDir = platformDirectory.resolve(component);
+
+        if (Files.isDirectory(componentDir))
+            Files.walkFileTree(componentDir, DeletingFileVisitor.get());
+    }
+
+    public RuntimeFileList downloadFileList(String component, RuntimesManifest.Runtime runtime) throws IOException {
+        HttpURLConnection conn = (HttpURLConnection)runtime.getManifest().getUrl().openConnection();
+        if (conn.getResponseCode() / 100 != 2) throw new RuntimeException("Error downloading component manifest '" + component + "': Received response " + conn.getResponseCode() + " " + conn.getResponseMessage());
+
+        MessageDigest digest;
+        try {
+            digest = MessageDigest.getInstance("SHA-1");
+        } catch (NoSuchAlgorithmException ex) {
+            throw new RuntimeException(ex); // should not happen
+        }
+
+        RuntimeFileList files;
+        try (Reader reader = new BufferedReader(new InputStreamReader(new DigestInputStream(conn.getInputStream(), digest)))) {
+            files = gson.fromJson(reader, RuntimeFileList.class);
+        }
+
+        String hash = String.format("%1$040x", new BigInteger(1, digest.digest()));
+        if (!hash.equalsIgnoreCase(runtime.getManifest().getSha1()))
+            throw new RuntimeException("Error downloading component manifest '" + component + "': The manifest hash does not match! (Expected " + runtime.getManifest().getSha1() + ", got " + hash + ")");
+        return files;
+    }
+
+    public void preDownloadRuntime(String component, RuntimesManifest.Runtime runtime, RuntimeFileList files) throws IOException {
+        Path componentDir = platformDirectory.resolve(component);
+        Path runtimeRootDir = componentDir.resolve("runtime");
+
+        for (Map.Entry<String, RuntimeFile> entry : files.getFiles().entrySet()) {
+            if (entry.getValue() instanceof RuntimeFileFile) continue;
+            entry.getValue().create(runtimeRootDir.resolve(entry.getKey()));
+        }
+    }
+
+    public void postDownloadRuntime(String component, RuntimesManifest.Runtime runtime) throws IOException {
+        Path componentFolder = platformDirectory.resolve(component);
+        Path objectsFolder = componentFolder.resolve("objects");
+
+        // Write .version
+        Path descPath = componentFolder.resolve(".version");
+        if (Files.notExists(descPath)) {
+            try (DataOutputStream dos = new DataOutputStream(Files.newOutputStream(descPath))) {
+                dos.writeLong(runtime.getVersion().getReleased().toEpochMilli());
+                dos.writeUTF(runtime.getVersion().getName());
+            }
+        }
+
+        // Delete compressed objects
+        if (Files.isDirectory(objectsFolder)) {
+            Files.walkFileTree(objectsFolder, DeletingFileVisitor.get());
+        }
+    }
+
+    public DownloadJob downloadRuntime(DownloadJob job, String component, RuntimeFileList fileList) {
+        RuntimeFileFile file;
+        Path componentFolder = platformDirectory.resolve(component);
+        Path runtimeRoot = componentFolder.resolve("runtime"), objectsRoot = componentFolder.resolve("objects"), path;
+        List<Downloadable> downloadables = new LinkedList<>();
+        for (Map.Entry<String, RuntimeFile> entry : fileList.getFiles().entrySet()) {
+            if (!(entry.getValue() instanceof RuntimeFileFile)) continue;
+            file = (RuntimeFileFile)entry.getValue();
+            path = runtimeRoot.resolve(entry.getKey());
+            if (file.getRaw() == null) {
+                LOGGER.warn(entry.getKey() + " AAAAAAAAa");
+            }
+            downloadables.add(new RuntimeFileDownloadable(proxy, entry.getKey(), objectsRoot, path, file));
+        }
+        job.addDownloadables(downloadables);
+        return job;
+    }
+
+    private static String findPlatformName(boolean _64bit) {
+        switch (OperatingSystem.getCurrentPlatform()) {
+            case WINDOWS:
+                return _64bit ? "windows-x64" : "windows-x86";
+            case OSX:
+                return "mac-os";
+            case LINUX:
+                return _64bit ? "linux" : "linux-i386"; // not technically correct
+            default:
+                return "gamecore";
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/RuntimesManifest.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/RuntimesManifest.java
new file mode 100644
index 0000000..a0bc907
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/RuntimesManifest.java
@@ -0,0 +1,38 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime;
+
+import lombok.Getter;
+import net.minecraft.launcher.updater.DownloadInfo;
+
+import java.time.Instant;
+
+public final class RuntimesManifest {
+    private RuntimesManifest() { }
+
+    public static class Runtime {
+        @Getter private DownloadInfo manifest;
+        @Getter private Version version;
+    }
+
+    public static class Version {
+        @Getter private String name;
+        @Getter private Instant released;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/download/RuntimeFileDownloadable.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/download/RuntimeFileDownloadable.java
new file mode 100644
index 0000000..b14a8e7
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/download/RuntimeFileDownloadable.java
@@ -0,0 +1,218 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.download;
+
+import com.mojang.launcher.updater.download.Downloadable;
+import com.mojang.launcher.updater.download.MonitoringInputStream;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileFile;
+import lombok.RequiredArgsConstructor;
+import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.math.BigInteger;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.attribute.PosixFilePermission;
+import java.security.DigestInputStream;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.HashSet;
+import java.util.Set;
+
+// Adapted from AssetDownloadable
+public class RuntimeFileDownloadable extends Downloadable {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final String name;
+    private final RuntimeFileFile file;
+    private final Path objectLoc, finalLoc;
+    private Status status;
+
+    public RuntimeFileDownloadable(Proxy proxy, String name, Path objectsDir, Path finalLoc, RuntimeFileFile file) {
+        super(proxy, file.getRaw().getUrl(), finalLoc.toFile(), false);
+        this.name = name;
+        objectLoc = file.getLzma() != null ? resolvePathFromHash(objectsDir, file.getLzma().getSha1()) : null;
+        this.finalLoc = finalLoc;
+        this.file = file;
+        status = Status.DOWNLOADING;
+    }
+
+    private Path resolvePathFromHash(Path p, String hash) {
+        return p.resolve(hash.substring(0, 2)).resolve(hash);
+    }
+
+    @Override
+    public String download() throws IOException {
+        ++this.numAttempts;
+
+        ensureFileWritable(finalLoc);
+        if (objectLoc != null) ensureFileWritable(objectLoc);
+
+        if (Files.isRegularFile(finalLoc)) {
+            long size = Files.size(finalLoc);
+            if (size == file.getRaw().getSize()) {
+                setExecutable(finalLoc);
+                return "Have local file and it's the correct size. Assuming it's okay!";
+            }
+
+            LOGGER.warn("Have local file, but it has the wrong size: {} expected, got {}", new Object[]{file.getRaw().getSize(), size});
+            Files.delete(finalLoc);
+            status = Status.DOWNLOADING;
+        }
+
+        if (objectLoc != null && Files.isRegularFile(objectLoc)) {
+            String hash = getDigest(objectLoc, "SHA-1", 40);
+            if (hash.equalsIgnoreCase(file.getLzma().getSha1())) {
+                return decompress();
+            }
+
+            LOGGER.warn("Have local compressed file, but it has the wrong hash: {} expected, got {}", new Object[]{file.getLzma().getSha1(), hash});
+            Files.delete(objectLoc);
+        }
+
+        if (objectLoc != null) { // download compressed :)
+            String hash = actuallyDownload(file.getLzma().getUrl(), objectLoc);
+
+            if (hash.equalsIgnoreCase(file.getLzma().getSha1())) {
+                return decompress();
+            }
+
+            Files.delete(objectLoc);
+            throw new RuntimeException(String.format("Hash does not match for downloaded compressed file. %s expected, got %s", file.getLzma().getSha1(), hash));
+        } else { // download raw :(
+            String hash = actuallyDownload(file.getRaw().getUrl(), finalLoc);
+
+            if (hash.equalsIgnoreCase(file.getRaw().getSha1())) {
+                setExecutable(finalLoc);
+                return "File downloaded and hash matched.";
+            }
+
+            Files.delete(finalLoc);
+            throw new RuntimeException(String.format("Hash does not match for downloaded file. %s expected, got %s", file.getRaw().getSha1(), hash));
+        }
+    }
+
+    @Override
+    public String getStatus() {
+        return status.name + " " + name;
+    }
+
+    private String actuallyDownload(URL url, Path target) throws IOException {
+        HttpURLConnection conn = makeConnection(url);
+        int res = conn.getResponseCode();
+        if (res / 100 != 2) {
+            throw new RuntimeException("Server responded with " + res + " " + conn.getResponseMessage());
+        }
+
+        updateExpectedSize(conn);
+        String hash;
+        try (InputStream is = new MonitoringInputStream(conn.getInputStream(), getMonitor());
+             OutputStream os = Files.newOutputStream(target)) {
+            hash = copyAndDigest(is, os, "SHA-1", 40);
+        }
+        return hash;
+    }
+
+    private void setExecutable(Path path) throws IOException {
+        if (!file.isExecutable()) return;
+
+        try {
+            Set<PosixFilePermission> permission = new HashSet<>(Files.getPosixFilePermissions(path));
+            permission.add(PosixFilePermission.OWNER_EXECUTE);
+            permission.add(PosixFilePermission.GROUP_EXECUTE);
+            permission.add(PosixFilePermission.OTHERS_EXECUTE);
+            Files.setPosixFilePermissions(path, permission);
+        } catch (UnsupportedOperationException ex) {
+            LOGGER.info("Not setting " + path.toString() + " executable, the filesystem does not support it.");
+        }
+    }
+
+    private String decompress() throws IOException {
+        status = Status.DECOMPRESSING;
+
+        String hash;
+        try (OutputStream os = Files.newOutputStream(finalLoc);
+                InputStream is = new LZMACompressorInputStream(Files.newInputStream(objectLoc))) {
+            hash = copyAndDigest(is, os, "SHA-1", 40);
+        }
+
+        status = Status.DOWNLOADING;
+        if (hash.equalsIgnoreCase(file.getRaw().getSha1())) {
+            setExecutable(finalLoc);
+            return "Decompressed file and hash matched";
+        } else {
+            Files.delete(finalLoc);
+            throw new RuntimeException(String.format("Decompressed file hash did not match! %s expected, got %s", file.getRaw().getSha1(), hash));
+        }
+    }
+
+    private void ensureFileWritable(Path path) throws IOException {
+        Path parent = path.getParent();
+        if (parent != null && !Files.isDirectory(parent)) {
+            LOGGER.info("Making directory " + parent);
+            Files.createDirectories(parent);
+        }
+
+        if (Files.isRegularFile(path) && !Files.isWritable(path)) {
+            throw new RuntimeException("Do not have write permissions for " + path + " - aborting!");
+        }
+    }
+
+    private String getDigest(Path path, String digest, int padChars) throws IOException {
+        MessageDigest md;
+        try {
+            md = MessageDigest.getInstance(digest);
+        } catch (NoSuchAlgorithmException ex) {
+            throw new RuntimeException(ex);
+        }
+
+        try (InputStream is = new DigestInputStream(Files.newInputStream(path), md)) {
+            byte[] buf = new byte[65536];
+            int numread;
+            do {
+                numread = is.read(buf);
+            } while (numread > 0);
+        }
+
+        return String.format("%1$0" + padChars + "x", new BigInteger(1, md.digest()));
+    }
+
+    private static MessageDigest getSha1Digest() {
+        try {
+            return MessageDigest.getInstance("SHA-1");
+        } catch (NoSuchAlgorithmException ex) {
+            throw new RuntimeException(ex); // propagate
+        }
+    }
+
+    @RequiredArgsConstructor
+    private enum Status {
+        DOWNLOADING("Downloading"),
+        DECOMPRESSING("Decompressing");
+
+        private final String name;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFile.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFile.java
new file mode 100644
index 0000000..1d4fdae
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFile.java
@@ -0,0 +1,26 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.file;
+
+import java.io.IOException;
+import java.nio.file.Path;
+
+public interface RuntimeFile {
+    void create(Path path) throws IOException;
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileDirectory.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileDirectory.java
new file mode 100644
index 0000000..756a5c7
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileDirectory.java
@@ -0,0 +1,30 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.file;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+
+public class RuntimeFileDirectory implements RuntimeFile {
+    @Override
+    public void create(Path path) throws IOException {
+        Files.createDirectories(path);
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileFile.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileFile.java
new file mode 100644
index 0000000..2145f49
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileFile.java
@@ -0,0 +1,44 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.file;
+
+import lombok.Getter;
+import net.minecraft.launcher.updater.DownloadInfo;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.Map;
+
+public class RuntimeFileFile implements RuntimeFile {
+    @Getter private boolean executable;
+    @Getter private Map<String, DownloadInfo> downloads;
+
+    @Override
+    public void create(Path path) throws IOException {
+        throw new UnsupportedOperationException("The file must be downloaded");
+    }
+
+    public DownloadInfo getRaw() {
+        return downloads.get("raw");
+    }
+
+    public DownloadInfo getLzma() {
+        return downloads.get("lzma");
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileLink.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileLink.java
new file mode 100644
index 0000000..880ad87
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileLink.java
@@ -0,0 +1,35 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.file;
+
+import lombok.Getter;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+public class RuntimeFileLink implements RuntimeFile {
+    @Getter private String target;
+
+    @Override
+    public void create(Path path) throws IOException {
+        Files.createSymbolicLink(path, Paths.get(target));
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileList.java b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileList.java
new file mode 100644
index 0000000..3d8f688
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/runtime/file/RuntimeFileList.java
@@ -0,0 +1,27 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher.runtime.file;
+
+import lombok.Getter;
+
+import java.util.Map;
+
+public class RuntimeFileList {
+    @Getter private Map<String, RuntimeFile> files;
+}
diff --git a/src/main/java/dev/figboot/olauncher/util/DeletingFileVisitor.java b/src/main/java/dev/figboot/olauncher/util/DeletingFileVisitor.java
new file mode 100644
index 0000000..c35c40d
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/util/DeletingFileVisitor.java
@@ -0,0 +1,59 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.util;
+
+import java.io.IOException;
+import java.nio.file.FileVisitResult;
+import java.nio.file.FileVisitor;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.attribute.BasicFileAttributes;
+
+public class DeletingFileVisitor implements FileVisitor<Path> {
+    private static final DeletingFileVisitor INSTANCE = new DeletingFileVisitor();
+
+    public static DeletingFileVisitor get() {
+        return INSTANCE;
+    }
+
+    private DeletingFileVisitor() { }
+
+    @Override
+    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
+        return FileVisitResult.CONTINUE;
+    }
+
+    @Override
+    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
+        Files.delete(file);
+        return FileVisitResult.CONTINUE;
+    }
+
+    @Override
+    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
+        throw exc;
+    }
+
+    @Override
+    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
+        if (exc != null) throw exc;
+        Files.delete(dir);
+        return FileVisitResult.CONTINUE;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/util/runtime/RuntimeFileDeserializer.java b/src/main/java/dev/figboot/olauncher/util/runtime/RuntimeFileDeserializer.java
new file mode 100644
index 0000000..3499f3d
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/util/runtime/RuntimeFileDeserializer.java
@@ -0,0 +1,46 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.util.runtime;
+
+import com.google.gson.*;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFile;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileDirectory;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileFile;
+import dev.figboot.olauncher.launcher.runtime.file.RuntimeFileLink;
+
+import java.lang.reflect.Type;
+
+public class RuntimeFileDeserializer implements JsonDeserializer<RuntimeFile> {
+    @Override
+    public RuntimeFile deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject obj = json.getAsJsonObject();
+        String type = obj.get("type").getAsString();
+
+        switch (type) {
+            case "file":
+                return context.deserialize(obj, RuntimeFileFile.class);
+            case "directory":
+                return context.deserialize(obj, RuntimeFileDirectory.class);
+            case "link":
+                return context.deserialize(obj, RuntimeFileLink.class);
+        }
+
+        throw new JsonParseException("Unknown file type '" + type + "'");
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
index a9a6ee3..1ed2f8f 100644
--- a/src/main/java/net/minecraft/launcher/Launcher.java
+++ b/src/main/java/net/minecraft/launcher/Launcher.java
@@ -31,11 +31,15 @@ import java.util.List;
 import java.util.Locale;
 import java.util.UUID;
 import javax.swing.JFrame;
+
+import dev.figboot.olauncher.OLauncherConstants;
+import dev.figboot.olauncher.launcher.runtime.JavaRuntimeManager;
 import joptsimple.ArgumentAcceptingOptionSpec;
 import joptsimple.NonOptionArgumentSpec;
 import joptsimple.OptionException;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
+import lombok.Getter;
 import net.minecraft.launcher.game.GameLaunchDispatcher;
 import net.minecraft.launcher.game.MinecraftReleaseType;
 import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
@@ -110,6 +114,7 @@ public class Launcher {
             this.launcher = new com.mojang.launcher.Launcher(this.userInterface, var2, var3, var4, new MinecraftVersionManager(new LocalVersionList(var2), new RemoteVersionList(LauncherConstants.PROPERTIES.getVersionManifest(), var3)), Agent.MINECRAFT, MinecraftReleaseTypeFactory.instance(), 21);
             this.profileManager = new ProfileManager(this);
             ((SwingUserInterface)this.userInterface).initializeFrame();
+            refreshJavaRuntimes(); // olauncher - refresh java runtimes
             this.refreshVersionsAndProfiles();
         }
     }
@@ -171,6 +176,18 @@ public class Launcher {
         return (String[])var6.toArray(new String[var6.size()]);
     }
 
+    // olauncher start - refresh java runtime function
+    public void refreshJavaRuntimes() {
+        getLauncher().getJreManager().getExecutorService().submit(() -> {
+            try {
+                getLauncher().getJreManager().reloadRuntimes();
+            } catch (Throwable t) {
+                Launcher.LOGGER.error("Unexpected exception refreshing java runtime list", t);
+            }
+        });
+    }
+    // olauncher end
+
     public void refreshVersionsAndProfiles() {
         this.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
             public void run() {
diff --git a/src/main/java/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
index 06e506a..12b5f87 100644
--- a/src/main/java/net/minecraft/launcher/SwingUserInterface.java
+++ b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
@@ -103,10 +103,12 @@ public class SwingUserInterface implements MinecraftUserInterface {
                 SwingUserInterface.this.frame.dispose();
                 SwingUserInterface.LOGGER.info("Halting executors");
                 SwingUserInterface.this.minecraftLauncher.getLauncher().getVersionManager().getExecutorService().shutdown();
+                SwingUserInterface.this.minecraftLauncher.getLauncher().getJreManager().getExecutorService().shutdown(); // olauncher - shut down jreManager executor
                 SwingUserInterface.LOGGER.info("Awaiting termination.");
 
                 try {
                     SwingUserInterface.this.minecraftLauncher.getLauncher().getVersionManager().getExecutorService().awaitTermination(10L, TimeUnit.SECONDS);
+                    SwingUserInterface.this.minecraftLauncher.getLauncher().getJreManager().getExecutorService().awaitTermination(10L, TimeUnit.SECONDS); // olauncher - wait for jreManager executor to stop
                 } catch (InterruptedException var3) {
                     SwingUserInterface.LOGGER.info("Termination took too long.");
                 }
diff --git a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
index 2e671dd..8ff8276 100644
--- a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
+++ b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
@@ -122,7 +122,7 @@ public class GameLaunchDispatcher implements GameRunnerListener {
 
                 var5.setStatus(GameInstanceStatus.IDLE);
                 var5.addListener(GameLaunchDispatcher.this);
-                var5.playGame(var1);
+                var5.playGame(var1, var2.getJavaPath() == null); // olauncher - add bundledRuntime argument
             }
         });
     }
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 6f7050d..bc607d1 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -34,6 +34,8 @@ import java.io.InputStreamReader;
 import java.net.InetSocketAddress;
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Enumeration;
@@ -47,6 +49,7 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
+import dev.figboot.olauncher.launcher.runtime.RuntimesManifest;
 import net.minecraft.launcher.CompatibilityRule;
 import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
 import net.minecraft.launcher.Launcher;
@@ -157,7 +160,15 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
                 var3.mkdirs();
             }
 
-            GameProcessBuilder var4 = new GameProcessBuilder((String)MoreObjects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir())); // olauncher - Objects -> MoreObjects
+            // olauncher start - pick the java path
+            String javaPath = this.selectedProfile.getJavaPath();
+            Path bundledDir = getBundledRuntimeDir();
+            if (javaPath == null || bundledDir != null) {
+                javaPath = bundledDir.toAbsolutePath().toString();
+            }
+            // olauncher end
+
+            GameProcessBuilder var4 = new GameProcessBuilder((String)MoreObjects.firstNonNull(javaPath, OperatingSystem.getCurrentPlatform().getJavaDir())); // olauncher - add bundled runtimes // olauncher - Objects -> MoreObjects
             var4.withSysOutFilter(new Predicate<String>() {
                 public boolean apply(String var1) {
                     return var1.contains("#@!@#");
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
index e510a79..c752284 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileJavaPanel.java
@@ -22,6 +22,8 @@ public class ProfileJavaPanel extends JPanel {
     private final JCheckBox javaArgsCustom = new JCheckBox("JVM Arguments:");
     private final JTextField javaArgsField = new JTextField();
 
+    private String javaPath; // olauncher - bundled java runtime UI
+
     public ProfileJavaPanel(ProfileEditorPopup var1) {
         this.editor = var1;
         this.setLayout(new GridBagLayout());
@@ -29,6 +31,8 @@ public class ProfileJavaPanel extends JPanel {
         this.createInterface();
         this.fillDefaultValues();
         this.addEventHandlers();
+
+        javaPath = OperatingSystem.getCurrentPlatform().getJavaDir();
     }
 
     protected void createInterface() {
@@ -55,11 +59,13 @@ public class ProfileJavaPanel extends JPanel {
     protected void fillDefaultValues() {
         String var1 = this.editor.getProfile().getJavaPath();
         if (var1 != null) {
+            javaPath = var1;
             this.javaPathCustom.setSelected(true);
             this.javaPathField.setText(var1);
         } else {
             this.javaPathCustom.setSelected(false);
-            this.javaPathField.setText(OperatingSystem.getCurrentPlatform().getJavaDir());
+            //this.javaPathField.setText(OperatingSystem.getCurrentPlatform().getJavaDir()); // olauncher - bundled java runtime UI
+            this.javaPathField.setText("Use bundled runtime");
         }
 
         this.updateJavaPathState();
@@ -126,9 +132,12 @@ public class ProfileJavaPanel extends JPanel {
     private void updateJavaPathState() {
         if (this.javaPathCustom.isSelected()) {
             this.javaPathField.setEnabled(true);
-            this.editor.getProfile().setJavaDir(this.javaPathField.getText());
+            this.javaPathField.setText(javaPath);
+            this.editor.getProfile().setJavaDir(javaPath);
         } else {
             this.javaPathField.setEnabled(false);
+            javaPath = javaPathField.getText();
+            javaPathField.setText("Use bundled runtime");
             this.editor.getProfile().setJavaDir((String)null);
         }
 
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index 9d786d5..53ee706 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -25,6 +25,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+
+import dev.figboot.olauncher.launcher.JavaVersionInfo;
+import lombok.Getter;
 import net.minecraft.launcher.CompatibilityRule;
 import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
 import net.minecraft.launcher.Launcher;
@@ -54,6 +57,8 @@ public class CompleteMinecraftVersion implements CompleteVersion {
     private AssetIndexInfo assetIndex;
     private Map<ArgumentType, List<Argument>> arguments;
 
+    private JavaVersionInfo javaVersion; // olauncher - add java version
+
     public CompleteMinecraftVersion() {
     }
 
@@ -105,6 +110,8 @@ public class CompleteMinecraftVersion implements CompleteVersion {
             }
         }
 
+        // olauncher - handle java version
+        if (var1.javaVersion != null) this.javaVersion = new JavaVersionInfo(var1.javaVersion);
     }
 
     public String getId() {
@@ -362,6 +369,9 @@ public class CompleteMinecraftVersion implements CompleteVersion {
                 }
             }
 
+            // olauncher - handle java version
+            if (this.javaVersion != null) var5.javaVersion = new JavaVersionInfo(this.javaVersion);
+
             return var5;
         }
     }
@@ -435,4 +445,10 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         }
 
     }
+
+    // olauncher start - add java version info getter
+    public JavaVersionInfo getJavaVersion() {
+        return javaVersion == null ? JavaVersionInfo.DEFAULT : javaVersion;
+    }
+    // olauncher end
 }
-- 
2.43.0.windows.1

From cfba6a46c4a6857d2fec00911b82f24015946312 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Tue, 29 Mar 2022 02:04:21 -0500
Subject: [PATCH 09/33] Move MSLoginDialog2 to the firepit

---
 .../olauncher/auth/ui => fire-pit}/MSLoginDialog2.java     | 7 +++++++
 1 file changed, 7 insertions(+)
 rename {src/main/java/dev/figboot/olauncher/auth/ui => fire-pit}/MSLoginDialog2.java (91%)

diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java b/fire-pit/MSLoginDialog2.java
similarity index 91%
rename from src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java
rename to fire-pit/MSLoginDialog2.java
index 97e9988..cb564f0 100644
--- a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog2.java
+++ b/fire-pit/MSLoginDialog2.java
@@ -38,6 +38,13 @@ import java.net.*;
 import java.nio.charset.StandardCharsets;;
 import java.util.UUID;
 
+/**
+ * WARNING: This class has been sent to the firepit because a java runtime bug prevents it from working.
+ * Specifically, the 'integrity' attribute in script tags in HTML documents are not checked properly, causing
+ * no script tags to be considered. Unfortunately, the whole Microsoft login page is built using script tags, and
+ * workarounds didn't seem to work (especially not cross-runtime/platform). The cumbersome web option is the preferred
+ * option until someone finds a better way.
+ */
 public class MSLoginDialog2 extends JDialog {
     private final UserAuthentication auth;
 
-- 
2.43.0.windows.1

From fc026fe3acb848139367d55dd7ccca6b497f187a Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Tue, 29 Mar 2022 02:13:39 -0500
Subject: [PATCH 10/33] Workaround for JDK-8066806 on OpenJDK

---
 .../java/dev/figboot/olauncher/util/InstantTypeAdapter.java    | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java b/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java
index b73990e..6077386 100644
--- a/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java
+++ b/src/main/java/dev/figboot/olauncher/util/InstantTypeAdapter.java
@@ -33,6 +33,7 @@ public class InstantTypeAdapter extends TypeAdapter<Instant> {
 
     @Override
     public Instant read(JsonReader jsonReader) throws IOException {
-        return Instant.parse(jsonReader.nextString());
+        // Ugly preprocessing required due to JDK-8066806
+        return Instant.parse(jsonReader.nextString().replaceAll("\\+[0-9:]{4,5}", "Z"));
     }
 }
-- 
2.43.0.windows.1

From 92910dd27030d921b7e8059d19a5085916d12bc5 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 7 Apr 2022 04:10:54 -0500
Subject: [PATCH 11/33] Change bug report URL

---
 .../com/mojang/launcher/game/runner/AbstractGameRunner.java     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java b/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
index cd37a5b..d9c609c 100644
--- a/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
+++ b/src/main/java/com/mojang/launcher/game/runner/AbstractGameRunner.java
@@ -291,7 +291,7 @@ public abstract class AbstractGameRunner implements GameRunner, DownloadListener
                         this.setStatus(GameInstanceStatus.LAUNCHING);
                         this.launchGame();
                     } catch (Throwable var5) {
-                        LOGGER.fatal("Fatal error launching game. Report this to http://bugs.mojang.com please!", var5);
+                        LOGGER.fatal("Fatal error launching game. Report this to https://github.com/olauncher/olauncher/issues/new please!", var5); // olauncher - have people report bugs to us
                     }
                 }
             }
-- 
2.43.0.windows.1

From 39ad22f48ea1694fe8bb35b88edba44ec66fa169 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 7 Apr 2022 05:25:03 -0500
Subject: [PATCH 12/33] Minecraft Launcher -> OLauncher

---
 src/main/java/net/minecraft/launcher/Main.java               | 2 +-
 src/main/java/net/minecraft/launcher/SwingUserInterface.java | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/Main.java b/src/main/java/net/minecraft/launcher/Main.java
index 3da8cfb..cc91b34 100644
--- a/src/main/java/net/minecraft/launcher/Main.java
+++ b/src/main/java/net/minecraft/launcher/Main.java
@@ -54,7 +54,7 @@ public class Main {
         var10.mkdirs();
         LOGGER.debug("About to create JFrame.");
         JFrame var12 = new JFrame();
-        var12.setTitle("Minecraft Launcher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        var12.setTitle("OLauncher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
         var12.setPreferredSize(new Dimension(900, 580));
 
         try {
diff --git a/src/main/java/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
index 12b5f87..7cbae64 100644
--- a/src/main/java/net/minecraft/launcher/SwingUserInterface.java
+++ b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
@@ -93,7 +93,7 @@ public class SwingUserInterface implements MinecraftUserInterface {
 
     public void initializeFrame() {
         this.frame.getContentPane().removeAll();
-        this.frame.setTitle("Minecraft Launcher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        this.frame.setTitle("OLauncher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
         this.frame.setPreferredSize(new Dimension(900, 580));
         this.frame.setDefaultCloseOperation(2);
         this.frame.addWindowListener(new WindowAdapter() {
@@ -302,7 +302,7 @@ public class SwingUserInterface implements MinecraftUserInterface {
     }
 
     public String getTitle() {
-        return "Minecraft Launcher " + LauncherConstants.getVersionName();
+        return "OLauncher " + LauncherConstants.getVersionName();
     }
 
     public JFrame getFrame() {
-- 
2.43.0.windows.1

From 9419e600cfc87c49130af5b6e0b4f9ad3dea8b14 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Mon, 11 Apr 2022 02:52:40 -0500
Subject: [PATCH 13/33] Add version information

---
 .../olauncher/launcher/LauncherVersion.java   | 125 ++++++++++++++++++
 .../minecraft/launcher/LauncherConstants.java |   4 +-
 .../java/net/minecraft/launcher/Main.java     |   4 +-
 .../launcher/SwingUserInterface.java          |   6 +-
 4 files changed, 135 insertions(+), 4 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/LauncherVersion.java

diff --git a/src/main/java/dev/figboot/olauncher/launcher/LauncherVersion.java b/src/main/java/dev/figboot/olauncher/launcher/LauncherVersion.java
new file mode 100644
index 0000000..6112721
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/LauncherVersion.java
@@ -0,0 +1,125 @@
+/*
+ * OLauncher
+ * Copyright (C) 2022  bigfoot547 <olauncher@figboot.dev>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see https://github.com/olauncher/olauncher .
+ */
+
+package dev.figboot.olauncher.launcher;
+
+import lombok.Getter;
+import lombok.SneakyThrows;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.InputStream;
+import java.util.Objects;
+import java.util.Properties;
+
+public final class LauncherVersion {
+    private static final LauncherVersion INSTANCE;
+
+    public static String getLauncherName() {
+        return "OLauncher";
+    }
+
+    public static String getVersion() {
+        return getInstance().toString();
+    }
+
+    public static LauncherVersion getInstance() {
+        return INSTANCE;
+    }
+
+    @SneakyThrows
+    private static LauncherVersion loadVersion() {
+        Properties innerProps = new Properties();
+        Properties outerProps = new Properties();
+        try (InputStream innerIS = LauncherVersion.class.getResourceAsStream("/ver/git-inner.properties");
+             InputStream outerIS = LauncherVersion.class.getResourceAsStream("/ver/git-outer.properties")) {
+            Objects.requireNonNull(innerIS, "The /ver/git-inner.properties resource was not found. Version information will be missing.");
+            Objects.requireNonNull(outerIS, "The /ver/git-outer.properties resource was not found. Version information will be missing.");
+            innerProps.load(innerIS);
+            outerProps.load(outerIS);
+        }
+
+        return new LauncherVersion(innerProps, outerProps);
+    }
+
+    @Getter private final String tag, commitId;
+    private final String tagSan;
+    @Getter private final boolean dirty, devVersion;
+
+    private transient String toStringCache;
+
+    private LauncherVersion(Properties inner, Properties outer) {
+        tag = outer.getProperty("git.closest.tag.name");
+        if (tag == null || tag.isEmpty()) tagSan = "???";
+        else if (tag.startsWith("v")) tagSan = tag.substring(1);
+        else tagSan = tag;
+
+        String dist = outer.getProperty("git.closest.tag.commit.count");
+        devVersion = !dist.equals("0");
+
+        dirty = inner.getProperty("git.dirty").equalsIgnoreCase("true")
+                || outer.getProperty("git.dirty").equalsIgnoreCase("true");
+
+        commitId = outer.getProperty("git.commit.id.abbrev");
+    }
+
+    private LauncherVersion() {
+        tag = "???";
+        tagSan = "???";
+        devVersion = true;
+        dirty = false;
+        commitId = "???";
+    }
+
+    @Override
+    public String toString() {
+        if (toStringCache != null) return toStringCache;
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(tagSan);
+
+        if (devVersion) {
+            sb.append("-dev");
+        }
+
+        if (devVersion || dirty) {
+            sb.append("-");
+            sb.append(commitId);
+        }
+
+        if (dirty) {
+            sb.append("-dirty");
+        }
+
+        return toStringCache = sb.toString();
+    }
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    static {
+        LauncherVersion ver = null;
+        try {
+            ver = loadVersion();
+        } catch (Exception t) {
+            LOGGER.warn("Failed to load launcher version.", t);
+            ver = new LauncherVersion();
+        } finally {
+            INSTANCE = ver;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index faf0dc0..2776ab5 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -10,6 +10,8 @@ import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+
+import dev.figboot.olauncher.launcher.LauncherVersion;
 import org.apache.commons.io.IOUtils;
 
 public class LauncherConstants {
@@ -61,7 +63,7 @@ public class LauncherConstants {
     }
 
     public static String getVersionName() {
-        return (String)MoreObjects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown"); // olauncher - Objects -> MoreObjects
+        return (String)MoreObjects.firstNonNull(LauncherVersion.getVersion(), "unknown"); // olauncher - Objects -> MoreObjects
     }
 
     private static LauncherConstants.LauncherProperties getProperties() {
diff --git a/src/main/java/net/minecraft/launcher/Main.java b/src/main/java/net/minecraft/launcher/Main.java
index cc91b34..fff6d93 100644
--- a/src/main/java/net/minecraft/launcher/Main.java
+++ b/src/main/java/net/minecraft/launcher/Main.java
@@ -13,6 +13,8 @@ import java.net.Proxy.Type;
 import java.util.List;
 import javax.imageio.ImageIO;
 import javax.swing.JFrame;
+
+import dev.figboot.olauncher.launcher.LauncherVersion;
 import joptsimple.ArgumentAcceptingOptionSpec;
 import joptsimple.NonOptionArgumentSpec;
 import joptsimple.OptionParser;
@@ -54,7 +56,7 @@ public class Main {
         var10.mkdirs();
         LOGGER.debug("About to create JFrame.");
         JFrame var12 = new JFrame();
-        var12.setTitle("OLauncher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        var12.setTitle(LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle()); // olauncher - update version
         var12.setPreferredSize(new Dimension(900, 580));
 
         try {
diff --git a/src/main/java/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
index 7cbae64..524c1f7 100644
--- a/src/main/java/net/minecraft/launcher/SwingUserInterface.java
+++ b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
@@ -26,6 +26,8 @@ import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.SwingUtilities;
 import javax.swing.UIManager;
+
+import dev.figboot.olauncher.launcher.LauncherVersion;
 import net.minecraft.launcher.game.MinecraftGameRunner;
 import net.minecraft.launcher.profile.Profile;
 import net.minecraft.launcher.profile.ProfileManager;
@@ -93,7 +95,7 @@ public class SwingUserInterface implements MinecraftUserInterface {
 
     public void initializeFrame() {
         this.frame.getContentPane().removeAll();
-        this.frame.setTitle("OLauncher " + LauncherConstants.getVersionName() + LauncherConstants.PROPERTIES.getEnvironment().getTitle());
+        this.frame.setTitle(LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle()); // olauncher - update version
         this.frame.setPreferredSize(new Dimension(900, 580));
         this.frame.setDefaultCloseOperation(2);
         this.frame.addWindowListener(new WindowAdapter() {
@@ -302,7 +304,7 @@ public class SwingUserInterface implements MinecraftUserInterface {
     }
 
     public String getTitle() {
-        return "OLauncher " + LauncherConstants.getVersionName();
+        return LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion(); // olauncher - update version
     }
 
     public JFrame getFrame() {
-- 
2.43.0.windows.1

From 0858e74416151316dc034ba5c4e61a53f019f43e Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Wed, 13 Apr 2022 04:56:22 -0500
Subject: [PATCH 14/33] Add update checking

---
 .../update/LauncherUpdateChecker.java         | 158 +++++++++++++++
 .../launcher/update/LauncherUpdateInfo.java   |  25 +++
 .../launcher/update/ReleaseInfo.java          |  89 +++++++++
 .../update/UpdateAvailableDialog.java         | 182 ++++++++++++++++++
 .../java/net/minecraft/launcher/Launcher.java |  11 ++
 5 files changed, 465 insertions(+)
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateChecker.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateInfo.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/update/UpdateAvailableDialog.java

diff --git a/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateChecker.java b/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateChecker.java
new file mode 100644
index 0000000..e7febd1
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateChecker.java
@@ -0,0 +1,158 @@
+package dev.figboot.olauncher.launcher.update;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import dev.figboot.olauncher.launcher.LauncherVersion;
+import dev.figboot.olauncher.util.InstantTypeAdapter;
+import net.minecraft.launcher.Launcher;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.time.temporal.TemporalUnit;
+import java.util.LinkedList;
+import java.util.List;
+
+public class LauncherUpdateChecker {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final String INFO_FILE_NAME = "olauncher_update.json";
+
+    private static final URL GITHUB_LATEST_RELEASE_URL = constantURL("https://api.github.com/repos/olauncher/olauncher/releases/latest");
+
+    private static final long UPDATE_CHECK_FREQ = 3;
+    private static final TemporalUnit UPDATE_CHECK_FREQ_UNIT = ChronoUnit.HOURS;
+
+    private final Gson gson;
+    private LauncherUpdateInfo info;
+
+    public LauncherUpdateChecker() {
+        gson = new GsonBuilder()
+                .registerTypeAdapter(Instant.class, new InstantTypeAdapter())
+                .create();
+    }
+
+    public void loadInfo() throws IOException {
+        Path workDir = Launcher.getCurrentInstance().getLauncher().getWorkingDirectory().toPath();
+        Path infoFile = workDir.resolve(INFO_FILE_NAME);
+        if (!Files.isRegularFile(infoFile)) {
+            info = LauncherUpdateInfo.defaults();
+            saveInfo();
+            return;
+        }
+
+        try (Reader r = Files.newBufferedReader(infoFile)) {
+            info = gson.fromJson(r, LauncherUpdateInfo.class);
+        }
+    }
+
+    public void saveInfo() throws IOException {
+        Path workDir = Launcher.getCurrentInstance().getLauncher().getWorkingDirectory().toPath();
+        Path infoFile = workDir.resolve(INFO_FILE_NAME);
+        try (Writer w = Files.newBufferedWriter(infoFile)) {
+            w.write(gson.toJson(info, LauncherUpdateInfo.class));
+        }
+    }
+
+    public void ignoreUpdate(long upd) {
+        info.getIgnoreVersions().add(upd);
+    }
+
+    public void setDisabled(boolean b) {
+        info.setDisabled(b);
+    }
+
+    public void updateCheck() throws IOException {
+        if (info == null) throw new IllegalStateException("Call loadInfo first!");
+
+        if (info.isDisabled()) {
+            LOGGER.info("Update checking disabled, not checking.");
+            return;
+        }
+
+        if (!System.getProperty("dev.figboot.olauncher.LauncherUpdateChecker.updateTest", "false").equalsIgnoreCase("true")
+            && (LauncherVersion.getInstance().isDevVersion()
+            || LauncherVersion.getInstance().isDirty())) {
+            LOGGER.info("Not checking for updates because this is a development version or the working tree is dirty.");
+            return;
+        }
+
+        Instant checkTime = info.getLastCheck().plus(UPDATE_CHECK_FREQ, UPDATE_CHECK_FREQ_UNIT);
+        Instant now = Instant.now();
+        if (checkTime.isAfter(now) && info.getLatestRelease() != null) {
+            LOGGER.info("It is not time to query releases yet. Wait another {} minutes.",
+                    new Object[]{ChronoUnit.MINUTES.between(now, checkTime)});
+
+            onReleaseResponse();
+            return;
+        }
+
+        Thread checker = new Thread(() -> {
+            try {
+                queryReleases();
+            } catch (IOException ex) {
+                LOGGER.error("Error querying latest release", ex);
+            }
+        });
+
+        LOGGER.info("Querying latest release...");
+        checker.setDaemon(true);
+        checker.start();
+    }
+
+    private void queryReleases() throws IOException {
+        HttpURLConnection conn = (HttpURLConnection)GITHUB_LATEST_RELEASE_URL.openConnection();
+        conn.setRequestProperty("Accept", "application/vnd.github.v3+json");
+        conn.setRequestProperty("User-Agent", LauncherVersion.getLauncherName() + "/" + LauncherVersion.getVersion());
+        conn.setConnectTimeout(5000);
+        conn.setReadTimeout(30000);
+
+        ReleaseInfo release;
+
+        if (conn.getResponseCode() / 100 != 2) {
+            LOGGER.error("Error response code returned by server: " + conn.getResponseCode() + " " + conn.getResponseMessage());
+            return;
+        }
+
+        try (Reader r = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
+            release = gson.fromJson(r, ReleaseInfo.class);
+
+            info.setLastCheck(Instant.now());
+            info.setLatestRelease(release);
+            saveInfo();
+        }
+        onReleaseResponse();
+    }
+
+    private void onReleaseResponse() {
+        ReleaseInfo release = info.getLatestRelease();
+        LOGGER.info("Latest release is {} (ID {}).", new Object[]{release.getName(), release.getID()});
+
+        if (info.getIgnoreVersions().contains(release.getID())) {
+            return;
+        }
+
+        String curTag = LauncherVersion.getInstance().getTag();
+        if (release.getTagName().compareTo(curTag) > 0) {
+            new UpdateAvailableDialog(this, release);
+        }
+    }
+
+    private static URL constantURL(String url) {
+        try {
+            return new URL(url);
+        } catch (MalformedURLException ex) {
+            throw new RuntimeException(ex);
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateInfo.java b/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateInfo.java
new file mode 100644
index 0000000..836316b
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/update/LauncherUpdateInfo.java
@@ -0,0 +1,25 @@
+package dev.figboot.olauncher.launcher.update;
+
+import lombok.Getter;
+import lombok.Setter;
+
+import java.time.Instant;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+public class LauncherUpdateInfo {
+    @Getter @Setter private Instant lastCheck;
+    @Getter private List<Long> ignoreVersions;
+    @Getter @Setter private boolean disabled;
+    @Getter @Setter private ReleaseInfo latestRelease;
+
+    public static LauncherUpdateInfo defaults() {
+        LauncherUpdateInfo info = new LauncherUpdateInfo();
+        info.lastCheck = Instant.MIN;
+        info.ignoreVersions = new LinkedList<>();
+        info.disabled = false;
+        info.latestRelease = null;
+        return info;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java b/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
new file mode 100644
index 0000000..c0a6ba0
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
@@ -0,0 +1,89 @@
+package dev.figboot.olauncher.launcher.update;
+
+import java.net.URL;
+import java.time.Instant;
+import java.util.Collections;
+import java.util.List;
+
+public class ReleaseInfo {
+    private Instant created_at;
+    private URL html_url;
+    private long id;
+    private String name;
+    private String tag_name;
+    private String body;
+
+    private List<Asset> assets;
+
+    public Instant getCreatedAt() {
+        return created_at;
+    }
+
+    public URL getPage() {
+        return html_url;
+    }
+
+    public long getID() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getTagName() {
+        return tag_name;
+    }
+
+    public String getBody() {
+        return body;
+    }
+
+    public List<Asset> getAssets() {
+        return Collections.unmodifiableList(assets);
+    }
+
+    public Asset getRedistAsset() {
+        for (Asset asset : assets) {
+            if (asset.isRedistJar()) return asset;
+        }
+        return null;
+    }
+
+    public static class Asset {
+        private String name;
+        private URL browser_download_url;
+        private String content_type;
+        private long size;
+        private int download_count;
+        private String state; // Should be "uploaded"
+
+        public String getName() {
+            return name;
+        }
+
+        public URL getDownloadURL() {
+            return browser_download_url;
+        }
+
+        public String getContentType() {
+            return content_type;
+        }
+
+        public long getSize() {
+            return size;
+        }
+
+        public int getDownloadCount() {
+            return download_count;
+        }
+
+        public String getState() {
+            return state;
+        }
+
+        public boolean isRedistJar() {
+            return getState().equals("uploaded") && getContentType().equals("application/x-java-archive") && getName().endsWith("-redist.jar");
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/launcher/update/UpdateAvailableDialog.java b/src/main/java/dev/figboot/olauncher/launcher/update/UpdateAvailableDialog.java
new file mode 100644
index 0000000..54d2325
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/update/UpdateAvailableDialog.java
@@ -0,0 +1,182 @@
+package dev.figboot.olauncher.launcher.update;
+
+import com.mojang.launcher.OperatingSystem;
+import dev.figboot.olauncher.launcher.LauncherVersion;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.time.Instant;
+
+public class UpdateAvailableDialog extends JDialog {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final LauncherUpdateChecker checker;
+    private final ReleaseInfo release;
+    private JScrollPane infoScrollPane;
+
+    private JComboBox<String> cbxOptionChoose;
+    private JButton btnConfirm;
+
+    private final Font headerFont = new Font(Font.SANS_SERIF, Font.BOLD, 24);
+    private final Font infoFont = new Font(Font.SANS_SERIF, Font.BOLD, 12);
+    private final Font valueFont = new Font(Font.SANS_SERIF, Font.PLAIN, 12);
+
+    public UpdateAvailableDialog(LauncherUpdateChecker checker, ReleaseInfo release) {
+        this.checker = checker;
+        this.release = release;
+
+        SwingUtilities.invokeLater(this::initUI);
+    }
+
+    private int gridy = 1;
+    private void addUpdateInfo(JPanel panel, String key, String val) {
+        JLabel lbl = new JLabel(key);
+        lbl.setFont(infoFont);
+        panel.add(lbl, new GridBagConstraints(0, gridy, 1, 1, 0.3, 0, GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL, new Insets(0,0,0,0), 0, 0));
+
+        lbl = new JLabel(val);
+        lbl.setFont(valueFont);
+        panel.add(lbl, new GridBagConstraints(1, gridy++, 1, 1, 0.7, 0, GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL, new Insets(0,0,0,0), 0, 0));
+    }
+
+    private void initUI() {
+        setModal(true);
+        setResizable(false);
+        setModalityType(ModalityType.APPLICATION_MODAL);
+        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
+        setTitle("Launcher Update Checker");
+
+        setLayout(new BorderLayout());
+
+        JLabel headerLabel = new JLabel("Launcher update available");
+        headerLabel.setBorder(new EmptyBorder(5, 5, 5, 5));
+        headerLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
+        headerLabel.setFont(headerFont);
+        add(headerLabel, BorderLayout.PAGE_START);
+
+        JPanel infoPanel = new JPanel(new GridBagLayout());
+        infoPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
+        infoPanel.setAlignmentY(Component.TOP_ALIGNMENT);
+
+        infoScrollPane = new JScrollPane();
+
+        JTextPane area = new JTextPane();
+        area.setEditable(false);
+        area.setBackground(getBackground());
+        area.setContentType("text/plain");
+        area.setText(release.getBody());
+        infoScrollPane.setViewportView(area);
+
+        addUpdateInfo(infoPanel, "Update Version", LauncherVersion.getInstance().getTag() + " -> " + release.getTagName());
+        addUpdateInfo(infoPanel, "Released", getTimeSince(release.getCreatedAt()));
+
+        ReleaseInfo.Asset asset = release.getRedistAsset();
+        if (asset != null) {
+            addUpdateInfo(infoPanel, "File name", asset.getName());
+            addUpdateInfo(infoPanel, "Size", String.format("%.01f MB", asset.getSize() / 1000000.));
+            addUpdateInfo(infoPanel, "Downloads", Long.toString(asset.getDownloadCount()));
+        } else {
+            addUpdateInfo(infoPanel, "File name", "N/A");
+        }
+
+        infoPanel.add(infoScrollPane, new GridBagConstraints(0, gridy, 2, 1, 0, 0, GridBagConstraints.PAGE_START, GridBagConstraints.HORIZONTAL, new Insets(10, 0, 5, 0), 0, 0));
+
+        add(infoPanel, BorderLayout.CENTER);
+
+        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
+        buttonPanel.setBorder(new EmptyBorder(0, 0, 5, 0));
+        cbxOptionChoose = new JComboBox<>(new String[]{"Download this version", "Go to release page", "Remind me later", "Ignore this update", "Stop checking for updates"});
+        cbxOptionChoose.setSelectedIndex(asset == null ? 1 : 0);
+        cbxOptionChoose.addActionListener(this::comboBoxOptionChoose);
+        buttonPanel.add(cbxOptionChoose);
+
+        btnConfirm = new JButton("Confirm");
+        btnConfirm.addActionListener(this::confirmClicked);
+        buttonPanel.add(btnConfirm);
+
+        add(buttonPanel, BorderLayout.PAGE_END);
+
+        pack();
+        setLocationByPlatform(true);
+        setLocationRelativeTo(null);
+        setVisible(true);
+    }
+
+    private void comboBoxOptionChoose(ActionEvent evt) {
+        btnConfirm.setEnabled(cbxOptionChoose.getSelectedIndex() != 0 || release.getRedistAsset() != null);
+    }
+
+    private void confirmClicked(ActionEvent evt) {
+        ReleaseInfo.Asset releaseAsset = release.getRedistAsset();
+        switch (cbxOptionChoose.getSelectedIndex()) {
+            case 0:
+                if (releaseAsset == null) return;
+                try {
+                    OperatingSystem.openLink(releaseAsset.getDownloadURL().toURI());
+                } catch (URISyntaxException ex) {
+                    LOGGER.error("Error opening link", ex);
+                }
+                break;
+            case 1:
+                try {
+                    OperatingSystem.openLink(release.getPage().toURI());
+                } catch (URISyntaxException ex) {
+                    LOGGER.error("Error opening link", ex);
+                }
+                break;
+            case 2:
+                break;
+            case 3:
+                checker.ignoreUpdate(release.getID());
+                try {
+                    checker.saveInfo();
+                } catch (IOException ex) {
+                    LOGGER.error("Unable to save update preferences", ex);
+                }
+                break;
+            case 4:
+                checker.setDisabled(true);
+                try {
+                    checker.saveInfo();
+                } catch (IOException ex) {
+                    LOGGER.error("Unable to save update preferences", ex);
+                }
+                break;
+            default:
+                return;
+        }
+
+        dispose();
+    }
+
+    private static String getTimeSince(Instant time) {
+        long seconds = Instant.now().getEpochSecond() - time.getEpochSecond();
+        long weeks = seconds / (7*24*60*60);
+        long leftOver = seconds % (7*24*60*60);
+
+        long days = seconds / (24*60*60);
+        leftOver %= (24*60*60);
+
+        long hours = leftOver / 3600;
+        leftOver %= 3600;
+
+        long minutes = leftOver / 60;
+
+        if (weeks == 0) {
+            if (days == 0) {
+                if (hours == 0) {
+                    return String.format("%d minute%s ago", minutes, minutes == 1 ? "" : "s");
+                }
+                return String.format("%d hour%s, %d minute%s ago", hours, hours == 1 ? "" : "s", minutes, minutes == 1 ? "" : "s");
+            }
+            return String.format("%d day%s, %d hour%s ago", days, days == 1 ? "" : "s", hours, hours == 1 ? "" : "s");
+        }
+        return String.format("%d week%s, %d day%s ago", weeks, weeks == 1 ? "" : "s", days, days == 1 ? "" : "s");
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
index 1ed2f8f..a9aeefa 100644
--- a/src/main/java/net/minecraft/launcher/Launcher.java
+++ b/src/main/java/net/minecraft/launcher/Launcher.java
@@ -34,6 +34,7 @@ import javax.swing.JFrame;
 
 import dev.figboot.olauncher.OLauncherConstants;
 import dev.figboot.olauncher.launcher.runtime.JavaRuntimeManager;
+import dev.figboot.olauncher.launcher.update.LauncherUpdateChecker;
 import joptsimple.ArgumentAcceptingOptionSpec;
 import joptsimple.NonOptionArgumentSpec;
 import joptsimple.OptionException;
@@ -116,6 +117,16 @@ public class Launcher {
             ((SwingUserInterface)this.userInterface).initializeFrame();
             refreshJavaRuntimes(); // olauncher - refresh java runtimes
             this.refreshVersionsAndProfiles();
+
+            // olauncher start - check for updates
+            LauncherUpdateChecker checker = new LauncherUpdateChecker();
+            try {
+                checker.loadInfo();
+                checker.updateCheck();
+            } catch (IOException ex) {
+                LOGGER.error("Error checking for launcher updates. Update checking will not continue.", ex);
+            }
+            // olauncher end
         }
     }
 
-- 
2.43.0.windows.1

From d93b0d5337d7d304e57359d42c09e5ba8e34e95a Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Tue, 26 Apr 2022 00:50:05 -0500
Subject: [PATCH 15/33] Add OptiFine cape functions

---
 .../auth/MicrosoftUserAuthentication.java     | 65 +++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index 923af20..f8e17b4 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -37,7 +37,18 @@ import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
+import java.security.SecureRandom;
 import java.time.Instant;
 import java.time.temporal.ChronoUnit;
 import java.util.Base64;
@@ -63,6 +74,8 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
     private final MinecraftSessionService sessionService;
 
+    private BufferedImage ofCape;
+
     public MicrosoftUserAuthentication(MicrosoftAuthenticationService service, Agent agent) {
         super(service);
         this.agent = agent;
@@ -209,6 +222,58 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         getModifiableUserProperties().clear();
         getModifiableUserProperties().putAll(profile.getProperties());
         setUserType(UserType.MICROSOFT);
+
+        /*try {
+            refreshOptiFineCape();
+        } catch (IOException ex) {
+            throw new AuthenticationException("IO error while loading OptiFine cape", ex);
+        }*/
+    }
+
+    public void refreshOptiFineCape() throws IOException {
+        URL url = new URL(String.format("http://s.optifine.net/capes/%s.png", URLEncoder.encode(profileInfo.getName(), "UTF-8")));
+
+        HttpURLConnection conn = (HttpURLConnection)url.openConnection(this.getAuthenticationService().getProxy());
+        int code = conn.getResponseCode();
+        if (code != 200) {
+            ofCape = null;
+
+            if (code != 404) {
+                LOGGER.error("Server replied with error when querying OptiFine cape: {} {}", code, conn.getResponseMessage());
+            }
+
+            return;
+        }
+
+        try (InputStream is = conn.getInputStream()) {
+            ofCape = ImageIO.read(is);
+        }
+    }
+
+    public boolean hasOptiFineCape() {
+        return ofCape != null;
+    }
+
+    public BufferedImage getOptiFineCapeTexture() {
+        return ofCape; // mutable D:
+    }
+
+    public URL createOptiFineCapeEditor() throws AuthenticationException, MalformedURLException {
+        if (getSelectedProfile() == null) throw new AuthenticationException("You must be logged in to open the cape editor");
+        if (!mojTokenValid(Instant.now()))
+            throw new AuthenticationException("Your Mojang token is invalid. Please restart the launcher.");
+
+        String serverID = new BigInteger(128, new SecureRandom()).toString(16);
+
+        sessionService.joinServer(getSelectedProfile(), mojToken, serverID);
+        try {
+            return new URL(String.format("https://optifine.net/capeChange?u=%s&n=%s&s=%s",
+                    URLEncoder.encode(profileInfo.getId().toString().replace("-", ""), "UTF-8"),
+                    URLEncoder.encode(profileInfo.getName(), "UTF-8"),
+                    URLEncoder.encode(serverID, "UTF-8")));
+        } catch (UnsupportedEncodingException ex) {
+            throw new RuntimeException("Error URLEncoding the cape change URL", ex);
+        }
     }
 
     public MCProfileInfo getProfileInfo() {
-- 
2.43.0.windows.1

From 254f7ec2d08ef229097bd1c701cb61252f5c202a Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Tue, 14 Jun 2022 04:54:47 -0500
Subject: [PATCH 16/33] Support the 1.19 syntax for natives

---
 .../java/net/minecraft/launcher/updater/Library.java     | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/updater/Library.java b/src/main/java/net/minecraft/launcher/updater/Library.java
index 32814c0..f8435d1 100644
--- a/src/main/java/net/minecraft/launcher/updater/Library.java
+++ b/src/main/java/net/minecraft/launcher/updater/Library.java
@@ -141,7 +141,7 @@ public class Library {
         if (this.name == null) {
             throw new IllegalStateException("Cannot get artifact dir of empty/blank artifact");
         } else {
-            String[] var1 = this.name.split(":", 3);
+            String[] var1 = this.name.split(":", 4);
             return String.format("%s/%s/%s", var1[0].replaceAll("\\.", "/"), var1[1], var1[2]);
         }
     }
@@ -162,8 +162,11 @@ public class Library {
         if (this.name == null) {
             throw new IllegalStateException("Cannot get artifact filename of empty/blank artifact");
         } else {
-            String[] var2 = this.name.split(":", 3);
-            String var3 = String.format("%s-%s%s.jar", var2[1], var2[2], StringUtils.isEmpty(var1) ? "" : "-" + var1);
+            // olauncher - handle natives on newer versions
+            String[] var2 = this.name.split(":", 4);
+            String var3 = var2.length < 4 ?
+                    String.format("%s-%s%s.jar", var2[1], var2[2], StringUtils.isEmpty(var1) ? "" : "-" + var1) :
+                    String.format("%s-%s%s-%s.jar", var2[1], var2[2], StringUtils.isEmpty(var1) ? "" : "-" + var1, var2[3]);
             return SUBSTITUTOR.replace(var3);
         }
     }
-- 
2.43.0.windows.1

From b3e306bcb0f6353bb34ed4b62b6fdeb095cafad5 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Tue, 21 Jun 2022 16:46:46 -0500
Subject: [PATCH 17/33] Escape quotes in argument lists on Windows

---
 .../process/direct/DirectGameProcessFactory.java     | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
index 1e86301..fd0522b 100644
--- a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
+++ b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcessFactory.java
@@ -1,5 +1,6 @@
 package com.mojang.launcher.game.process.direct;
 
+import com.mojang.launcher.OperatingSystem;
 import com.mojang.launcher.game.process.GameProcess;
 import com.mojang.launcher.game.process.GameProcessBuilder;
 import com.mojang.launcher.game.process.GameProcessFactory;
@@ -11,7 +12,16 @@ public class DirectGameProcessFactory implements GameProcessFactory {
     }
 
     public GameProcess startGame(GameProcessBuilder var1) throws IOException {
-        List var2 = var1.getFullCommands();
+        List<String> var2 = var1.getFullCommands(); // olauncher - add type parameter
+
+        // olauncher start - translate argument list for windows (quotes need escaping for some reason)
+        if (OperatingSystem.getCurrentPlatform() == OperatingSystem.WINDOWS) {
+            for (int i = 0; i < var2.size(); ++i) {
+                var2.set(i, var2.get(i).replace("\"", "\\\""));
+            }
+        }
+        // olauncher end
+
         return new DirectGameProcess(var2, (new ProcessBuilder(var2)).directory(var1.getDirectory()).redirectErrorStream(true).start(), var1.getSysOutFilter(), var1.getLogProcessor());
     }
 }
-- 
2.43.0.windows.1

From 5102dd5a79aabe8bd6b7c1432d6deff92dccbe8f Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Wed, 9 Nov 2022 02:59:04 -0600
Subject: [PATCH 18/33] Fix newer versions of forge failing to launch

---
 .../net/minecraft/launcher/game/MinecraftGameRunner.java   | 3 +++
 src/main/java/net/minecraft/launcher/updater/Argument.java | 2 +-
 .../launcher/updater/CompleteMinecraftVersion.java         | 7 +++++++
 3 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index bc607d1..60b3d41 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -337,6 +337,9 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
             // TODO: clientid as well
         }
 
+        // olauncher - add library directory replacement
+        var6.put("library_directory", new File(minecraftLauncher.getLauncher().getWorkingDirectory(), "libraries").getAbsolutePath());
+
         return new StrSubstitutor(var6);
     }
 
diff --git a/src/main/java/net/minecraft/launcher/updater/Argument.java b/src/main/java/net/minecraft/launcher/updater/Argument.java
index 528caf8..d5560e6 100644
--- a/src/main/java/net/minecraft/launcher/updater/Argument.java
+++ b/src/main/java/net/minecraft/launcher/updater/Argument.java
@@ -33,7 +33,7 @@ public class Argument {
     }
 
     public boolean appliesToCurrentEnvironment(CompatibilityRule.FeatureMatcher var1) {
-        if (this.compatibilityRules == null) {
+        if (this.compatibilityRules == null || compatibilityRules.isEmpty()) { // olauncher - empty compatibilityRules means allow it
             return true;
         } else {
             CompatibilityRule.Action var2 = CompatibilityRule.Action.DISALLOW;
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index 53ee706..d0e6fc1 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -74,6 +74,7 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         this.incompatibilityReason = var1.incompatibilityReason;
         this.assets = var1.assets;
         this.jar = var1.jar;
+        this.assetIndex = var1.assetIndex; // olauncher - copy asset index
         this.downloads = var1.downloads;
         // olauncher - iterator surgery (raw types are no longer cool)
         //Iterator var2;
@@ -320,6 +321,12 @@ public class CompleteMinecraftVersion implements CompleteVersion {
                 var5.jar = this.jar;
             }
 
+            // olauncher start - copy asset index
+            if (this.assetIndex != null) {
+                var5.assetIndex = assetIndex;
+            }
+            // olauncher end
+
             if (this.libraries != null) {
                 ArrayList var6 = Lists.newArrayList();
                 Iterator var7 = this.libraries.iterator();
-- 
2.43.0.windows.1

From 732c600927dec7f3dc7eb0f76cd8f572f7d49063 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Sat, 10 Dec 2022 19:58:24 -0600
Subject: [PATCH 19/33] Add custom release type

---
 .../net/minecraft/launcher/game/MinecraftReleaseType.java     | 3 ++-
 src/main/java/net/minecraft/launcher/profile/Profile.java     | 4 +++-
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
index 01b10da..df55cae 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
@@ -7,6 +7,7 @@ import java.util.Map;
 public enum MinecraftReleaseType implements ReleaseType {
     SNAPSHOT("snapshot", "Enable experimental development versions (\"snapshots\")"),
     RELEASE("release", (String)null),
+    CUSTOM("custom", "Enable versions with custom release types"), /* olauncher - add default release type */
     OLD_BETA("old_beta", "Allow use of old \"Beta\" Minecraft versions (From 2010-2011)"),
     OLD_ALPHA("old_alpha", "Allow use of old \"Alpha\" Minecraft versions (From 2010)");
 
@@ -42,7 +43,7 @@ public enum MinecraftReleaseType implements ReleaseType {
     }
 
     public static MinecraftReleaseType getByName(String var0) {
-        return (MinecraftReleaseType)LOOKUP.get(var0);
+        return (MinecraftReleaseType)LOOKUP.getOrDefault(var0, CUSTOM); /* olauncher - add default release type */
     }
 
     static {
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index fdd24fc..a88b0b3 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -148,7 +148,9 @@ public class Profile implements Comparable<Profile> {
 
     static {
         DEFAULT_LAUNCHER_VISIBILITY = LauncherVisibilityRule.CLOSE_LAUNCHER;
-        DEFAULT_RELEASE_TYPES = Sets.newHashSet(new MinecraftReleaseType[]{MinecraftReleaseType.RELEASE});
+
+        // olauncher - make custom release type default
+        DEFAULT_RELEASE_TYPES = Sets.newHashSet(new MinecraftReleaseType[]{MinecraftReleaseType.RELEASE, MinecraftReleaseType.CUSTOM});
     }
 
     public static class Resolution {
-- 
2.43.0.windows.1

From 1c37676cfceb34bd463a8e7d098dc80200e1eb89 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Mon, 23 Jan 2023 10:11:14 -0600
Subject: [PATCH 20/33] Fix resources not downloading

---
 src/main/java/net/minecraft/launcher/LauncherConstants.java   | 2 +-
 .../minecraft/launcher/updater/MinecraftVersionManager.java   | 4 +++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index 2776ab5..41fc5fc 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -19,7 +19,7 @@ public class LauncherConstants {
     public static final int PROFILES_FORMAT = 1;
     public static final URI URL_REGISTER = constantURI("https://account.mojang.com/register");
     public static final String URL_JAR_FALLBACK = "https://s3.amazonaws.com/Minecraft.Download/";
-    public static final String URL_RESOURCE_BASE = "http://resources.download.minecraft.net/";
+    public static final String URL_RESOURCE_BASE = "https://resources.download.minecraft.net/";
     public static final String URL_LIBRARY_BASE = "https://libraries.minecraft.net/";
     public static final String URL_BLOG = "https://olauncher.github.io/news";
     public static final String URL_SUPPORT = "http://help.mojang.com/?ref=launcher";
diff --git a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
index de78e0e..30d2fa0 100644
--- a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
+++ b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
@@ -35,6 +35,8 @@ import java.util.Set;
 import java.util.Map.Entry;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+
+import net.minecraft.launcher.LauncherConstants;
 import net.minecraft.launcher.game.MinecraftReleaseType;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
@@ -330,7 +332,7 @@ public class MinecraftVersionManager implements VersionManager {
                     var20 = new File(var7, var19);
                 } while(var20.isFile() && FileUtils.sizeOf(var20) == var18.getSize());
 
-                AssetDownloadable var21 = new AssetDownloadable(var1, (String)var17.getValue(), var18, "http://resources.download.minecraft.net/", var7);
+                AssetDownloadable var21 = new AssetDownloadable(var1, (String)var17.getValue(), var18, LauncherConstants.URL_RESOURCE_BASE, var7);
                 var21.setExpectedSize(var18.getSize());
                 var4.add(var21);
             }
-- 
2.43.0.windows.1

From 45e79a2dfe7341d533892d1ccb52d229e0c769ad Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Sat, 10 Jun 2023 16:05:54 -0500
Subject: [PATCH 21/33] Allow to customize window title

---
 src/main/java/net/minecraft/launcher/Main.java               | 2 +-
 src/main/java/net/minecraft/launcher/SwingUserInterface.java | 4 +++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/Main.java b/src/main/java/net/minecraft/launcher/Main.java
index fff6d93..6668dd0 100644
--- a/src/main/java/net/minecraft/launcher/Main.java
+++ b/src/main/java/net/minecraft/launcher/Main.java
@@ -56,7 +56,7 @@ public class Main {
         var10.mkdirs();
         LOGGER.debug("About to create JFrame.");
         JFrame var12 = new JFrame();
-        var12.setTitle(LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle()); // olauncher - update version
+        var12.setTitle(SwingUserInterface.WINDOW_TITLE == null ? LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle() : SwingUserInterface.WINDOW_TITLE); // olauncher - update version
         var12.setPreferredSize(new Dimension(900, 580));
 
         try {
diff --git a/src/main/java/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
index 524c1f7..528aa6c 100644
--- a/src/main/java/net/minecraft/launcher/SwingUserInterface.java
+++ b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
@@ -45,6 +45,8 @@ public class SwingUserInterface implements MinecraftUserInterface {
     private LauncherPanel launcherPanel;
     private final JFrame frame;
 
+    public static final String WINDOW_TITLE = System.getProperty("net.minecraft.launcher.WindowTitle"); // olauncher - window title
+
     public SwingUserInterface(Launcher var1, JFrame var2) {
         this.minecraftLauncher = var1;
         this.frame = var2;
@@ -95,7 +97,7 @@ public class SwingUserInterface implements MinecraftUserInterface {
 
     public void initializeFrame() {
         this.frame.getContentPane().removeAll();
-        this.frame.setTitle(LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle()); // olauncher - update version
+        this.frame.setTitle(WINDOW_TITLE == null ? LauncherVersion.getLauncherName() + " " + LauncherVersion.getVersion() + LauncherConstants.PROPERTIES.getEnvironment().getTitle() : WINDOW_TITLE); // olauncher - update version
         this.frame.setPreferredSize(new Dimension(900, 580));
         this.frame.setDefaultCloseOperation(2);
         this.frame.addWindowListener(new WindowAdapter() {
-- 
2.43.0.windows.1

From fec370843e81a998b72c6deacd46b7d32ed7eff2 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Mon, 3 Jul 2023 15:51:42 -0500
Subject: [PATCH 22/33] Allow launching old versions

Some versions use resources/ for sounds n stuff
---
 .../updater/download/assets/AssetIndex.java   |  7 +++
 .../launcher/game/MinecraftGameRunner.java    | 55 +++++++++++++++----
 2 files changed, 50 insertions(+), 12 deletions(-)

diff --git a/src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java b/src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java
index 188db4f..81c48d2 100644
--- a/src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java
+++ b/src/main/java/com/mojang/launcher/updater/download/assets/AssetIndex.java
@@ -11,6 +11,7 @@ public class AssetIndex {
     public static final String DEFAULT_ASSET_NAME = "legacy";
     private Map<String, AssetIndex.AssetObject> objects = new LinkedHashMap();
     private boolean virtual;
+    private boolean map_to_resources; // olauncher - old
 
     public AssetIndex() {
     }
@@ -35,6 +36,12 @@ public class AssetIndex {
         return this.virtual;
     }
 
+    // olauncher start - old
+    public boolean mapToResources() {
+        return map_to_resources;
+    }
+    // olauncher end
+
     public class AssetObject {
         private String hash;
         private long size;
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 60b3d41..0fda0ab 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -23,19 +23,16 @@ import com.mojang.launcher.updater.download.Downloadable;
 import com.mojang.launcher.updater.download.assets.AssetIndex;
 import com.mojang.launcher.versions.ExtractRules;
 import com.mojang.util.UUIDTypeAdapter;
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
+
+import java.io.*;
+import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Enumeration;
@@ -249,15 +246,49 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
             return var6;
         } else {
             AssetIndex var7 = (AssetIndex)this.gson.fromJson(FileUtils.readFileToString(var5, Charsets.UTF_8), AssetIndex.class);
-            if (var7.isVirtual()) {
+            // olauncher start - handle mapping to resources/
+            if (var7.mapToResources()) {
+                var6 = new File(selectedProfile.getGameDir(), "resources");
+            }
+
+            if (var7.isVirtual() || var7.mapToResources()) {
+                // olauncher end
                 LOGGER.info("Reconstructing virtual assets folder at " + var6);
-                Iterator var8 = var7.getFileMap().entrySet().iterator();
+                Iterator<Entry<String, AssetIndex.AssetObject>> var8 = var7.getFileMap().entrySet().iterator();
+
+                byte[] buf = new byte[4096];
+                MessageDigest digest;
+
+                try {
+                    digest = MessageDigest.getInstance("SHA1");
+                } catch (NoSuchAlgorithmException ex) {
+                    throw new RuntimeException(ex);
+                }
 
                 while(var8.hasNext()) {
-                    Entry var9 = (Entry)var8.next();
+                    Entry<String, AssetIndex.AssetObject> var9 = var8.next();
                     File var10 = new File(var6, (String)var9.getKey());
                     File var11 = new File(new File(var3, ((AssetIndex.AssetObject)var9.getValue()).getHash().substring(0, 2)), ((AssetIndex.AssetObject)var9.getValue()).getHash());
-                    if (!var10.isFile()) {
+
+                    // olauncher
+                    boolean copy = true;
+                    if (var10.isFile()) {
+                        copy = false;
+                        digest.reset();
+                        try (InputStream is = new FileInputStream(var10)) {
+                            int nread;
+                            while ((nread = is.read(buf)) > 0) {
+                                digest.update(buf, 0, nread);
+                            }
+                        }
+
+                        String hash = String.format("%040x", new BigInteger(1, digest.digest()));
+
+                        if (!hash.equalsIgnoreCase(var9.getValue().getHash())) copy = true;
+                    }
+
+                    if (copy) {
+                        LOGGER.info("Copying asset for virtual or resource-mapped: " + var10);
                         FileUtils.copyFile(var11, var10, false);
                     }
                 }
-- 
2.43.0.windows.1

From 303a6239ff8c359811543432c190dd36c4cc0f44 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Sat, 23 Sep 2023 18:31:23 -0500
Subject: [PATCH 23/33] Allow changing the news URL with a property

---
 src/main/java/net/minecraft/launcher/LauncherConstants.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index 41fc5fc..b2267d5 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -21,7 +21,7 @@ public class LauncherConstants {
     public static final String URL_JAR_FALLBACK = "https://s3.amazonaws.com/Minecraft.Download/";
     public static final String URL_RESOURCE_BASE = "https://resources.download.minecraft.net/";
     public static final String URL_LIBRARY_BASE = "https://libraries.minecraft.net/";
-    public static final String URL_BLOG = "https://olauncher.github.io/news";
+    public static final String URL_BLOG = System.getProperty("dev.figboot.olauncher.URLNews", "https://olauncher.github.io/news");
     public static final String URL_SUPPORT = "http://help.mojang.com/?ref=launcher";
     public static final String URL_STATUS_CHECKER = "http://status.mojang.com/check";
     public static final int UNVERSIONED_BOOTSTRAP_VERSION = 0;
-- 
2.43.0.windows.1

From 03a8964e48b53c8080c36d0b41b2c0e0150f960a Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Sat, 14 Oct 2023 18:03:22 -0500
Subject: [PATCH 24/33] Properly migrate profiles from new launcher

---
 .../minecraft/launcher/profile/ProfileManager.java | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
index a29c749..bb7d8a0 100644
--- a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
+++ b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
@@ -34,6 +34,8 @@ import dev.figboot.olauncher.auth.MicrosoftAuthenticationService;
 import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.LauncherConstants;
 import org.apache.commons.io.FileUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class ProfileManager {
     public static final String DEFAULT_PROFILE_NAME = "(Default)";
@@ -48,6 +50,8 @@ public class ProfileManager {
     private String selectedUser;
     private AuthenticationDatabase authDatabase;
 
+    private static final Logger LOGGER = LogManager.getLogger();
+
     public ProfileManager(Launcher var1) {
         this.launcher = var1;
         this.profileFile = new File(var1.getLauncher().getWorkingDirectory(), "launcher_profiles.json");
@@ -99,6 +103,16 @@ public class ProfileManager {
             }
 
             ProfileManager.RawProfileList var4 = (ProfileManager.RawProfileList)this.gson.fromJson(var1, ProfileManager.RawProfileList.class);
+
+            // OLauncher start - migrate launcher profiles properly
+            for (Map.Entry<String, Profile> entry : var4.profiles.entrySet()) {
+                if (!entry.getValue().getName().equals(entry.getKey())) {
+                    LOGGER.info("Migrating profile " + entry.getKey() + " from new launcher.");
+                    entry.getValue().setName(entry.getKey());
+                }
+            }
+            // OLauncher end
+
             this.profiles.putAll(var4.profiles);
             this.selectedProfile = var4.selectedProfile;
             this.selectedUser = var4.selectedUser;
-- 
2.43.0.windows.1

From 13d05f7d54abe97fd54ab711e0df074406a292fa Mon Sep 17 00:00:00 2001
From: exrodev <exr0yt@gmail.com>
Date: Sat, 9 Mar 2024 18:32:00 +1030
Subject: [PATCH 25/33] Work around for not recieving profile

---
 .../authlib/HttpAuthenticationService.java    |  43 ++++++
 .../auth/MicrosoftAuthenticationService.java  |  10 ++
 .../auth/MicrosoftUserAuthentication.java     |  17 +++
 .../auth/ui/GameProfileFixDialog.java         |  87 ++++++++++++
 .../java/net/minecraft/launcher/Main.java     |   1 +
 .../launcher/ui/tabs/CrashReportTab.java      | 129 +++++++++---------
 6 files changed, 225 insertions(+), 62 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/ui/GameProfileFixDialog.java

diff --git a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
index 597a17a..f9a2fc5 100644
--- a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
@@ -147,6 +147,49 @@ public abstract class HttpAuthenticationService extends BaseAuthenticationServic
         return var6;
     }
 
+    // OLauncher start - delete request
+    public String performDeleteRequest(URL url, String bearer) throws IOException {
+        Validate.notNull(url);
+        HttpURLConnection connection = this.createUrlConnection(url);
+        if (bearer != null) connection.setRequestProperty("Authorization", "Bearer " + bearer);
+        LOGGER.debug("Reading data from " + url);
+        connection.setDoOutput(true);
+        connection.setRequestMethod("DELETE");
+
+        InputStream var3 = null;
+
+        String var6;
+        try {
+            String var5;
+            try {
+                var3 = connection.getInputStream();
+                String var4 = IOUtils.toString(var3, Charsets.UTF_8);
+                LOGGER.debug("Successful read, server response was " + connection.getResponseCode());
+                LOGGER.debug("Response: " + var4);
+                var5 = var4;
+                return var5;
+            } catch (IOException var10) {
+                IOUtils.closeQuietly(var3);
+                var3 = connection.getErrorStream();
+                if (var3 == null) {
+                    LOGGER.debug("Request failed", var10);
+                    throw var10;
+                }
+
+                LOGGER.debug("Reading error page from " + url);
+                var5 = IOUtils.toString(var3, Charsets.UTF_8);
+                LOGGER.debug("Successful read, server response was " + connection.getResponseCode());
+                LOGGER.debug("Response: " + var5);
+                var6 = var5;
+            }
+        } finally {
+            IOUtils.closeQuietly(var3);
+        }
+
+        return var6;
+    }
+    // OLauncher end
+
     public static URL constantURL(String var0) {
         try {
             return new URL(var0);
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
index de4725c..cb3b5a0 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
@@ -42,6 +42,7 @@ public class MicrosoftAuthenticationService extends YggdrasilAuthenticationServi
     public static final URL ROUTE_XBOXLIVE_XSTS = constantURL("https://xsts.auth.xboxlive.com/xsts/authorize");
     public static final URL ROUTE_MINECRAFT_XBOX_LOGIN = constantURL("https://api.minecraftservices.com/authentication/login_with_xbox");
     public static final URL ROUTE_MINECRAFT_PROFILE = constantURL("https://api.minecraftservices.com/minecraft/profile");
+    public static final URL ROUTE_MINECRAFT_PROFILE_SKINS_ACTIVE = constantURL("https://api.minecraftservices.com/minecraft/profile/skins/active");
 
     private final Gson gson;
 
@@ -94,6 +95,15 @@ public class MicrosoftAuthenticationService extends YggdrasilAuthenticationServi
         }
     }
 
+    protected <T> T deleteAuthenticated(URL url, String token, Class<T> clazz) throws AuthenticationException {
+        try {
+            String res = performDeleteRequest(url, token);
+            return gson.fromJson(res, clazz);
+        } catch (IOException ex) {
+            throw new AuthenticationException("Cannot connect to server", ex);
+        }
+    }
+
     protected static class FormURLEncodedBuilder {
         private final StringBuilder data;
         private boolean firstParam = true;
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index f8e17b4..a1fc568 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -32,16 +32,20 @@ import dev.figboot.olauncher.auth.responses.MSTokenAuthResponse;
 import dev.figboot.olauncher.auth.responses.MinecraftXboxLoginResponse;
 import dev.figboot.olauncher.auth.responses.XSTSAuthResponse;
 import dev.figboot.olauncher.auth.responses.XboxLiveAuthResponse;
+import dev.figboot.olauncher.auth.ui.GameProfileFixDialog;
+import dev.figboot.olauncher.auth.ui.MSLoginDialog;
 import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import javax.imageio.ImageIO;
+import javax.swing.*;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.InvocationTargetException;
 import java.math.BigInteger;
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
@@ -212,6 +216,19 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
                 mojToken, MCProfileInfo.class);
 
+        while (profileInfo.getId() == null) {
+            // User profile just returns 404 (who knows why)
+            // I believe that it may be an issue with the Mojang API
+            // - exro
+            try {
+                SwingUtilities.invokeAndWait(GameProfileFixDialog::new);
+            } catch (InterruptedException | InvocationTargetException e) {
+                throw new RuntimeException(e);
+            }
+            profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
+                    mojToken, MCProfileInfo.class);
+        }
+
         GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
         profile = sessionService.fillProfileProperties(profile, false);
 
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/GameProfileFixDialog.java b/src/main/java/dev/figboot/olauncher/auth/ui/GameProfileFixDialog.java
new file mode 100644
index 0000000..55f3f31
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/GameProfileFixDialog.java
@@ -0,0 +1,87 @@
+package dev.figboot.olauncher.auth.ui;
+
+import com.mojang.launcher.OperatingSystem;
+import dev.figboot.olauncher.OLauncherConstants;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.datatransfer.StringSelection;
+import java.awt.event.ActionEvent;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.net.URI;
+import java.net.URLEncoder;
+
+public class GameProfileFixDialog extends JDialog {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final String link = "https://www.minecraft.net/en-us/msaprofile/mygames/editskin";
+    private final JLabel lblText1;
+    private final JLabel lblText2;
+    private final JButton btnOpen;
+    private final JButton btnCopy;
+    private final JButton btnRetry;
+
+    public GameProfileFixDialog() {
+        lblText1 = new JLabel("There was an error loading your profile.");
+        lblText2 = new JLabel("You can (maybe) fix this by opening the edit skin page on the Minecraft website, then retry.");
+        btnOpen = new JButton("Open Link");
+        btnCopy = new JButton("Copy Link");
+        btnRetry = new JButton("Retry");
+
+        btnCopy.addActionListener(this::btnCopyLinkClick);
+        btnOpen.addActionListener(this::btnOpenLinkClick);
+        btnRetry.addActionListener(this::btnRetryClick);
+
+        setModal(true);
+        setModalityType(ModalityType.APPLICATION_MODAL);
+
+        addWindowListener(new WindowAdapter() {
+            @Override
+            public void windowClosing(WindowEvent e) {
+                dispose();
+            }
+        });
+
+        initInterface();
+    }
+
+    private void initInterface() {
+        setLayout(new BorderLayout());
+
+        JPanel pnlText1 = new JPanel();
+        pnlText1.setLayout(new FlowLayout(FlowLayout.CENTER));
+        pnlText1.add(lblText1);
+        add(pnlText1, BorderLayout.PAGE_START);
+
+        JPanel pnlText2 = new JPanel();
+        pnlText2.setLayout(new FlowLayout(FlowLayout.CENTER));
+        pnlText2.add(lblText2, BorderLayout.CENTER);
+        add(pnlText2);
+
+        JPanel pnlButtons = new JPanel();
+        pnlButtons.setLayout(new FlowLayout(FlowLayout.CENTER));
+        pnlButtons.add(btnOpen);
+        pnlButtons.add(btnCopy);
+        pnlButtons.add(btnRetry);
+        add(pnlButtons, BorderLayout.PAGE_END);
+
+        pack();
+        setLocationRelativeTo(this);
+        setVisible(true);
+    }
+
+    private void btnCopyLinkClick(ActionEvent evt) {
+        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(link), null);
+    }
+    private void btnOpenLinkClick(ActionEvent evt) {
+        OperatingSystem.openLink(URI.create(link));
+    }
+
+    private void btnRetryClick(ActionEvent evt) {
+        Object src = evt.getSource();
+        if (src instanceof Component) ((Component)src).setEnabled(false);
+        dispose();
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/Main.java b/src/main/java/net/minecraft/launcher/Main.java
index 6668dd0..a7bb077 100644
--- a/src/main/java/net/minecraft/launcher/Main.java
+++ b/src/main/java/net/minecraft/launcher/Main.java
@@ -34,6 +34,7 @@ public class Main {
     }
 
     private static void startLauncher(String[] var0) {
+        System.setProperty("sun.java2d.d3d", "false"); // possible fix for https://github.com/olauncher/olauncher/issues/12
         OptionParser var1 = new OptionParser();
         var1.allowsUnrecognizedOptions();
         var1.accepts("winTen");
diff --git a/src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java
index 701f313..b6c4444 100644
--- a/src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java
+++ b/src/main/java/net/minecraft/launcher/ui/tabs/CrashReportTab.java
@@ -53,45 +53,46 @@ public class CrashReportTab extends JPanel {
         this.isModded = !var4.contains("Is Modded: Probably not") && !var4.contains("Is Modded: Unknown");
         this.setLayout(new BorderLayout());
         this.createInterface();
-        if (var1.getProfileManager().getSelectedProfile().getUseHopperCrashService()) {
-            var1.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
-                public void run() {
-                    try {
-                        HashMap var1x = new HashMap();
-                        var1x.put("launcher.version", LauncherConstants.getVersionName());
-                        var1x.put("launcher.title", var1.getUserInterface().getTitle());
-                        var1x.put("bootstrap.version", String.valueOf(var1.getBootstrapVersion()));
-                        CrashReportTab.this.hopperServiceResponse = HopperService.submitReport(var1.getLauncher().getProxy(), var4, "Minecraft", var2.getId(), var1x);
-                        CrashReportTab.LOGGER.info("Reported crash to Mojang (ID " + CrashReportTab.this.hopperServiceResponse.getReport().getId() + ")");
-                        if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
-                            CrashReportTab.this.showKnownProblemPopup();
-                        } else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
-                            CrashReportTab.this.showPublishReportPrompt();
-                        }
-                    } catch (IOException var2x) {
-                        CrashReportTab.LOGGER.error("Couldn't report crash to Mojang", var2x);
-                    }
-
-                }
-            });
-        }
+//        if (var1.getProfileManager().getSelectedProfile().getUseHopperCrashService()) {
+//            var1.getLauncher().getVersionManager().getExecutorService().submit(new Runnable() {
+//                public void run() {
+//                    try {
+//                        HashMap var1x = new HashMap();
+//                        var1x.put("launcher.version", LauncherConstants.getVersionName());
+//                        var1x.put("launcher.title", var1.getUserInterface().getTitle());
+//                        var1x.put("bootstrap.version", String.valueOf(var1.getBootstrapVersion()));
+//                        CrashReportTab.this.hopperServiceResponse = HopperService.submitReport(var1.getLauncher().getProxy(), var4, "Minecraft", var2.getId(), var1x);
+//                        CrashReportTab.LOGGER.info("Reported crash to Mojang (ID " + CrashReportTab.this.hopperServiceResponse.getReport().getId() + ")");
+//                        if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
+//                            CrashReportTab.this.showKnownProblemPopup();
+//                        }
+//                        else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
+//                            CrashReportTab.this.showPublishReportPrompt();
+//                        }
+//                    } catch (IOException var2x) {
+//                        CrashReportTab.LOGGER.error("Couldn't report crash to Mojang", var2x);
+//                    }
+//
+//                }
+//            });
+//        }
 
     }
 
-    private void showPublishReportPrompt() {
-        String[] var1 = new String[]{"Publish Crash Report", "Cancel"};
-        JLabel var2 = new JLabel();
-        var2.setText("<html><p>Sorry, but it looks like the game crashed and we don't know why.</p><p>Would you mind publishing this report so that " + (this.isModded ? "the mod authors" : "Mojang") + " can fix it?</p></html>");
-        int var3 = JOptionPane.showOptionDialog(this, var2, "Uhoh, something went wrong!", 0, 1, (Icon)null, var1, var1[0]);
-        if (var3 == 0) {
-            try {
-                PublishResponse var4 = HopperService.publishReport(this.minecraftLauncher.getLauncher().getProxy(), this.hopperServiceResponse.getReport());
-            } catch (IOException var5) {
-                LOGGER.error("Couldn't publish report " + this.hopperServiceResponse.getReport().getId(), var5);
-            }
-        }
-
-    }
+//    private void showPublishReportPrompt() {
+//        String[] var1 = new String[]{"Publish Crash Report", "Cancel"};
+//        JLabel var2 = new JLabel();
+//        var2.setText("<html><p>Sorry, but it looks like the game crashed and we don't know why.</p><p>Would you mind publishing this report so that " + (this.isModded ? "the mod authors" : "Mojang") + " can fix it?</p></html>");
+//        int var3 = JOptionPane.showOptionDialog(this, var2, "Uhoh, something went wrong!", 0, 1, (Icon)null, var1, var1[0]);
+//        if (var3 == 0) {
+//            try {
+//                PublishResponse var4 = HopperService.publishReport(this.minecraftLauncher.getLauncher().getProxy(), this.hopperServiceResponse.getReport());
+//            } catch (IOException var5) {
+//                LOGGER.error("Couldn't publish report " + this.hopperServiceResponse.getReport().getId(), var5);
+//            }
+//        }
+//
+//    }
 
     private void showKnownProblemPopup() {
         if (this.hopperServiceResponse.getProblem().getUrl() == null) {
@@ -120,14 +121,16 @@ public class CrashReportTab extends JPanel {
     private class CrashInfoPane extends JPanel implements ActionListener {
         public static final String INFO_NORMAL = "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>Using magic and love, we've managed to gather some details about the crash and we will investigate this as soon as we can.</p><p>You can see the full report below.</p></div></html>";
         public static final String INFO_MODDED = "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>We think your game may be modded, and as such we can't accept this crash report.</p><p>However, if you do indeed use mods, please send this to the mod authors to take a look at!</p></div></html>";
-        private final JButton submitButton = new JButton("Report to Mojang");
+//        private final JButton submitButton = new JButton("Report to Mojang");
         private final JButton openFileButton = new JButton("Open report file");
 
+        // olauncher - remove submit report
         protected CrashInfoPane(Launcher var2) {
-            this.submitButton.addActionListener(this);
+//            this.submitButton.addActionListener(this);
             this.openFileButton.addActionListener(this);
         }
 
+        // olauncher - remove submit report
         protected void createInterface() {
             this.setLayout(new GridBagLayout());
             GridBagConstraints var1 = new GridBagConstraints();
@@ -135,7 +138,7 @@ public class CrashReportTab extends JPanel {
             var1.fill = 2;
             var1.insets = new Insets(2, 2, 2, 2);
             var1.gridx = 1;
-            this.add(this.submitButton, var1);
+//            this.add(this.submitButton, var1);
             var1.gridy = 1;
             this.add(this.openFileButton, var1);
             var1.gridx = 0;
@@ -144,33 +147,35 @@ public class CrashReportTab extends JPanel {
             var1.weighty = 1.0D;
             var1.gridheight = 2;
             this.add(new JLabel(CrashReportTab.this.isModded ? "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>We think your game may be modded, and as such we can't accept this crash report.</p><p>However, if you do indeed use mods, please send this to the mod authors to take a look at!</p></div></html>" : "<html><div style='width: 100%'><p><b>Uhoh, it looks like the game has crashed! Sorry for the inconvenience :(</b></p><p>Using magic and love, we've managed to gather some details about the crash and we will investigate this as soon as we can.</p><p>You can see the full report below.</p></div></html>"), var1);
-            if (CrashReportTab.this.isModded) {
-                this.submitButton.setEnabled(false);
-            }
+//            if (CrashReportTab.this.isModded) {
+//                this.submitButton.setEnabled(false);
+//            }
 
         }
 
+        // olauncher - remove submit report
         public void actionPerformed(ActionEvent var1) {
-            if (var1.getSource() == this.submitButton) {
-                if (CrashReportTab.this.hopperServiceResponse != null) {
-                    if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
-                        CrashReportTab.this.showKnownProblemPopup();
-                    } else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
-                        CrashReportTab.this.showPublishReportPrompt();
-                    }
-                } else {
-                    try {
-                        HashMap var2 = new HashMap();
-                        var2.put("pid", 10400);
-                        var2.put("issuetype", 1);
-                        var2.put("description", "Put the summary of the bug you're having here\n\n*What I expected to happen was...:*\nDescribe what you thought should happen here\n\n*What actually happened was...:*\nDescribe what happened here\n\n*Steps to Reproduce:*\n1. Put a step by step guide on how to trigger the bug here\n2. ...\n3. ...");
-                        var2.put("environment", this.buildEnvironmentInfo());
-                        OperatingSystem.openLink(URI.create("https://bugs.mojang.com/secure/CreateIssueDetails!init.jspa?" + Http.buildQuery(var2)));
-                    } catch (Throwable var3) {
-                        CrashReportTab.LOGGER.error("Couldn't open bugtracker", var3);
-                    }
-                }
-            } else if (var1.getSource() == this.openFileButton) {
+//            if (var1.getSource() == this.submitButton) {
+//                if (CrashReportTab.this.hopperServiceResponse != null) {
+//                    if (CrashReportTab.this.hopperServiceResponse.getProblem() != null) {
+//                        CrashReportTab.this.showKnownProblemPopup();
+//                    } else if (CrashReportTab.this.hopperServiceResponse.getReport().canBePublished()) {
+//                        CrashReportTab.this.showPublishReportPrompt();
+//                    }
+//                } else {
+//                    try {
+//                        HashMap var2 = new HashMap();
+//                        var2.put("pid", 10400);
+//                        var2.put("issuetype", 1);
+//                        var2.put("description", "Put the summary of the bug you're having here\n\n*What I expected to happen was...:*\nDescribe what you thought should happen here\n\n*What actually happened was...:*\nDescribe what happened here\n\n*Steps to Reproduce:*\n1. Put a step by step guide on how to trigger the bug here\n2. ...\n3. ...");
+//                        var2.put("environment", this.buildEnvironmentInfo());
+//                        OperatingSystem.openLink(URI.create("https://bugs.mojang.com/secure/CreateIssueDetails!init.jspa?" + Http.buildQuery(var2)));
+//                    } catch (Throwable var3) {
+//                        CrashReportTab.LOGGER.error("Couldn't open bugtracker", var3);
+//                    }
+//                }
+//            }
+            if (var1.getSource() == this.openFileButton) {
                 OperatingSystem.openLink(CrashReportTab.this.reportFile.toURI());
             }
 
-- 
2.43.0.windows.1

From 0d896ccc3bf88cf64cbfe409d086b74e08c81bc6 Mon Sep 17 00:00:00 2001
From: exrodev <exr0yt@gmail.com>
Date: Sun, 10 Mar 2024 15:30:41 +1030
Subject: [PATCH 26/33] Version manifest v2

---
 .../launcher/versions/CompleteVersion.java    |  6 +++
 .../com/mojang/launcher/versions/Version.java |  6 +++
 .../minecraft/launcher/LauncherConstants.java |  2 +-
 .../ui/popups/profile/ProfileInfoPanel.java   | 28 ++++++-------
 .../updater/CompleteMinecraftVersion.java     | 41 ++++++++++++++++++-
 .../updater/MinecraftVersionManager.java      |  4 ++
 .../launcher/updater/PartialVersion.java      | 31 +++++++++++++-
 src/main/resources/launcher_properties.json   |  2 +-
 8 files changed, 101 insertions(+), 19 deletions(-)

diff --git a/src/main/java/com/mojang/launcher/versions/CompleteVersion.java b/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
index c05c7f7..73d80ad 100644
--- a/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
+++ b/src/main/java/com/mojang/launcher/versions/CompleteVersion.java
@@ -13,6 +13,12 @@ public interface CompleteVersion extends Version {
 
     Date getReleaseTime();
 
+    // olauncher start - version manifest v2
+    String getSha1();
+
+    int getComplianceLevel();
+    // olauncher end
+
     int getMinimumLauncherVersion();
 
     boolean appliesToCurrentEnvironment();
diff --git a/src/main/java/com/mojang/launcher/versions/Version.java b/src/main/java/com/mojang/launcher/versions/Version.java
index 4900107..12c09ea 100644
--- a/src/main/java/com/mojang/launcher/versions/Version.java
+++ b/src/main/java/com/mojang/launcher/versions/Version.java
@@ -10,4 +10,10 @@ public interface Version {
     Date getUpdatedTime();
 
     Date getReleaseTime();
+
+    // olauncher start - version manifest v2
+    String getSha1();
+
+    int getComplianceLevel();
+    // olauncher end
 }
diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index b2267d5..6754e1c 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -108,7 +108,7 @@ public class LauncherConstants {
 
         public LauncherProperties() {
             this.environment = LauncherConstants.LauncherEnvironment.PRODUCTION;
-            this.versionManifest = LauncherConstants.constantURL("https://launchermeta.mojang.com/mc/game/version_manifest.json");
+            this.versionManifest = LauncherConstants.constantURL("https://launchermeta.mojang.com/mc/game/version_manifest_v2.json"); // olauncher - version manifest v2
         }
 
         public LauncherConstants.LauncherEnvironment getEnvironment() {
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
index f7221bf..8318f47 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileInfoPanel.java
@@ -27,7 +27,7 @@ public class ProfileInfoPanel extends JPanel {
     private final JCheckBox resolutionCustom = new JCheckBox("Resolution:");
     private final JTextField resolutionWidth = new JTextField();
     private final JTextField resolutionHeight = new JTextField();
-    private final JCheckBox useHopper = new JCheckBox("Automatically ask Mojang for assistance with fixing crashes");
+//    private final JCheckBox useHopper = new JCheckBox("Automatically ask Mojang for assistance with fixing crashes");
     private final JCheckBox launcherVisibilityCustom = new JCheckBox("Launcher Visibility:");
     private final JComboBox launcherVisibilityOption = new JComboBox();
 
@@ -76,7 +76,7 @@ public class ProfileInfoPanel extends JPanel {
         var1.fill = 2;
         var1.weightx = 1.0D;
         var1.gridwidth = 0;
-        this.add(this.useHopper, var1);
+//        this.add(this.useHopper, var1);
         var1.gridwidth = 1;
         var1.weightx = 0.0D;
         var1.fill = 0;
@@ -119,7 +119,7 @@ public class ProfileInfoPanel extends JPanel {
         this.resolutionWidth.setText(String.valueOf(var2.getWidth()));
         this.resolutionHeight.setText(String.valueOf(var2.getHeight()));
         this.updateResolutionState();
-        this.useHopper.setSelected(this.editor.getProfile().getUseHopperCrashService());
+//        this.useHopper.setSelected(this.editor.getProfile().getUseHopperCrashService());
         LauncherVisibilityRule var3 = this.editor.getProfile().getLauncherVisibilityOnGameClose();
         if (var3 != null) {
             this.launcherVisibilityCustom.setSelected(true);
@@ -184,11 +184,11 @@ public class ProfileInfoPanel extends JPanel {
         };
         this.resolutionWidth.getDocument().addDocumentListener(var1);
         this.resolutionHeight.getDocument().addDocumentListener(var1);
-        this.useHopper.addItemListener(new ItemListener() {
-            public void itemStateChanged(ItemEvent var1) {
-                ProfileInfoPanel.this.updateHopper();
-            }
-        });
+//        this.useHopper.addItemListener(new ItemListener() {
+//            public void itemStateChanged(ItemEvent var1) {
+//                ProfileInfoPanel.this.updateHopper();
+//            }
+//        });
         this.launcherVisibilityCustom.addItemListener(new ItemListener() {
             public void itemStateChanged(ItemEvent var1) {
                 ProfileInfoPanel.this.updateLauncherVisibilityState();
@@ -223,12 +223,12 @@ public class ProfileInfoPanel extends JPanel {
 
     private void updateHopper() {
         Profile var1 = this.editor.getProfile();
-        if (this.useHopper.isSelected()) {
-            var1.setUseHopperCrashService(true);
-        } else {
-            var1.setUseHopperCrashService(false);
-        }
-
+//        if (this.useHopper.isSelected()) {
+//            var1.setUseHopperCrashService(true);
+//        } else {
+//            var1.setUseHopperCrashService(false);
+//        }
+        var1.setUseHopperCrashService(false);
     }
 
     private void updateProfileName() {
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index d0e6fc1..7df3cd1 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -42,6 +42,10 @@ public class CompleteMinecraftVersion implements CompleteVersion {
     private String id;
     private Date time;
     private Date releaseTime;
+    // olauncher start - version manifest v2
+    private String sha1;
+    private int complianceLevel;
+    // olauncher end
     private ReleaseType type;
     private String minecraftArguments;
     private List<Library> libraries;
@@ -68,6 +72,10 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         this.time = var1.time;
         this.releaseTime = var1.releaseTime;
         this.type = var1.type;
+        // olauncher start - version manifest v2
+        this.sha1 = var1.sha1;
+        this.complianceLevel = var1.complianceLevel;
+        // olauncher end
         this.minecraftArguments = var1.minecraftArguments;
         this.mainClass = var1.mainClass;
         this.minimumLauncherVersion = var1.minimumLauncherVersion;
@@ -131,6 +139,14 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         return this.releaseTime;
     }
 
+    public String getSha1() {
+        return this.sha1;
+    }
+
+    public int getComplianceLevel() {
+        return this.complianceLevel;
+    }
+
     public List<Library> getLibraries() {
         return this.libraries;
     }
@@ -229,8 +245,31 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         return var5;
     }
 
+    @Override
     public String toString() {
-        return "CompleteVersion{id='" + this.id + '\'' + ", updatedTime=" + this.time + ", releasedTime=" + this.time + ", type=" + this.type + ", libraries=" + this.libraries + ", mainClass='" + this.mainClass + '\'' + ", jar='" + this.jar + '\'' + ", minimumLauncherVersion=" + this.minimumLauncherVersion + '}';
+        return "CompleteMinecraftVersion{" +
+                "inheritsFrom='" + inheritsFrom + '\'' +
+                ", id='" + id + '\'' +
+                ", time=" + time +
+                ", releaseTime=" + releaseTime +
+                ", sha1='" + sha1 + '\'' +
+                ", complianceLevel=" + complianceLevel +
+                ", type=" + type +
+                ", minecraftArguments='" + minecraftArguments + '\'' +
+                ", libraries=" + libraries +
+                ", mainClass='" + mainClass + '\'' +
+                ", minimumLauncherVersion=" + minimumLauncherVersion +
+                ", incompatibilityReason='" + incompatibilityReason + '\'' +
+                ", assets='" + assets + '\'' +
+                ", compatibilityRules=" + compatibilityRules +
+                ", jar='" + jar + '\'' +
+                ", savableVersion=" + savableVersion +
+                ", synced=" + synced +
+                ", downloads=" + downloads +
+                ", assetIndex=" + assetIndex +
+                ", arguments=" + arguments +
+                ", javaVersion=" + javaVersion +
+                '}';
     }
 
     public String getMinecraftArguments() {
diff --git a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
index 30d2fa0..a8801e6 100644
--- a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
+++ b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
@@ -72,6 +72,10 @@ public class MinecraftVersionManager implements VersionManager {
             this.localVersionList.refreshVersions();
             LOGGER.info("Refreshing remote version list...");
             this.remoteVersionList.refreshVersions();
+
+            // olauncher start - verify integrity
+
+            // olauncher end
         } catch (IOException var7) {
             synchronized(this.refreshLock) {
                 this.isRefreshing = false;
diff --git a/src/main/java/net/minecraft/launcher/updater/PartialVersion.java b/src/main/java/net/minecraft/launcher/updater/PartialVersion.java
index 777763f..ced4623 100644
--- a/src/main/java/net/minecraft/launcher/updater/PartialVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/PartialVersion.java
@@ -11,11 +11,15 @@ public class PartialVersion implements Version {
     private Date releaseTime;
     private MinecraftReleaseType type;
     private URL url;
+    // olauncher start - version manifest v2
+    private String sha1;
+    private int complianceLevel;
+    // olauncher end
 
     public PartialVersion() {
     }
 
-    public PartialVersion(String var1, Date var2, Date var3, MinecraftReleaseType var4, URL var5) {
+    public PartialVersion(String var1, Date var2, Date var3, MinecraftReleaseType var4, URL var5, String sha1, int complianceLevel) {
         if (var1 != null && var1.length() != 0) {
             if (var2 == null) {
                 throw new IllegalArgumentException("Release time cannot be null");
@@ -23,12 +27,16 @@ public class PartialVersion implements Version {
                 throw new IllegalArgumentException("Update time cannot be null");
             } else if (var4 == null) {
                 throw new IllegalArgumentException("Release type cannot be null");
+            } else if (sha1 == null || sha1.isEmpty()) { // olauncher start - version manifest v2
+                throw new IllegalArgumentException("SHA1 cannot be null or empty");
             } else {
                 this.id = var1;
                 this.releaseTime = var2;
                 this.time = var3;
                 this.type = var4;
                 this.url = var5;
+                this.sha1 = sha1;
+                this.complianceLevel = complianceLevel;
             }
         } else {
             throw new IllegalArgumentException("ID cannot be null or empty");
@@ -59,6 +67,16 @@ public class PartialVersion implements Version {
         return this.releaseTime;
     }
 
+    // olauncher start - version manifest v2
+    public String getSha1() {
+        return this.sha1;
+    }
+
+    public int getComplianceLevel() {
+        return this.complianceLevel;
+    }
+    // olauncher end
+
     public void setReleaseTime(Date var1) {
         if (var1 == null) {
             throw new IllegalArgumentException("Time cannot be null");
@@ -83,7 +101,16 @@ public class PartialVersion implements Version {
         this.url = var1;
     }
 
+    @Override
     public String toString() {
-        return "PartialVersion{id='" + this.id + '\'' + ", updateTime=" + this.time + ", releaseTime=" + this.releaseTime + ", type=" + this.type + ", url=" + this.url + '}';
+        return "PartialVersion{" +
+                "id='" + id + '\'' +
+                ", time=" + time +
+                ", releaseTime=" + releaseTime +
+                ", type=" + type +
+                ", url=" + url +
+                ", sha1='" + sha1 + '\'' +
+                ", complianceLevel=" + complianceLevel +
+                '}';
     }
 }
diff --git a/src/main/resources/launcher_properties.json b/src/main/resources/launcher_properties.json
index 05095f8..10013b0 100644
--- a/src/main/resources/launcher_properties.json
+++ b/src/main/resources/launcher_properties.json
@@ -1 +1 @@
-{"environment":"production","versionManifest":"https://launchermeta.mojang.com/mc/game/version_manifest.json"}
\ No newline at end of file
+{"environment":"production","versionManifest":"https://launchermeta.mojang.com/mc/game/version_manifest_v2.json"}
\ No newline at end of file
-- 
2.43.0.windows.1

From de187323e17ca863b232192e97ef5f1c823bac1d Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Sun, 10 Mar 2024 19:51:40 -0500
Subject: [PATCH 27/33] fix offline auth and stuff

---
 .../auth/MicrosoftUserAuthentication.java     | 91 ++++++++++++++-----
 .../auth/requests/XSTSAuthRequest.java        |  7 +-
 .../auth/responses/XSTSAuthResponse.java      | 17 +++-
 .../launcher/game/MinecraftGameRunner.java    |  2 +-
 .../minecraft/launcher/updater/Argument.java  | 16 +++-
 5 files changed, 102 insertions(+), 31 deletions(-)

diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index a1fc568..b6c71f6 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -33,7 +33,6 @@ import dev.figboot.olauncher.auth.responses.MinecraftXboxLoginResponse;
 import dev.figboot.olauncher.auth.responses.XSTSAuthResponse;
 import dev.figboot.olauncher.auth.responses.XboxLiveAuthResponse;
 import dev.figboot.olauncher.auth.ui.GameProfileFixDialog;
-import dev.figboot.olauncher.auth.ui.MSLoginDialog;
 import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
@@ -54,9 +53,11 @@ import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.security.SecureRandom;
 import java.time.Instant;
+import java.time.format.DateTimeParseException;
 import java.time.temporal.ChronoUnit;
 import java.util.Base64;
 import java.util.Map;
+import java.util.UUID;
 
 public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -70,9 +71,9 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private String xblToken;
     private Instant xblTokenExpire;
     private String mojToken;
-    @Getter private String xuid;
+    @Getter private UUID xuid;
     private Instant mojTokenExpire;
-    private boolean loggedIn;
+    private boolean online;
 
     private MSLoginServer.Response msLoginRes;
 
@@ -85,9 +86,9 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         this.agent = agent;
         profiles = null;
 
-        msRefreshToken = "";
-        mojToken = "";
-        loggedIn = false;
+        msRefreshToken = null;
+        mojToken = null;
+        online = false;
 
         msLoginRes = null;
 
@@ -96,12 +97,11 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
     @Override
     public boolean canLogIn() {
-        return !canPlayOnline();
-    }
+        Instant later = Instant.now().plus(6, ChronoUnit.HOURS);
 
-    @Override
-    public boolean isLoggedIn() {
-        return super.isLoggedIn() && loggedIn;
+        return !canPlayOnline() && (StringUtils.isNotBlank(msRefreshToken)
+                || (StringUtils.isNotBlank(xblToken) && xblTokenValid(later))
+                || (StringUtils.isNotBlank(mojToken) && xblTokenValid(later)));
     }
 
     @Override
@@ -188,30 +188,40 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     }
 
     private void xstsAndMinecraftLogIn(String userHash) throws AuthenticationException {
-        LOGGER.debug("Acquiring XSTS token...");
+        LOGGER.debug("Acquiring Minecraft XSTS token...");
         XSTSAuthResponse xstsAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_XSTS,
-                new XSTSAuthRequest(xblToken),
+                new XSTSAuthRequest(xblToken, XSTSAuthRequest.RP_MINECRAFT),
                 XSTSAuthResponse.class);
 
         if (userHash != null && !userHash.equals(xstsAuthRes.getUserHash())) {
             throw new AuthenticationException("The user hash has changed?");
         }
 
+        findXUID();
+
         LOGGER.debug("Logging into Minecraft...");
         MinecraftXboxLoginResponse mcLoginRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_MINECRAFT_XBOX_LOGIN,
                 new MinecraftXboxLoginRequest(xstsAuthRes.getUserHash(), xstsAuthRes.getToken(), true),
                 MinecraftXboxLoginResponse.class);
         this.mojToken = mcLoginRes.getAccessToken();
         this.mojTokenExpire = Instant.now().plus(mcLoginRes.getExpiresIn(), ChronoUnit.SECONDS);
+    }
 
-        // Extract xuid from mojToken (JWT)
+    private void findXUID() throws AuthenticationException {
+        LOGGER.debug("Acquiring XUID...");
+        XSTSAuthResponse xstsAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_XSTS,
+                new XSTSAuthRequest(xblToken, XSTSAuthRequest.RP_XBL),
+                XSTSAuthResponse.class);
 
-        JsonElement elem = JsonParser.parseString(new String(Base64.getUrlDecoder().decode(mojToken.split("\\.")[1].getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));
-        JsonObject root = elem.getAsJsonObject();
-        this.xuid = root.get("xuid").getAsString();
+        String xuidStr = xstsAuthRes.getXID();
+        if (xuidStr == null) throw new AuthenticationException("XUID could not be found");
+
+        this.xuid = xuidFromString(xstsAuthRes.getXID());
     }
 
     private void profileLogIn() throws AuthenticationException {
+        if (this.xuid == null) findXUID();
+
         LOGGER.debug("Getting your user profile...");
         profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
                 mojToken, MCProfileInfo.class);
@@ -232,7 +242,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
         profile = sessionService.fillProfileProperties(profile, false);
 
-        loggedIn = true;
+        online = true;
         setUserid(profileInfo.getId().toString().replace("-", ""));
         profiles = new GameProfile[]{profile};
         setSelectedProfile(profile);
@@ -303,9 +313,9 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
         msRefreshToken = null;
         mojToken = null;
-        loggedIn = false;
         //msAuthCode = null;
         profileInfo = null;
+        online = false;
     }
 
     private boolean mojTokenValid(Instant now) {
@@ -324,9 +334,14 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         msLoginRes = code;
     }
 
+    @Override
+    public boolean isLoggedIn() {
+        return StringUtils.isNotBlank(mojToken);
+    }
+
     @Override
     public boolean canPlayOnline() {
-        return isLoggedIn() && getSelectedProfile() != null && StringUtils.isNotBlank(mojToken) && mojTokenValid(Instant.now());
+        return isLoggedIn() && getSelectedProfile() != null && StringUtils.isNotBlank(mojToken) && mojTokenValid(Instant.now()) && online;
     }
 
     @Override
@@ -339,15 +354,43 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         throw new AuthenticationException("Switching game profiles is not supported");
     }
 
+    private static UUID xuidFromString(String xuidStr) {
+        return new UUID(0, Long.parseUnsignedLong(xuidStr));
+    }
+
     @Override
     public void loadFromStorage(Map<String, Object> var1) {
         super.loadFromStorage(var1);
         msRefreshToken = (String)var1.get("refreshToken");
         xblToken = (String)var1.get("xboxLiveToken");
-        xblTokenExpire = Instant.parse((String)var1.get("xboxLiveTokenExpire"));
-        xuid = (String)var1.get("xuid");
+
+        try {
+            xblTokenExpire = Instant.parse((String)var1.get("xboxLiveTokenExpire"));
+        } catch (DateTimeParseException ex) {
+            xblToken = null;
+            xblTokenExpire = null;
+        }
+
+        if (var1.containsKey("xuid")) {
+            xuid = xuidFromString("xuid");
+        } else if (var1.containsKey("xuid2")) {
+            try {
+                xuid = UUID.fromString((String)var1.get("xuid2"));
+            } catch (IllegalArgumentException ex) {
+                xuid = null;
+            }
+        } else {
+            xuid = null;
+        }
+
         mojToken = (String)var1.get("mojToken");
-        mojTokenExpire = Instant.parse((String)var1.get("mojTokenExpire"));
+
+        try {
+            mojTokenExpire = Instant.parse((String)var1.get("mojTokenExpire"));
+        } catch (DateTimeParseException ex) {
+            mojTokenExpire = null;
+            mojToken = null;
+        }
     }
 
     @Override
@@ -356,7 +399,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         map.put("refreshToken", msRefreshToken);
         map.put("xboxLiveToken", xblToken);
         map.put("xboxLiveTokenExpire", xblTokenExpire.toString());
-        map.put("xuid", xuid);
+        map.put("xuid2", xuid.toString());
         map.put("mojToken", mojToken);
         map.put("mojTokenExpire", mojTokenExpire.toString());
         return map;
diff --git a/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java b/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
index 73cd161..f3a429b 100644
--- a/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
+++ b/src/main/java/dev/figboot/olauncher/auth/requests/XSTSAuthRequest.java
@@ -26,9 +26,12 @@ public class XSTSAuthRequest {
     private final String RelyingParty;
     private final String TokenType;
 
-    public XSTSAuthRequest(String xblToken) {
+    public static final String RP_MINECRAFT = "rp://api.minecraftservices.com/";
+    public static final String RP_XBL = "http://xboxlive.com";
+
+    public XSTSAuthRequest(String xblToken, String relyingParty) {
         Properties = new TagProperties(xblToken);
-        RelyingParty = "rp://api.minecraftservices.com/";
+        RelyingParty = relyingParty;
         TokenType = "JWT";
     }
 
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
index 3a959db..3d1afb8 100644
--- a/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/XSTSAuthResponse.java
@@ -29,14 +29,25 @@ public class XSTSAuthResponse extends MSResponse {
     }
 
     public String getUserHash() {
-        return DisplayClaims.xui.get(0).uhs;
+        for (TagDisplayClaims.TagDisplayClaim claim : DisplayClaims.xui) {
+            if (claim.uhs != null) return claim.uhs;
+        }
+        return null;
+    }
+
+    public String getXID() {
+        for (TagDisplayClaims.TagDisplayClaim claim : DisplayClaims.xui) {
+            if (claim.xid != null) return claim.xid;
+        }
+        return null;
     }
 
     public static class TagDisplayClaims {
-        private List<TagUserHashContainer> xui;
+        private List<TagDisplayClaim> xui;
 
-        public static class TagUserHashContainer {
+        public static class TagDisplayClaim {
             private String uhs;
+            private String xid;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 0fda0ab..6436333 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -364,7 +364,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
 
         // olauncher - add MSA options
         if (var5 instanceof MicrosoftUserAuthentication) {
-            var6.put("auth_xuid", ((MicrosoftUserAuthentication)var5).getXuid());
+            var6.put("auth_xuid", ((MicrosoftUserAuthentication)var5).getXuid().toString());
             // TODO: clientid as well
         }
 
diff --git a/src/main/java/net/minecraft/launcher/updater/Argument.java b/src/main/java/net/minecraft/launcher/updater/Argument.java
index d5560e6..fb4ae8c 100644
--- a/src/main/java/net/minecraft/launcher/updater/Argument.java
+++ b/src/main/java/net/minecraft/launcher/updater/Argument.java
@@ -11,6 +11,8 @@ import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
+import com.mojang.launcher.versions.CompleteVersion;
 import net.minecraft.launcher.CompatibilityRule;
 import org.apache.commons.lang3.text.StrSubstitutor;
 
@@ -55,6 +57,12 @@ public class Argument {
         public Serializer() {
         }
 
+        private static void deserializeRules(List<CompatibilityRule> dest, JsonArray arr, JsonDeserializationContext ctx) throws JsonParseException {
+            for (JsonElement elem : arr) {
+                dest.add(ctx.deserialize(elem, CompatibilityRule.class));
+            }
+        }
+
         public Argument deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
             if (var1.isJsonPrimitive()) {
                 return new Argument(new String[]{var1.getAsString()}, (List)null);
@@ -77,13 +85,19 @@ public class Argument {
 
                 ArrayList var11 = new ArrayList();
                 if (var4.has("rules")) {
+                    if (true) {
+                        deserializeRules(var11, var4.getAsJsonArray("rules"), var3);
+                    } else { // olauncher: kill this code (it is dumb)
                     JsonArray var12 = var4.getAsJsonArray("rules");
                     Iterator var9 = var12.iterator();
 
-                    while(var9.hasNext()) {
+                    while (var9.hasNext()) {
                         JsonElement var10 = (JsonElement)var9.next();
                         var11.add((CompatibilityRule)var3.deserialize(var10, CompatibilityRule.class));
                     }
+                    }
+                } else if (var4.has("compatibilityRules")) {
+                    deserializeRules(var11, var4.getAsJsonArray("compatibilityRules"), var3);
                 }
 
                 return new Argument(var6, var11);
-- 
2.43.0.windows.1

From d370be0310500c05467956bee0cbc0c52bc1b44f Mon Sep 17 00:00:00 2001
From: Befell <54691311+DevBefell@users.noreply.github.com>
Date: Wed, 27 Mar 2024 16:15:31 -0700
Subject: [PATCH 28/33] proper fix for migrating profiles and same name
 profiles.

---
 .../figboot/olauncher/util/UUIDGenerator.java |  9 +++
 .../launcher/SwingUserInterface.java          | 21 +++----
 .../minecraft/launcher/profile/Profile.java   | 12 +++-
 .../launcher/profile/ProfileManager.java      | 56 +++++++++----------
 .../ui/bottombar/ProfileSelectionPanel.java   | 16 +++---
 .../ui/popups/profile/ProfileEditorPopup.java | 20 +------
 .../launcher/ui/tabs/ProfileListTab.java      | 20 +++----
 7 files changed, 73 insertions(+), 81 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/util/UUIDGenerator.java

diff --git a/src/main/java/dev/figboot/olauncher/util/UUIDGenerator.java b/src/main/java/dev/figboot/olauncher/util/UUIDGenerator.java
new file mode 100644
index 0000000..376965c
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/util/UUIDGenerator.java
@@ -0,0 +1,9 @@
+package dev.figboot.olauncher.util;
+
+import java.util.UUID;
+
+public class UUIDGenerator {
+    public static String generate(){
+        return UUID.randomUUID().toString().replace("-", "");
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/SwingUserInterface.java b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
index 528aa6c..2f20259 100644
--- a/src/main/java/net/minecraft/launcher/SwingUserInterface.java
+++ b/src/main/java/net/minecraft/launcher/SwingUserInterface.java
@@ -17,6 +17,7 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 import javax.imageio.ImageIO;
 import javax.swing.BorderFactory;
@@ -28,6 +29,7 @@ import javax.swing.SwingUtilities;
 import javax.swing.UIManager;
 
 import dev.figboot.olauncher.launcher.LauncherVersion;
+import dev.figboot.olauncher.util.UUIDGenerator;
 import net.minecraft.launcher.game.MinecraftGameRunner;
 import net.minecraft.launcher.profile.Profile;
 import net.minecraft.launcher.profile.ProfileManager;
@@ -187,20 +189,15 @@ public class SwingUserInterface implements MinecraftUserInterface {
                 UserAuthentication var2x = var1.getAuthDatabase().getByUUID(var1x);
                 var1.setSelectedUser(var1x);
                 if (var2.getName().equals("(Default)") && var2x.getSelectedProfile() != null) {
-                    String var3 = var2x.getSelectedProfile().getName();
-                    String var4 = var2x.getSelectedProfile().getName();
-
-                    StringBuilder var10000;
-                    for(int var5 = 1; var1.getProfiles().containsKey(var4); var4 = var10000.append(var5).toString()) {
-                        var10000 = (new StringBuilder()).append(var3).append(" ");
-                        ++var5;
-                    }
-
+                    // olauncher - fixup the default generated profile
                     Profile var6 = new Profile(var2);
-                    var6.setName(var4);
-                    var1.getProfiles().put(var4, var6);
+                    String profileUUID = UUIDGenerator.generate();
+                    var6.setName(var2x.getSelectedProfile().getName());
+                    var6.setLastVersionId("latest-release");
+                    var1.getProfiles().put(profileUUID, var6);
                     var1.getProfiles().remove("(Default)");
-                    var1.setSelectedProfile(var4);
+                    var1.setSelectedProfile(profileUUID);
+                    // olauncher - end
                 }
 
                 try {
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index a88b0b3..9141d27 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -16,6 +16,7 @@ public class Profile implements Comparable<Profile> {
     public static final Profile.Resolution DEFAULT_RESOLUTION = new Profile.Resolution(854, 480);
     public static final LauncherVisibilityRule DEFAULT_LAUNCHER_VISIBILITY;
     public static final Set<MinecraftReleaseType> DEFAULT_RELEASE_TYPES;
+    private transient String uniqueName;
     private String name;
     private File gameDir;
     private String lastVersionId;
@@ -31,6 +32,7 @@ public class Profile implements Comparable<Profile> {
     }
 
     public Profile(Profile var1) {
+        this.uniqueName = var1.uniqueName; // olauncher - includes unique name
         this.name = var1.name;
         this.gameDir = var1.gameDir;
         this.playerUUID = var1.playerUUID;
@@ -142,8 +144,16 @@ public class Profile implements Comparable<Profile> {
         this.launcherVisibilityOnGameClose = var1;
     }
 
+    public String getUniqueName() {
+        return uniqueName;
+    }
+
+    public void setUniqueName(String uniqueName) {
+        this.uniqueName = uniqueName;
+    }
+
     public int compareTo(Profile var1) {
-        return var1 == null ? -1 : this.getName().compareTo(var1.getName());
+        return var1 == null ? -1 : this.getUniqueName().compareTo(var1.getUniqueName());
     }
 
     static {
diff --git a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
index bb7d8a0..1cb9c2b 100644
--- a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
+++ b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
@@ -21,6 +21,8 @@ import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Type;
+import java.nio.file.Files;
+import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -67,7 +69,7 @@ public class ProfileManager {
     }
 
     public void saveProfiles() throws IOException {
-        ProfileManager.RawProfileList var1 = new ProfileManager.RawProfileList(this.profiles, this.getSelectedProfile().getName(), this.selectedUser, this.launcher.getClientToken(), this.authDatabase);
+        ProfileManager.RawProfileList var1 = new ProfileManager.RawProfileList(this.profiles, this.getSelectedProfile().getUniqueName(), this.selectedUser, this.launcher.getClientToken(), this.authDatabase);
         FileUtils.writeStringToFile(this.profileFile, this.gson.toJson(var1));
     }
 
@@ -77,26 +79,9 @@ public class ProfileManager {
         this.selectedUser = null;
         if (this.profileFile.isFile()) {
             JsonObject var1 = this.parser.parse(FileUtils.readFileToString(this.profileFile)).getAsJsonObject();
-            if (var1.has("launcherVersion")) {
-                JsonObject var2 = var1.getAsJsonObject("launcherVersion");
-                if (var2.has("profilesFormat") && var2.getAsJsonPrimitive("profilesFormat").getAsInt() != 1) {
-                    if (this.launcher.getUserInterface().shouldDowngradeProfiles()) {
-                        File var3 = new File(this.profileFile.getParentFile(), "launcher_profiles.old.json");
-                        if (var3.exists()) {
-                            var3.delete();
-                        }
-
-                        this.profileFile.renameTo(var3);
-                        this.fireRefreshEvent();
-                        this.fireUserChangedEvent();
-                        return false;
-                    }
-
-                    this.launcher.getLauncher().shutdownLauncher();
-                    System.exit(0);
-                    return false;
-                }
-            }
+            // olauncher start - creates backups for profiles
+            Files.copy(this.profileFile.toPath(),  new File(this.profileFile.getParentFile(), "launcher_profiles.old.json").toPath(), StandardCopyOption.REPLACE_EXISTING);
+            // olauncher end
 
             if (var1.has("clientToken")) {
                 this.launcher.setClientToken((UUID)this.gson.fromJson(var1.get("clientToken"), UUID.class));
@@ -104,14 +89,23 @@ public class ProfileManager {
 
             ProfileManager.RawProfileList var4 = (ProfileManager.RawProfileList)this.gson.fromJson(var1, ProfileManager.RawProfileList.class);
 
-            // OLauncher start - migrate launcher profiles properly
-            for (Map.Entry<String, Profile> entry : var4.profiles.entrySet()) {
-                if (!entry.getValue().getName().equals(entry.getKey())) {
-                    LOGGER.info("Migrating profile " + entry.getKey() + " from new launcher.");
-                    entry.getValue().setName(entry.getKey());
+            // olauncher start - migrate profiles correctly
+            var4.profiles.replaceAll((key, value) ->{
+                value.setUniqueName(key);
+                String name = value.getName();
+                if (name.isEmpty()) {
+                    // Fallback use last version ID
+                    name = value.getLastVersionId();
+                    if (name.equals("latest-release")) {
+                        name = "Latest Version";
+                    }
+                    value.setName(name);
                 }
-            }
-            // OLauncher end
+                LOGGER.info("Loaded profile " + name);
+                return value;
+            });
+
+            // olauncher end
 
             this.profiles.putAll(var4.profiles);
             this.selectedProfile = var4.selectedProfile;
@@ -152,10 +146,12 @@ public class ProfileManager {
             if (this.profiles.get("(Default)") != null) {
                 this.selectedProfile = "(Default)";
             } else if (this.profiles.size() > 0) {
-                this.selectedProfile = ((Profile)this.profiles.values().iterator().next()).getName();
+                this.selectedProfile = ((Profile) this.profiles.values().iterator().next()).getUniqueName(); // olauncher - use unique name
             } else {
                 this.selectedProfile = "(Default)";
-                this.profiles.put("(Default)", new Profile(this.selectedProfile));
+                Profile defaultProfile = new Profile("Default");
+                defaultProfile.setUniqueName(this.selectedProfile);
+                this.profiles.put(this.selectedProfile, defaultProfile); // olauncher - name default profile instead of null
             }
         }
 
diff --git a/src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java b/src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
index 787a41a..1121e25 100644
--- a/src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/bottombar/ProfileSelectionPanel.java
@@ -13,6 +13,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.UUID;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
 import javax.swing.JLabel;
@@ -40,6 +41,7 @@ public class ProfileSelectionPanel extends JPanel implements ActionListener, Ite
     public ProfileSelectionPanel(Launcher var1) {
         this.minecraftLauncher = var1;
         this.profileList.setRenderer(new ProfileSelectionPanel.ProfileListRenderer());
+        this.profileList.addActionListener(this);
         this.profileList.addItemListener(this);
         this.profileList.addItem("Loading profiles...");
         this.newProfileButton.addActionListener(this);
@@ -78,7 +80,7 @@ public class ProfileSelectionPanel extends JPanel implements ActionListener, Ite
     }
 
     public void populateProfiles() {
-        String var1 = this.minecraftLauncher.getProfileManager().getSelectedProfile().getName();
+        String var1 = this.minecraftLauncher.getProfileManager().getSelectedProfile().getUniqueName(); // olauncher - use unique name
         Profile var2 = null;
         ArrayList var3 = Lists.newArrayList(this.minecraftLauncher.getProfileManager().getProfiles().values());
         this.profileList.removeAllItems();
@@ -88,7 +90,7 @@ public class ProfileSelectionPanel extends JPanel implements ActionListener, Ite
         Profile var5;
         for(Iterator var4 = var3.iterator(); var4.hasNext(); this.profileList.addItem(var5)) {
             var5 = (Profile)var4.next();
-            if (var1.equals(var5.getName())) {
+            if (var1.equals(var5.getUniqueName())) { // olauncher - use unique name
                 var2 = var5;
             }
         }
@@ -110,7 +112,7 @@ public class ProfileSelectionPanel extends JPanel implements ActionListener, Ite
         if (var1.getStateChange() == 1) {
             if (!this.skipSelectionUpdate && var1.getItem() instanceof Profile) {
                 Profile var2 = (Profile)var1.getItem();
-                this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getName());
+                this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getUniqueName()); // olauncher - unique name
 
                 try {
                     this.minecraftLauncher.getProfileManager().saveProfiles();
@@ -129,13 +131,9 @@ public class ProfileSelectionPanel extends JPanel implements ActionListener, Ite
         if (var1.getSource() == this.newProfileButton) {
             var2 = new Profile(this.minecraftLauncher.getProfileManager().getSelectedProfile());
             var2.setName("Copy of " + var2.getName());
-
-            while(this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var2.getName())) {
-                var2.setName(var2.getName() + "_");
-            }
-
+            var2.setUniqueName(UUID.randomUUID().toString().replace("-", "")); // olauncher - use unique name
             ProfileEditorPopup.showEditProfileDialog(this.getMinecraftLauncher(), var2);
-            this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getName());
+            this.minecraftLauncher.getProfileManager().setSelectedProfile(var2.getUniqueName()); // olauncher - use unique name
         } else if (var1.getSource() == this.editProfileButton) {
             var2 = this.minecraftLauncher.getProfileManager().getSelectedProfile();
             ProfileEditorPopup.showEditProfileDialog(this.getMinecraftLauncher(), var2);
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
index c04f6c5..1f46772 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileEditorPopup.java
@@ -26,7 +26,6 @@ import org.apache.logging.log4j.Logger;
 public class ProfileEditorPopup extends JPanel implements ActionListener {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Launcher minecraftLauncher;
-    private final Profile originalProfile;
     private final Profile profile;
     private final JButton saveButton = new JButton("Save Profile");
     private final JButton cancelButton = new JButton("Cancel");
@@ -38,7 +37,6 @@ public class ProfileEditorPopup extends JPanel implements ActionListener {
     public ProfileEditorPopup(Launcher var1, Profile var2) {
         super(true);
         this.minecraftLauncher = var1;
-        this.originalProfile = var2;
         this.profile = new Profile(var2);
         this.profileInfoPanel = new ProfileInfoPanel(this);
         this.profileVersionPanel = new ProfileVersionPanel(this);
@@ -72,21 +70,9 @@ public class ProfileEditorPopup extends JPanel implements ActionListener {
         if (var1.getSource() == this.saveButton) {
             try {
                 ProfileManager var2 = this.minecraftLauncher.getProfileManager();
-                Map var3 = var2.getProfiles();
-                String var4 = var2.getSelectedProfile().getName();
-                if (!this.originalProfile.getName().equals(this.profile.getName())) {
-                    var3.remove(this.originalProfile.getName());
-
-                    while(var3.containsKey(this.profile.getName())) {
-                        this.profile.setName(this.profile.getName() + "_");
-                    }
-                }
-
-                var3.put(this.profile.getName(), this.profile);
-                if (var4.equals(this.originalProfile.getName())) {
-                    var2.setSelectedProfile(this.profile.getName());
-                }
-
+                Map<String, Profile> var3 = var2.getProfiles();
+                var3.put(this.profile.getUniqueName(), this.profile); // olauncher - code cleanup
+                var2.setSelectedProfile(this.profile.getUniqueName());
                 var2.saveProfiles();
                 var2.fireRefreshEvent();
             } catch (IOException var5) {
diff --git a/src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java
index c0ba865..8b249f5 100644
--- a/src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java
+++ b/src/main/java/net/minecraft/launcher/ui/tabs/ProfileListTab.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.ui.tabs;
 
+import com.google.common.base.MoreObjects;
 import com.mojang.launcher.OperatingSystem;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
@@ -10,6 +11,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import javax.swing.Icon;
 import javax.swing.JMenuItem;
 import javax.swing.JOptionPane;
@@ -20,6 +22,8 @@ import javax.swing.SwingUtilities;
 import javax.swing.event.PopupMenuEvent;
 import javax.swing.event.PopupMenuListener;
 import javax.swing.table.AbstractTableModel;
+
+import dev.figboot.olauncher.util.UUIDGenerator;
 import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.LauncherConstants;
 import net.minecraft.launcher.SwingUserInterface;
@@ -84,11 +88,7 @@ public class ProfileListTab extends JScrollPane implements RefreshedProfilesList
             public void actionPerformed(ActionEvent var1) {
                 Profile var2 = new Profile();
                 var2.setName("New Profile");
-
-                while(ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var2.getName())) {
-                    var2.setName(var2.getName() + "_");
-                }
-
+                var2.setUniqueName(UUIDGenerator.generate()); // olauncher - support for multiple same name
                 ProfileEditorPopup.showEditProfileDialog(ProfileListTab.this.getMinecraftLauncher(), var2);
             }
         });
@@ -99,11 +99,7 @@ public class ProfileListTab extends JScrollPane implements RefreshedProfilesList
                     Profile var3 = (Profile)ProfileListTab.this.dataModel.profiles.get(var2);
                     Profile var4 = new Profile(var3);
                     var4.setName("Copy of " + var3.getName());
-
-                    while(ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().containsKey(var4.getName())) {
-                        var4.setName(var4.getName() + "_");
-                    }
-
+                    var4.setUniqueName(UUIDGenerator.generate()); // olauncher - support for multiple same name
                     ProfileEditorPopup.showEditProfileDialog(ProfileListTab.this.getMinecraftLauncher(), var4);
                 }
             }
@@ -124,7 +120,7 @@ public class ProfileListTab extends JScrollPane implements RefreshedProfilesList
                     Profile var3 = (Profile)ProfileListTab.this.dataModel.profiles.get(var2);
                     int var4 = JOptionPane.showOptionDialog(((SwingUserInterface)ProfileListTab.this.minecraftLauncher.getUserInterface()).getFrame(), "Are you sure you want to delete this profile?", "Profile Confirmation", 0, 2, (Icon)null, LauncherConstants.CONFIRM_PROFILE_DELETION_OPTIONS, LauncherConstants.CONFIRM_PROFILE_DELETION_OPTIONS[0]);
                     if (var4 == 0) {
-                        ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().remove(var3.getName());
+                        ProfileListTab.this.minecraftLauncher.getProfileManager().getProfiles().remove(var3.getUniqueName()); // olauncher - use unique name
 
                         try {
                             ProfileListTab.this.minecraftLauncher.getProfileManager().saveProfiles();
@@ -227,7 +223,7 @@ public class ProfileListTab extends JScrollPane implements RefreshedProfilesList
             case 0:
                 return var3.getName();
             case 1:
-                if (var3.getLastVersionId() == null) {
+                if (Objects.equals(MoreObjects.firstNonNull(var3.getLastVersionId(), "latest-version").toLowerCase(), "latest-version")) { // olauncher - better handle latest versions
                     return "(Latest version)";
                 }
 
-- 
2.43.0.windows.1

From a0f1d74b2a913e9c3f88beb304cfbc30bfbb0125 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Sun, 31 Mar 2024 17:49:36 -0500
Subject: [PATCH 29/33] Auth overhaul

---
 .../authlib/HttpAuthenticationService.java    |   2 +
 .../auth/MicrosoftAuthenticationService.java  | 151 ++++++++++---
 .../auth/MicrosoftUserAuthentication.java     | 152 +++++++++----
 .../auth/error/ResponseCodeException.java     |  36 +++
 .../MSDeviceCodeHeartbeatResponse.java        |  28 +++
 .../auth/responses/MSDeviceCodeResponse.java  |  28 +++
 .../olauncher/auth/responses/MSResponse.java  |  11 +
 .../MinecraftEntitlementsResponse.java        |  15 ++
 .../olauncher/auth/ui/DeviceCodeDialog.java   | 211 ++++++++++++++++++
 .../olauncher/auth/ui/MSLoginDialog.java      |  11 +-
 .../launcher/update/ReleaseInfo.java          |   2 +-
 .../ui/popups/login/AuthErrorForm.java        |   2 +-
 .../ui/popups/login/ExistingUserListForm.java |   4 +-
 .../launcher/ui/popups/login/LogInForm.java   |  26 ++-
 .../launcher/ui/popups/login/LogInPopup.java  |  26 ++-
 15 files changed, 618 insertions(+), 87 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/error/ResponseCodeException.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeHeartbeatResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/responses/MinecraftEntitlementsResponse.java
 create mode 100644 src/main/java/dev/figboot/olauncher/auth/ui/DeviceCodeDialog.java

diff --git a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
index f9a2fc5..3a3605e 100644
--- a/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/HttpAuthenticationService.java
@@ -12,6 +12,8 @@ import java.net.URLEncoder;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
+
+import dev.figboot.olauncher.auth.error.ResponseCodeException;
 import org.apache.commons.io.Charsets;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.Validate;
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
index cb3b5a0..eb6acd0 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftAuthenticationService.java
@@ -24,19 +24,28 @@ import com.mojang.authlib.Agent;
 import com.mojang.authlib.UserAuthentication;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import dev.figboot.olauncher.auth.error.ResponseCodeException;
 import dev.figboot.olauncher.auth.responses.MSResponse;
 import dev.figboot.olauncher.util.BetterUUIDTypeAdapter;
 import dev.figboot.olauncher.util.InstantTypeAdapter;
+import lombok.Lombok;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+import java.io.*;
+import java.net.HttpURLConnection;
 import java.net.Proxy;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.time.Instant;
 import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.function.Function;
 
 public class MicrosoftAuthenticationService extends YggdrasilAuthenticationService {
+    private static final Logger LOGGER = LogManager.getLogger();
+
     public static final URL ROUTE_LOGIN_LIVE_TOKEN = constantURL("https://login.live.com/oauth20_token.srf");
     public static final URL ROUTE_XBOXLIVE_AUTH = constantURL("https://user.auth.xboxlive.com/user/authenticate");
     public static final URL ROUTE_XBOXLIVE_XSTS = constantURL("https://xsts.auth.xboxlive.com/xsts/authorize");
@@ -44,6 +53,10 @@ public class MicrosoftAuthenticationService extends YggdrasilAuthenticationServi
     public static final URL ROUTE_MINECRAFT_PROFILE = constantURL("https://api.minecraftservices.com/minecraft/profile");
     public static final URL ROUTE_MINECRAFT_PROFILE_SKINS_ACTIVE = constantURL("https://api.minecraftservices.com/minecraft/profile/skins/active");
 
+    public static final URL DEVICE_CODE_URL = constantURL("https://login.microsoftonline.com/consumers/oauth2/v2.0/devicecode");
+    public static final URL DEVICE_CODE_HEARTBEAT_URL = constantURL("https://login.microsoftonline.com/consumers/oauth2/v2.0/token");
+    public static final URL ENTITLEMENTS_URL = constantURL("https://api.minecraftservices.com/entitlements");
+
     private final Gson gson;
 
     public MicrosoftAuthenticationService(Proxy proxy, String token) {
@@ -59,49 +72,99 @@ public class MicrosoftAuthenticationService extends YggdrasilAuthenticationServi
         return new MicrosoftUserAuthentication(this, var1);
     }
 
-    protected <T extends MSResponse> T post(URL var1, Object var2, Class<T> clazz) throws AuthenticationException {
-        try {
-            String res = performPostRequest(var1, gson.toJson(var2), "application/json");
-            return gson.fromJson(res, clazz);
-        } catch (IOException ex) {
-            throw new AuthenticationException("Cannot connect to server", ex);
+    private String readStreamFully(InputStream is) throws IOException {
+        byte[] arr = new byte[4096];
+        int nread;
+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
+            while ((nread = is.read(arr)) > 0) {
+                baos.write(arr, 0, nread);
+            }
+
+            return new String(baos.toByteArray(), StandardCharsets.UTF_8);
         }
     }
 
-    protected <T extends MSResponse> T postForm(URL var1, String data, Class<T> clazz) throws AuthenticationException {
-        try {
-            String res = performPostRequest(var1, data, "application/x-www-form-urlencoded");
-            return gson.fromJson(res, clazz);
+    private <T> T readResponse(HttpURLConnection conn, Function<String, T> mappingFunc) throws IOException, AuthenticationException {
+        LOGGER.debug("[rq {}] Reading response data", conn.getURL());
+
+        int code = conn.getResponseCode();
+        String message = conn.getResponseMessage();
+
+        LOGGER.debug("[rq {}] Response is {} {}", conn.getURL(), code, message);
+
+        try (InputStream is = conn.getInputStream()) {
+            LOGGER.debug("[rq {}] Reading normal stream.", conn.getURL());
+
+            String fullRes = readStreamFully(is);
+            LOGGER.debug("[rq {}] Returned data: {}", conn.getURL(), fullRes);
+
+            return mappingFunc.apply(fullRes);
         } catch (IOException ex) {
-            throw new AuthenticationException("Cannot connect to server", ex);
+            LOGGER.debug("[rq {}] Error reading input stream. Reading error stream instead.", conn.getURL());
+            LOGGER.debug(ex);
+
+            try (InputStream ierr = conn.getErrorStream()) {
+                String fullError = readStreamFully(ierr);
+                LOGGER.debug("[rq {}] Returned error data: {}", conn.getURL(), fullError);
+                Object res = mappingFunc.apply(fullError);
+                throw ResponseCodeException.fill(new ResponseCodeException("Server responded with " + code + " " + message,
+                                ex, res instanceof MSResponse ? (MSResponse)res : null),
+                        code, message);
+            }
         }
     }
 
-    protected <T extends MSResponse> T get(URL url, Class<T> clazz) throws AuthenticationException {
-        try {
-            String res = performGetRequest(url);
-            return gson.fromJson(res, clazz);
-        } catch (IOException ex) {
-            throw new AuthenticationException("Cannot connect to server", ex);
-        }
+    public <T> T makeRequest(URL url, String data, String type, Function<String, T> mappingFunc) throws AuthenticationException {
+        return makeRequest(url, data, type, null, mappingFunc);
     }
 
-    protected <T> T getAuthenticated(URL url, String token, Class<T> clazz) throws AuthenticationException {
+    public <T> T makeRequest(URL url, String data, String type, String bearer, Function<String, T> mappingFunc) throws AuthenticationException {
+        HttpURLConnection conn = null;
         try {
-            String res = performGetRequest(url, token);
-            return gson.fromJson(res, clazz);
+            conn = createUrlConnection(url);
+
+            if (bearer != null) {
+                conn.setRequestProperty("Authorization", "Bearer " + bearer);
+            }
+
+            if (data != null) {
+                byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);
+
+                conn.setRequestProperty("Content-Length", "" + dataBytes.length);
+                conn.setRequestProperty("Content-Type", type);
+
+                conn.setDoOutput(true);
+
+                LOGGER.debug("[rq {}]: Writing POST data: {}", url, data);
+                try (OutputStream os = conn.getOutputStream()) {
+                    os.write(dataBytes);
+                }
+            }
+
+            return readResponse(conn, mappingFunc);
         } catch (IOException ex) {
-            throw new AuthenticationException("Cannot connect to server", ex);
+            throw new AuthenticationException("I/O exception for request", ex);
+        } finally {
+            if (conn != null) conn.disconnect();
         }
     }
 
-    protected <T> T deleteAuthenticated(URL url, String token, Class<T> clazz) throws AuthenticationException {
-        try {
-            String res = performDeleteRequest(url, token);
-            return gson.fromJson(res, clazz);
-        } catch (IOException ex) {
-            throw new AuthenticationException("Cannot connect to server", ex);
-        }
+    protected <T> T post(URL var1, Object var2, Class<T> clazz) throws AuthenticationException {
+        return makeRequest(var1, gson.toJson(var2), "application/json", s -> gson.fromJson(s, clazz));
+    }
+
+    protected <T> T postForm(URL var1, Consumer<FormBuilder> formProvider, Class<T> clazz) throws AuthenticationException {
+        FormBuilder fb = new FormBuilder();
+        formProvider.accept(fb);
+        return makeRequest(var1, fb.build(), "application/x-www-form-urlencoded", s -> gson.fromJson(s, clazz));
+    }
+
+    protected <T> T get(URL url, Class<T> clazz) throws AuthenticationException {
+        return makeRequest(url, null, null, s -> gson.fromJson(s, clazz));
+    }
+
+    protected <T> T getAuthenticated(URL url, String token, Class<T> clazz) throws AuthenticationException {
+        return makeRequest(url, null, null, token, s -> gson.fromJson(s, clazz));
     }
 
     protected static class FormURLEncodedBuilder {
@@ -134,4 +197,30 @@ public class MicrosoftAuthenticationService extends YggdrasilAuthenticationServi
             return data.toString();
         }
     }
+
+    public static class FormBuilder {
+        private final StringBuilder builder = new StringBuilder();
+
+        private FormBuilder() { }
+
+        public void appendNoEncode(String key, String value) {
+            if (builder.length() > 0) builder.append('&');
+
+            builder.append(key);
+            builder.append("=");
+            builder.append(value);
+        }
+
+        public void append(String key, String value) {
+            try {
+                appendNoEncode(URLEncoder.encode(key, "UTF-8"), URLEncoder.encode(value, "UTF-8"));
+            } catch (UnsupportedEncodingException ex) {
+                throw Lombok.sneakyThrow(ex); // should never happen
+            }
+        }
+
+        private String build() {
+            return builder.toString();
+        }
+    }
 }
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index b6c71f6..2486d77 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -18,20 +18,15 @@
 
 package dev.figboot.olauncher.auth;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParser;
 import com.mojang.authlib.*;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import dev.figboot.olauncher.OLauncherConstants;
+import dev.figboot.olauncher.auth.error.ResponseCodeException;
 import dev.figboot.olauncher.auth.requests.MinecraftXboxLoginRequest;
 import dev.figboot.olauncher.auth.requests.XSTSAuthRequest;
 import dev.figboot.olauncher.auth.requests.XboxLiveAuthRequest;
-import dev.figboot.olauncher.auth.responses.MSTokenAuthResponse;
-import dev.figboot.olauncher.auth.responses.MinecraftXboxLoginResponse;
-import dev.figboot.olauncher.auth.responses.XSTSAuthResponse;
-import dev.figboot.olauncher.auth.responses.XboxLiveAuthResponse;
+import dev.figboot.olauncher.auth.responses.*;
 import dev.figboot.olauncher.auth.ui.GameProfileFixDialog;
 import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
@@ -50,12 +45,10 @@ import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLEncoder;
-import java.nio.charset.StandardCharsets;
 import java.security.SecureRandom;
 import java.time.Instant;
 import java.time.format.DateTimeParseException;
 import java.time.temporal.ChronoUnit;
-import java.util.Base64;
 import java.util.Map;
 import java.util.UUID;
 
@@ -76,6 +69,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private boolean online;
 
     private MSLoginServer.Response msLoginRes;
+    private MSDeviceCodeHeartbeatResponse msDeviceLoginRes;
 
     private final MinecraftSessionService sessionService;
 
@@ -91,6 +85,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         online = false;
 
         msLoginRes = null;
+        msDeviceLoginRes = null;
 
         sessionService = service.createMinecraftSessionService();
     }
@@ -106,8 +101,6 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
     @Override
     public void logIn() throws AuthenticationException {
-        if (msLoginRes == null && msRefreshToken == null) throw new AuthenticationException("Username/email and password login is not supported");
-
         if (msLoginRes != null) {
             if (msLoginRes.isInternalError())
                 throw new AuthenticationException("An internal error occurred while authorizing your account");
@@ -115,6 +108,16 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
                 throw new AuthenticationException(msLoginRes.getErrorDesc() + " (" + msLoginRes.getError() + ")");
         }
 
+        if (msDeviceLoginRes != null) {
+            msRefreshToken = msDeviceLoginRes.getRefreshToken();
+            String hash = xblLogIn(msDeviceLoginRes.getAccesToken());
+            xstsAndMinecraftLogIn(hash);
+            profileLogIn();
+
+            msDeviceLoginRes = null;
+            return;
+        }
+
         String msAuthCode = msLoginRes == null ? null : this.msLoginRes.getCode();
         this.msLoginRes = null;
 
@@ -131,25 +134,48 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
             String hash = msAndXblWarmLogIn();
             xstsAndMinecraftLogIn(hash);
             profileLogIn();
-        } else {
+        } else if (msAuthCode != null) {
             String hash = msAndXblColdLogIn(msAuthCode);
             xstsAndMinecraftLogIn(hash);
             profileLogIn();
+        } else {
+            throw new AuthenticationException("This account's credentials aren't saved! You must log in again.");
+        }
+    }
+
+    private boolean ownsGame() throws AuthenticationException {
+        LOGGER.debug("Checking if they own the game...");
+        MinecraftEntitlementsResponse entitlementRes = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ENTITLEMENTS_URL,
+                mojToken, MinecraftEntitlementsResponse.class);
+
+        if (entitlementRes.getItems() == null) {
+            return false;
+        }
+
+        for (MinecraftEntitlementsResponse.EntitlementItem item : entitlementRes.getItems()) {
+            if (item.getName().equals("product_minecraft") || item.getName().equals("game_minecraft")) {
+                return true;
+            }
         }
+
+        return false;
     }
 
     private String msAndXblColdLogIn(String msAuthCode) throws AuthenticationException {
         LOGGER.debug("Getting access token from live...");
-        MSTokenAuthResponse tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
-                new MicrosoftAuthenticationService.FormURLEncodedBuilder("")
-                        .append("client_id", OLauncherConstants.APP_CLIENT_ID.toString())
-                        .append("code", msAuthCode)
-                        .append("grant_type", "authorization_code")
-                        .append("redirect_uri", OLauncherConstants.REDIR_URI)
-                        .build(), MSTokenAuthResponse.class);
-
-        if (tokAuthRes.getError() != null) {
-            throw new AuthenticationException(tokAuthRes.getError() + " - " + tokAuthRes.getErrorDescription());
+        MSTokenAuthResponse tokAuthRes;
+
+        try {
+            tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
+                    form -> {
+                        form.append("client_id", OLauncherConstants.APP_CLIENT_ID.toString());
+                        form.append("code", msAuthCode);
+                        form.append("grant_type", "authorization_code");
+                        form.append("redirect_uri", OLauncherConstants.REDIR_URI);
+                    }, MSTokenAuthResponse.class);
+        } catch (ResponseCodeException ex) {
+            MSResponse res = ex.getResponse();
+            throw new AuthenticationException(res.getError() + " - " + res.getErrorDescription(), ex);
         }
 
         this.msRefreshToken = tokAuthRes.getRefreshToken();
@@ -159,16 +185,19 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
     private String msAndXblWarmLogIn() throws AuthenticationException {
         LOGGER.debug("Logging into live with a refresh token...");
-        MSTokenAuthResponse tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
-                new MicrosoftAuthenticationService.FormURLEncodedBuilder("")
-                        .append("client_id", OLauncherConstants.APP_CLIENT_ID.toString())
-                        .append("refresh_token", msRefreshToken)
-                        .append("grant_type", "refresh_token")
-                        .append("redirect_uri", OLauncherConstants.REDIR_URI).build(),
-                MSTokenAuthResponse.class);
-
-        if (tokAuthRes.getError() != null) {
-            throw new AuthenticationException(tokAuthRes.getError() + " - " + tokAuthRes.getErrorDescription());
+        MSTokenAuthResponse tokAuthRes;
+
+        try {
+            tokAuthRes = getAuthenticationService().postForm(MicrosoftAuthenticationService.ROUTE_LOGIN_LIVE_TOKEN,
+                    form -> {
+                        form.append("client_id", OLauncherConstants.APP_CLIENT_ID.toString());
+                        form.append("refresh_token", msRefreshToken);
+                        form.append("grant_type", "refresh_token");
+                        form.append("redirect_uri", OLauncherConstants.REDIR_URI);
+                    }, MSTokenAuthResponse.class);
+        } catch (ResponseCodeException ex) {
+            MSResponse res = ex.getResponse();
+            throw new AuthenticationException(res.getError() + " - " + res.getErrorDescription(), ex);
         }
 
         this.msRefreshToken = tokAuthRes.getRefreshToken();
@@ -189,9 +218,25 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
 
     private void xstsAndMinecraftLogIn(String userHash) throws AuthenticationException {
         LOGGER.debug("Acquiring Minecraft XSTS token...");
-        XSTSAuthResponse xstsAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_XSTS,
-                new XSTSAuthRequest(xblToken, XSTSAuthRequest.RP_MINECRAFT),
-                XSTSAuthResponse.class);
+        XSTSAuthResponse xstsAuthRes;
+
+        try {
+            xstsAuthRes = getAuthenticationService().post(MicrosoftAuthenticationService.ROUTE_XBOXLIVE_XSTS,
+                    new XSTSAuthRequest(xblToken, XSTSAuthRequest.RP_MINECRAFT),
+                    XSTSAuthResponse.class);
+        } catch (ResponseCodeException ex) {
+            long error = ex.getResponse().getXError();
+            String message = ex.getResponse().getXMessage();
+            if (message == null) message = "...no message...";
+
+            if (error == 2148916238L) {
+                throw new AuthenticationException(String.format("Account is held by a minor outside of a family. %d (%s)", error, message), ex);
+            } else if (ex.getResponse().getXError() == 2148916233L) {
+                throw new AuthenticationException(String.format("Account is not on Xbox. %d (%s)", error, message), ex);
+            } else {
+                throw new AuthenticationException(String.format("Unknown Xbox XSTS error. %d (%s)", error, message), ex);
+            }
+        }
 
         if (userHash != null && !userHash.equals(xstsAuthRes.getUserHash())) {
             throw new AuthenticationException("The user hash has changed?");
@@ -222,10 +267,15 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private void profileLogIn() throws AuthenticationException {
         if (this.xuid == null) findXUID();
 
+        if (!ownsGame()) {
+            throw new AuthenticationException("No Minecraft entitlement! Do you own the game?");
+        }
+
         LOGGER.debug("Getting your user profile...");
         profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
                 mojToken, MCProfileInfo.class);
 
+        if (false) { // this code should be unnecessary now -figboot
         while (profileInfo.getId() == null) {
             // User profile just returns 404 (who knows why)
             // I believe that it may be an issue with the Mojang API
@@ -238,6 +288,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
             profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
                     mojToken, MCProfileInfo.class);
         }
+        }
 
         GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
         profile = sessionService.fillProfileProperties(profile, false);
@@ -334,6 +385,10 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         msLoginRes = code;
     }
 
+    public void setDeviceLoginResponse(MSDeviceCodeHeartbeatResponse res) {
+        msDeviceLoginRes = res;
+    }
+
     @Override
     public boolean isLoggedIn() {
         return StringUtils.isNotBlank(mojToken);
@@ -355,7 +410,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     }
 
     private static UUID xuidFromString(String xuidStr) {
-        return new UUID(0, Long.parseUnsignedLong(xuidStr));
+        return StringUtils.isBlank(xuidStr) ? null : new UUID(0, Long.parseUnsignedLong(xuidStr));
     }
 
     @Override
@@ -372,7 +427,7 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         }
 
         if (var1.containsKey("xuid")) {
-            xuid = xuidFromString("xuid");
+            xuid = xuidFromString((String)var1.get("xuid"));
         } else if (var1.containsKey("xuid2")) {
             try {
                 xuid = UUID.fromString((String)var1.get("xuid2"));
@@ -393,13 +448,34 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         }
     }
 
+    public MSDeviceCodeResponse startDeviceAuth() throws AuthenticationException {
+        return getAuthenticationService().postForm(MicrosoftAuthenticationService.DEVICE_CODE_URL,
+                form -> {
+                    form.append("client_id", OLauncherConstants.APP_CLIENT_ID.toString());
+                    form.append("scope", OLauncherConstants.APP_SCOPES);
+                }, MSDeviceCodeResponse.class);
+    }
+
+    public MSDeviceCodeHeartbeatResponse checkDeviceAuth(String deviceCode) throws AuthenticationException {
+        return getAuthenticationService().postForm(MicrosoftAuthenticationService.DEVICE_CODE_HEARTBEAT_URL,
+                form -> {
+                    form.appendNoEncode("grant_type", "urn:ietf:params:oauth:grant-type:device_code");
+                    form.append("client_id", OLauncherConstants.APP_CLIENT_ID.toString());
+                    form.append("device_code", deviceCode);
+                }, MSDeviceCodeHeartbeatResponse.class);
+    }
+
     @Override
     public Map<String, Object> saveForStorage() {
         Map<String, Object> map = super.saveForStorage();
         map.put("refreshToken", msRefreshToken);
         map.put("xboxLiveToken", xblToken);
         map.put("xboxLiveTokenExpire", xblTokenExpire.toString());
-        map.put("xuid2", xuid.toString());
+
+        if (xuid != null) {
+            map.put("xuid2", xuid.toString());
+        }
+
         map.put("mojToken", mojToken);
         map.put("mojTokenExpire", mojTokenExpire.toString());
         return map;
diff --git a/src/main/java/dev/figboot/olauncher/auth/error/ResponseCodeException.java b/src/main/java/dev/figboot/olauncher/auth/error/ResponseCodeException.java
new file mode 100644
index 0000000..8e02bd1
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/error/ResponseCodeException.java
@@ -0,0 +1,36 @@
+package dev.figboot.olauncher.auth.error;
+
+import com.mojang.authlib.exceptions.AuthenticationException;
+import dev.figboot.olauncher.auth.responses.MSResponse;
+import lombok.Getter;
+
+import java.io.IOException;
+import java.net.HttpURLConnection;
+
+public class ResponseCodeException extends AuthenticationException {
+    @Getter private final MSResponse response;
+
+    @Getter private int code;
+    @Getter private String httpMessage;
+
+    public static ResponseCodeException fill(ResponseCodeException ex, int code, String message) throws IOException {
+        ex.code = code;
+        ex.httpMessage = message;
+        return ex;
+    }
+
+    public ResponseCodeException(String message, MSResponse response) {
+        super(message);
+        this.response = response;
+    }
+
+    public ResponseCodeException(Throwable cause, MSResponse response) {
+        super(cause);
+        this.response = response;
+    }
+
+    public ResponseCodeException(String message, Throwable cause, MSResponse response) {
+        super(cause);
+        this.response = response;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeHeartbeatResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeHeartbeatResponse.java
new file mode 100644
index 0000000..dd8d3b1
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeHeartbeatResponse.java
@@ -0,0 +1,28 @@
+package dev.figboot.olauncher.auth.responses;
+
+import lombok.Getter;
+
+public class MSDeviceCodeHeartbeatResponse extends MSResponse {
+    private String token_type;
+    @Getter private String scope;
+    private int expires_in;
+    private String access_token;
+    private String refresh_token;
+    @Getter private Integer interval;
+
+    public String getTokenType() {
+        return token_type;
+    }
+
+    public int getExpiresIn() {
+        return expires_in;
+    }
+
+    public String getAccesToken() {
+        return access_token;
+    }
+
+    public String getRefreshToken() {
+        return refresh_token;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeResponse.java
new file mode 100644
index 0000000..fa13e4d
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MSDeviceCodeResponse.java
@@ -0,0 +1,28 @@
+package dev.figboot.olauncher.auth.responses;
+
+import lombok.Getter;
+
+public class MSDeviceCodeResponse extends MSResponse {
+    private String device_code;
+    private String user_code;
+    private String verification_uri;
+    private int expires_in;
+    @Getter private int interval;
+    @Getter private String message;
+
+    public String getDeviceCode() {
+        return device_code;
+    }
+
+    public String getUserCode() {
+        return user_code;
+    }
+
+    public String getVerificationUri() {
+        return verification_uri;
+    }
+
+    public int getExpiresIn() {
+        return expires_in;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
index 0159f0b..1001984 100644
--- a/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MSResponse.java
@@ -24,7 +24,18 @@ public class MSResponse {
     @Getter private String error;
     private String error_description;
 
+    private long XErr;
+    private String Message;
+
     public String getErrorDescription() {
         return error_description;
     }
+
+    public long getXError() {
+        return XErr;
+    }
+
+    public String getXMessage() {
+        return Message;
+    }
 }
diff --git a/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftEntitlementsResponse.java b/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftEntitlementsResponse.java
new file mode 100644
index 0000000..65443e5
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/responses/MinecraftEntitlementsResponse.java
@@ -0,0 +1,15 @@
+package dev.figboot.olauncher.auth.responses;
+
+import lombok.Getter;
+
+import java.util.List;
+
+public class MinecraftEntitlementsResponse extends MSResponse {
+    @Getter private List<EntitlementItem> items;
+    @Getter private String signature;
+    @Getter private String keyId;
+
+    public static class EntitlementItem {
+        @Getter private String name, signature;
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/DeviceCodeDialog.java b/src/main/java/dev/figboot/olauncher/auth/ui/DeviceCodeDialog.java
new file mode 100644
index 0000000..c032be4
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/DeviceCodeDialog.java
@@ -0,0 +1,211 @@
+package dev.figboot.olauncher.auth.ui;
+
+import com.mojang.authlib.exceptions.AuthenticationException;
+import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
+import dev.figboot.olauncher.auth.error.ResponseCodeException;
+import dev.figboot.olauncher.auth.responses.MSDeviceCodeHeartbeatResponse;
+import dev.figboot.olauncher.auth.responses.MSDeviceCodeResponse;
+import dev.figboot.olauncher.auth.responses.MSResponse;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import java.awt.*;
+import java.awt.datatransfer.StringSelection;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+
+public class DeviceCodeDialog extends JDialog {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final MicrosoftUserAuthentication authentication;
+
+    private final JLabel lblStatus;
+    private final JProgressBar pgbProgress = new JProgressBar();
+
+    private final JButton btnCopyCode;
+    private final JButton btnCopyLink;
+    private final JButton btnCancel;
+
+    private final ScheduledThreadPoolExecutor schedExec;
+
+    private boolean hasShutDown = false;
+    private MSDeviceCodeResponse deviceCodeResponse;
+
+    private final Consumer<MSDeviceCodeHeartbeatResponse> callback;
+
+    // https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-device-code
+    public DeviceCodeDialog(MicrosoftUserAuthentication authentication, Consumer<MSDeviceCodeHeartbeatResponse> callback) {
+        super(null, "Microsoft Login", ModalityType.APPLICATION_MODAL);
+        this.authentication = authentication;
+        this.callback = callback;
+
+        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
+
+        lblStatus = new JLabel("Initializing device logon flow...");
+
+        btnCopyCode = new JButton("Copy Code");
+        btnCopyLink = new JButton("Copy Link");
+        btnCancel = new JButton("Cancel");
+
+        schedExec = new ScheduledThreadPoolExecutor(5);
+        schedExec.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
+
+        addWindowListener(new WindowAdapter() {
+            @Override
+            public void windowClosed(WindowEvent e) {
+                shutDown();
+            }
+
+            @Override
+            public void windowClosing(WindowEvent e) {
+                shutDown();
+                dispose();
+            }
+
+            @Override
+            public void windowOpened(WindowEvent e) {
+                schedExec.submit(DeviceCodeDialog.this::startDeviceAuth);
+            }
+        });
+
+        btnCancel.addActionListener(e -> {
+            shutDown();
+            dispose();
+        });
+
+        btnCopyCode.addActionListener(e -> {
+            if (deviceCodeResponse != null) {
+                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(deviceCodeResponse.getUserCode()), null);
+            }
+        });
+
+        btnCopyLink.addActionListener(e -> {
+            if (deviceCodeResponse != null) {
+                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(deviceCodeResponse.getVerificationUri()), null);
+            }
+        });
+
+        initInterface();
+    }
+
+    private void initInterface() {
+        JPanel mainPanel = new JPanel(new BorderLayout(5, 5));
+        add(mainPanel);
+        mainPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
+
+        setResizable(false);
+        setModal(true);
+
+        pgbProgress.setIndeterminate(true);
+
+        JPanel infoPanel = new JPanel(new BorderLayout(5, 5));
+
+        infoPanel.add(lblStatus, BorderLayout.CENTER);
+        infoPanel.add(pgbProgress, BorderLayout.PAGE_END);
+
+        mainPanel.add(infoPanel, BorderLayout.CENTER);
+
+        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        actionPanel.add(btnCopyCode);
+        actionPanel.add(btnCopyLink);
+        actionPanel.add(btnCancel);
+
+        btnCopyCode.setEnabled(false);
+        btnCopyLink.setEnabled(false);
+        mainPanel.add(actionPanel, BorderLayout.PAGE_END);
+
+        pack();
+        setLocationRelativeTo(null);
+        setVisible(true);
+    }
+
+    private void startDeviceAuth() {
+        try {
+            deviceCodeResponse = authentication.startDeviceAuth();
+
+            if (deviceCodeResponse.getError() != null) { // FIXME
+                handleAuthError("Error in device authentication: " + deviceCodeResponse.getError() + "\n" + deviceCodeResponse.getErrorDescription());
+                return;
+            }
+
+            setStatus(deviceCodeResponse.getMessage(), true);
+
+            authHeartbeat();
+        } catch (AuthenticationException ex) {
+            LOGGER.error("Error starting device authentication", ex);
+            handleAuthError("Failed to begin device authentication flow:\n" + ex.getClass().getSimpleName() + ": " + ex.getMessage());
+        }
+    }
+
+    private void authHeartbeat() {
+        try {
+            MSDeviceCodeHeartbeatResponse heartbeat;
+            try {
+                heartbeat = authentication.checkDeviceAuth(deviceCodeResponse.getDeviceCode());
+            } catch (ResponseCodeException ex) {
+                heartbeat = (MSDeviceCodeHeartbeatResponse)ex.getResponse();
+                if (heartbeat.getError().equals("authorization_pending")) {
+                    schedExec.schedule(this::authHeartbeat, heartbeat.getInterval() == null ? deviceCodeResponse.getInterval() : heartbeat.getInterval(), TimeUnit.SECONDS);
+                } else {
+                    handleAuthError("Error in device authentication: " + heartbeat.getError() + "\n" + heartbeat.getErrorDescription());
+                }
+                return;
+            }
+
+            setStatus("Code received, logging in...", false);
+
+            shutDown();
+            dispose();
+            callback.accept(heartbeat);
+        } catch (AuthenticationException ex) {
+            LOGGER.error("Error checking device authentication", ex);
+            handleAuthError("Failed to authenticate:\n" + ex.getClass().getSimpleName() + ": " + ex.getMessage());
+        }
+    }
+
+    private void setStatus(String status, boolean active) {
+        SwingUtilities.invokeLater(() -> {
+            btnCopyCode.setEnabled(active);
+            btnCopyLink.setEnabled(active);
+            pgbProgress.setVisible(!active);
+            lblStatus.setText(status);
+
+            pack();
+            setLocationRelativeTo(null);
+        });
+    }
+
+    private void handleAuthError(String message) {
+        SwingUtilities.invokeLater(() -> {
+            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
+            shutDown();
+            dispose();
+        });
+    }
+
+    private void shutDown() {
+        if (hasShutDown) return;
+        hasShutDown = true;
+
+        lblStatus.setText("Cancelling...");
+        pgbProgress.setVisible(true);
+        btnCancel.setEnabled(false);
+
+        schedExec.shutdown();
+
+        try {
+            if (!schedExec.awaitTermination(5, TimeUnit.SECONDS)) {
+                LOGGER.warn("Failed to shut down scheduled executor in time... :(");
+            } else {
+                LOGGER.info("Shut down device login executor.");
+            }
+        } catch (InterruptedException ex) {
+            Thread.currentThread().interrupt();
+        }
+    }
+}
diff --git a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
index 83bd084..79799e0 100644
--- a/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
+++ b/src/main/java/dev/figboot/olauncher/auth/ui/MSLoginDialog.java
@@ -25,6 +25,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import javax.swing.*;
+import javax.swing.border.EmptyBorder;
 import java.awt.*;
 import java.awt.datatransfer.StringSelection;
 import java.awt.event.ActionEvent;
@@ -56,12 +57,13 @@ public class MSLoginDialog extends JDialog {
 
         setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
 
+        lblInfo.setBorder(new EmptyBorder(5, 5, 5, 5));
         btnCancel.addActionListener(this::btnCancelClick);
         btnCopy.addActionListener(this::btnCopyLink);
 
         addWindowListener(new WindowAdapter() {
             @Override
-            public void windowClosing(WindowEvent e) {
+            public void windowClosed(WindowEvent e) {
                 if (loginServer != null) {
                     loginServer.stop();
                     btnCancel.setEnabled(false);
@@ -77,9 +79,10 @@ public class MSLoginDialog extends JDialog {
         });
 
         try {
-            loginServer = new MSLoginServer(InetAddress.getByName("127.0.0.1"), OLauncherConstants.REDIR_URI_PORT, this::handleComplete);
+            loginServer = new MSLoginServer(InetAddress.getLoopbackAddress(), OLauncherConstants.REDIR_URI_PORT, this::handleComplete);
             loginServer.listen();
-            OperatingSystem.openLink(URI.create(link = String.format("https://login.live.com/oauth20_authorize.srf?client_id=%s&response_type=code&redirect_uri=%s&scope=%s",
+            OperatingSystem.openLink(URI.create(link = String.format("https://login.live.com/oauth20_authorize.srf" +
+                            "?client_id=%s&response_type=code&redirect_uri=%s&scope=%s&prompt=select_account",
                     URLEncoder.encode(OLauncherConstants.APP_CLIENT_ID.toString(), "UTF-8"),
                     URLEncoder.encode(OLauncherConstants.REDIR_URI, "UTF-8"),
                     URLEncoder.encode(OLauncherConstants.APP_SCOPES, "UTF-8")
@@ -97,6 +100,8 @@ public class MSLoginDialog extends JDialog {
     }
 
     private void initInterface() {
+        setTitle("OLauncher Login");
+        setResizable(false);
         setModal(true);
         setModalityType(ModalityType.APPLICATION_MODAL);
         setLayout(new BorderLayout());
diff --git a/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java b/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
index c0a6ba0..74026c7 100644
--- a/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
+++ b/src/main/java/dev/figboot/olauncher/launcher/update/ReleaseInfo.java
@@ -83,7 +83,7 @@ public class ReleaseInfo {
         }
 
         public boolean isRedistJar() {
-            return getState().equals("uploaded") && getContentType().equals("application/x-java-archive") && getName().endsWith("-redist.jar");
+            return getState().equals("uploaded") && (getContentType().equals("application/x-java-archive") || getContentType().equals("application/java-archive")) && getName().endsWith("-redist.jar");
         }
     }
 }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
index 7731ed5..4bfa493 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
@@ -25,7 +25,7 @@ public class AuthErrorForm extends JPanel {
     }
 
     protected void createInterface() {
-        this.setBorder(new EmptyBorder(0, 0, 15, 0));
+        this.setBorder(new EmptyBorder(0, 0, 5, 0)); // olauncher: shrink
         this.errorLabel.setFont(this.errorLabel.getFont().deriveFont(1));
         this.add(this.errorLabel);
     }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
index 7a9da9f..c1f6d05 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/ExistingUserListForm.java
@@ -90,7 +90,9 @@ public class ExistingUserListForm extends JPanel implements ActionListener {
         var1.gridwidth = 2;
         this.add(Box.createVerticalStrut(5), var1);
         this.add(new JLabel("Alternatively, log in with a new account below:"), var1);
-        this.add(new Separator(), var1);
+
+        // olauncher: remove separator
+        // this.add(new Separator(), var1);
     }
 
     public void actionPerformed(ActionEvent var1) {
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
index 31f1846..e5af44f 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -16,16 +16,11 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
-import javax.swing.Box;
-import javax.swing.JComboBox;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-import javax.swing.SwingUtilities;
+import javax.swing.*;
 
 import dev.figboot.olauncher.auth.MSLoginServer;
 import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
+import dev.figboot.olauncher.auth.ui.DeviceCodeDialog;
 import dev.figboot.olauncher.auth.ui.MSLoginDialog;
 import net.minecraft.launcher.LauncherConstants;
 import net.minecraft.launcher.profile.AuthenticationDatabase;
@@ -59,8 +54,9 @@ public class LogInForm extends JPanel implements ActionListener {
         var1.gridy = -1;
         var1.weightx = 1.0D;
         this.add(Box.createGlue());
+        Font var3 = getFont().deriveFont(1);
+        /*
         JLabel var2 = new JLabel("Email Address or Username:");
-        Font var3 = var2.getFont().deriveFont(1);
         Font var4 = var2.getFont().deriveFont((float)var3.getSize() - 2.0F);
         var2.setFont(var3);
         this.add(var2, var1);
@@ -90,6 +86,7 @@ public class LogInForm extends JPanel implements ActionListener {
             }
         });
         this.add(var7, var1);
+         */
         this.createUserDropdownPanel(var3);
         this.add(this.userDropdownPanel, var1);
         this.add(Box.createVerticalStrut(10), var1);
@@ -223,6 +220,19 @@ public class LogInForm extends JPanel implements ActionListener {
         });
     }
 
+    public void openMSDeviceLogin() {
+        SwingUtilities.invokeLater(() -> {
+            if (authentication instanceof MicrosoftUserAuthentication) {
+                new DeviceCodeDialog((MicrosoftUserAuthentication)authentication, res -> {
+                    ((MicrosoftUserAuthentication)authentication).setDeviceLoginResponse(res);
+                    tryLogIn();
+                });
+            } else {
+                JOptionPane.showMessageDialog(this, "Not a Microsoft authentication object!", "Error", JOptionPane.ERROR_MESSAGE);
+            }
+        });
+    }
+
     public void handleMSLogin(MSLoginServer.Response response) {
         if (response == null) {
             this.popup.getErrorForm().displayError(new AuthenticationException("The authentication code is null"), "The authentication request was cancelled.");
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
index 0c66c11..69b9729 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInPopup.java
@@ -30,7 +30,8 @@ public class LogInPopup extends JPanel implements ActionListener {
     private final LogInForm logInForm;
     private final JButton loginButton = new JButton("Log In");
     private final JButton registerButton = new JButton("Register");
-    private final JButton microsoftLoginButton = new JButton("Log In with Microsoft"); // olauncher - Add MS login button
+    private final JButton microsoftLoginButton = new JButton("Microsoft Login"); // olauncher - Add MS login button
+    private final JButton microsoftDeviceLoginButton = new JButton("Microsoft Login (Device Code)"); // olauncher - Add MS login button
     private final JProgressBar progressBar = new JProgressBar();
 
     public LogInPopup(Launcher var1, LogInPopup.Callback var2) {
@@ -44,6 +45,7 @@ public class LogInPopup extends JPanel implements ActionListener {
         this.loginButton.addActionListener(this);
         this.registerButton.addActionListener(this);
         this.microsoftLoginButton.addActionListener(this);
+        this.microsoftDeviceLoginButton.addActionListener(this);
     }
 
     protected void createInterface() {
@@ -58,7 +60,7 @@ public class LogInPopup extends JPanel implements ActionListener {
                 JPanel var4 = new JPanel();
                 var4.add(var3);
                 this.add(var4);
-                this.add(Box.createVerticalStrut(10));
+                //this.add(Box.createVerticalStrut(10));
             }
         } catch (IOException var5) {
             var5.printStackTrace();
@@ -70,12 +72,15 @@ public class LogInPopup extends JPanel implements ActionListener {
 
         this.add(this.errorForm);
         this.add(this.logInForm);
-        this.add(Box.createVerticalStrut(15));
+        //this.add(Box.createVerticalStrut(15));
         JPanel var6 = new JPanel();
+        var6.setLayout(new GridLayout(2, 1, 0, 5));
         /*var6.setLayout(new GridLayout(1, 2, 10, 0));
         var6.add(this.registerButton);
         var6.add(this.loginButton);*/
         // olauncher - Add MS login button
+        // olauncher - remove stuff
+        /*
         var6.setLayout(new GridBagLayout());
         GridBagConstraints regConstraints = new GridBagConstraints(),
                            loginConstraints = new GridBagConstraints(),
@@ -95,7 +100,13 @@ public class LogInPopup extends JPanel implements ActionListener {
         msLoginConstraints.gridy = 1;
         msLoginConstraints.gridwidth = 2;
         msLoginConstraints.insets = new Insets(5, 0, 0, 0);
-        var6.add(microsoftLoginButton, msLoginConstraints);
+        var6.add(microsoftLoginButton, msLoginConstraints); */
+
+        microsoftLoginButton.setAlignmentX(Component.CENTER_ALIGNMENT);
+        microsoftDeviceLoginButton.setAlignmentX(Component.CENTER_ALIGNMENT);
+
+        var6.add(microsoftLoginButton);
+        var6.add(microsoftDeviceLoginButton);
 
         this.add(var6);
         this.progressBar.setIndeterminate(true);
@@ -110,6 +121,8 @@ public class LogInPopup extends JPanel implements ActionListener {
             OperatingSystem.openLink(LauncherConstants.URL_REGISTER);
         } else if (var1.getSource() == this.microsoftLoginButton) { // olauncher - handle MS login button
             logInForm.openMSLogin();
+        } else if (var1.getSource() == this.microsoftDeviceLoginButton) {
+            logInForm.openMSDeviceLogin();
         }
 
     }
@@ -124,6 +137,11 @@ public class LogInPopup extends JPanel implements ActionListener {
             this.progressBar.setIndeterminate(false);
             this.progressBar.setIndeterminate(true);
             this.progressBar.setVisible(!var1);
+
+            // olauncher - login buttons
+            microsoftLoginButton.setEnabled(var1);
+            microsoftDeviceLoginButton.setEnabled(var1);
+
             this.repack();
         } else {
             SwingUtilities.invokeLater(new Runnable() {
-- 
2.43.0.windows.1

From 576c578de6d3ce69a5dac2c574e120229115eadc Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Mon, 11 Mar 2024 20:47:12 -0500
Subject: [PATCH 30/33] Disable JFX browser by default

---
 .../java/net/minecraft/launcher/ui/tabs/WebsiteTab.java   | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java b/src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java
index ebf0a73..20657c9 100644
--- a/src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java
+++ b/src/main/java/net/minecraft/launcher/ui/tabs/WebsiteTab.java
@@ -33,7 +33,15 @@ public class WebsiteTab extends JPanel {
         });
     }
 
+    // olauncher
+    private static final boolean USE_JFX = Boolean.parseBoolean(System.getProperty("dev.figboot.UseJFXBrowser", "false"));
+
     private Browser selectBrowser() {
+        if (!USE_JFX) { /* olauncher */
+            LOGGER.debug("(OLauncher) Using swing browser");
+            return new LegacySwingBrowser();
+        }
+
         if (this.hasJFX()) {
             LOGGER.info("JFX is already initialized");
             return new JFXBrowser();
-- 
2.43.0.windows.1

From e8636851fb3ee45a6d974fce8db17b0d281078ae Mon Sep 17 00:00:00 2001
From: Befell <54691311+DevBefell@users.noreply.github.com>
Date: Tue, 9 Apr 2024 01:02:27 -0700
Subject: [PATCH 31/33] internal overhaul

---
 .../direct/DirectProcessInputMonitor.java     |  29 ++-
 .../launcher/updater/VersionManager.java      |   4 +
 .../launcher/profile/AccountsDatabase.java    |  61 ++++++
 .../java/net/minecraft/launcher/Launcher.java | 126 +++++-------
 .../launcher/game/MinecraftGameRunner.java    |  17 +-
 .../launcher/game/MinecraftReleaseType.java   |   9 +-
 .../minecraft/launcher/profile/Profile.java   |   6 +-
 .../launcher/profile/ProfileManager.java      | 189 +++++++++++-------
 .../ui/bottombar/PlayerInfoPanel.java         |   5 +-
 .../popups/profile/ProfileVersionPanel.java   |  84 +++++---
 .../updater/MinecraftVersionManager.java      |  51 ++++-
 .../launcher/updater/RemoteVersionList.java   |  47 ++++-
 12 files changed, 401 insertions(+), 227 deletions(-)
 create mode 100644 src/main/java/dev/figboot/olauncher/launcher/profile/AccountsDatabase.java

diff --git a/src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
index d484001..3991737 100644
--- a/src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
+++ b/src/main/java/com/mojang/launcher/game/process/direct/DirectProcessInputMonitor.java
@@ -20,23 +20,22 @@ public class DirectProcessInputMonitor extends Thread {
     }
 
     public void run() {
-        InputStreamReader var1 = new InputStreamReader(this.process.getRawProcess().getInputStream());
-        BufferedReader var2 = new BufferedReader(var1);
-        String var3 = null;
-
-        while(this.process.isRunning()) {
-            try {
-                while((var3 = var2.readLine()) != null) {
-                    this.logProcessor.onGameOutput(this.process, var3);
-                    if (this.process.getSysOutFilter().apply(var3) == Boolean.TRUE) {
-                        this.process.getSysOutLines().add(var3);
-                    }
+        // olauncher - prevent streams being closed early
+        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(this.process.getRawProcess().getInputStream()))){
+            String string;
+            while ((string = bufferedReader.readLine()) != null) {
+                this.logProcessor.onGameOutput(this.process, string);
+                if (this.process.getSysOutFilter().apply(string) == Boolean.TRUE) {
+                    this.process.getSysOutLines().add(string);
                 }
-            } catch (IOException var8) {
-                LOGGER.error(var8);
-            } finally {
-                IOUtils.closeQuietly(var1);
             }
+        } catch (IOException var8) {
+            LOGGER.error(var8);
+        }
+        try {
+            this.process.getRawProcess().waitFor();
+        } catch (InterruptedException exception){
+            LOGGER.error("Process was interrupted: ", exception);
         }
 
         GameProcessRunnable var4 = this.process.getExitRunnable();
diff --git a/src/main/java/com/mojang/launcher/updater/VersionManager.java b/src/main/java/com/mojang/launcher/updater/VersionManager.java
index d594f22..9c60d0c 100644
--- a/src/main/java/com/mojang/launcher/updater/VersionManager.java
+++ b/src/main/java/com/mojang/launcher/updater/VersionManager.java
@@ -5,6 +5,8 @@ import com.mojang.launcher.updater.download.DownloadJob;
 import com.mojang.launcher.versions.CompleteVersion;
 import com.mojang.launcher.versions.ReleaseType;
 import com.mojang.launcher.versions.Version;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+
 import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -41,4 +43,6 @@ public interface VersionManager {
     void installVersion(CompleteVersion var1) throws IOException;
 
     void uninstallVersion(CompleteVersion var1) throws IOException;
+
+    VersionFilter<MinecraftReleaseType> getVersionFilter(); // olauncher - move version filter
 }
diff --git a/src/main/java/dev/figboot/olauncher/launcher/profile/AccountsDatabase.java b/src/main/java/dev/figboot/olauncher/launcher/profile/AccountsDatabase.java
new file mode 100644
index 0000000..16f3310
--- /dev/null
+++ b/src/main/java/dev/figboot/olauncher/launcher/profile/AccountsDatabase.java
@@ -0,0 +1,61 @@
+package dev.figboot.olauncher.launcher.profile;
+
+import com.google.gson.*;
+import dev.figboot.olauncher.auth.MicrosoftAuthenticationService;
+import net.minecraft.launcher.Launcher;
+import net.minecraft.launcher.profile.AuthenticationDatabase;
+
+import java.lang.reflect.Type;
+import java.util.UUID;
+
+public class AccountsDatabase {
+    public final AuthenticationDatabase authenticationDatabase;
+    public final String selectedUser;
+    public final UUID clientToken;
+
+    public AccountsDatabase(AuthenticationDatabase authenticationDatabase, String selectedUser, UUID clientToken) {
+        this.authenticationDatabase = authenticationDatabase;
+        this.selectedUser = selectedUser;
+        this.clientToken = clientToken;
+    }
+
+    public static class Serializer implements JsonDeserializer<AccountsDatabase>, JsonSerializer<AccountsDatabase> {
+        private final Launcher launcher;
+
+        public Serializer(Launcher launcher) {
+            this.launcher = launcher;
+        }
+
+        @Override
+        public AccountsDatabase deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
+            JsonObject data = jsonElement.getAsJsonObject();
+
+            AuthenticationDatabase database = new AuthenticationDatabase(new MicrosoftAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString()));
+            if (data.has("authenticationDatabase")) {
+                database = jsonDeserializationContext.deserialize(data.get("authenticationDatabase"), AuthenticationDatabase.class);
+            }
+
+            String selectedUser = null;
+            if (data.has("selectedUser")) {
+                selectedUser = data.getAsJsonPrimitive("selectedUser").getAsString();
+            } else if (!database.getknownUUIDs().isEmpty()) {
+                selectedUser = database.getknownUUIDs().iterator().next();
+            }
+
+            UUID clientToken = UUID.randomUUID();
+            if (data.has("clientToken")) {
+                clientToken = jsonDeserializationContext.deserialize(data.get("clientToken"), UUID.class);
+            }
+            return new AccountsDatabase(database, selectedUser, clientToken);
+        }
+
+        @Override
+        public JsonElement serialize(AccountsDatabase accountDatabase, Type type, JsonSerializationContext jsonSerializationContext) {
+            JsonObject data = new JsonObject();
+            data.add("selectedUser", jsonSerializationContext.serialize(accountDatabase.selectedUser));
+            data.add("clientToken", jsonSerializationContext.serialize(accountDatabase.clientToken));
+            data.add("authenticationDatabase", jsonSerializationContext.serialize(accountDatabase.authenticationDatabase));
+            return data;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
index a9aeefa..f951bb2 100644
--- a/src/main/java/net/minecraft/launcher/Launcher.java
+++ b/src/main/java/net/minecraft/launcher/Launcher.java
@@ -9,6 +9,7 @@ import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.exceptions.InvalidCredentialsException;
 import com.mojang.launcher.OperatingSystem;
 import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.VersionManager;
 import com.mojang.launcher.updater.VersionSyncInfo;
 import com.mojang.launcher.updater.download.assets.AssetIndex;
 import com.mojang.launcher.versions.CompleteVersion;
@@ -20,6 +21,9 @@ import java.io.IOException;
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -30,6 +34,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.UUID;
+import java.util.stream.Stream;
 import javax.swing.JFrame;
 
 import dev.figboot.olauncher.OLauncherConstants;
@@ -112,7 +117,7 @@ public class Launcher {
             LOGGER.info("System.getProperty('sun.arch.data.model') == '" + System.getProperty("sun.arch.data.model") + "'");
             LOGGER.info("proxy == " + var3);
             this.launchDispatcher = new GameLaunchDispatcher(this, this.processArgs(var5));
-            this.launcher = new com.mojang.launcher.Launcher(this.userInterface, var2, var3, var4, new MinecraftVersionManager(new LocalVersionList(var2), new RemoteVersionList(LauncherConstants.PROPERTIES.getVersionManifest(), var3)), Agent.MINECRAFT, MinecraftReleaseTypeFactory.instance(), 21);
+            this.launcher = new com.mojang.launcher.Launcher(this.userInterface, var2, var3, var4, new MinecraftVersionManager(new LocalVersionList(var2), new RemoteVersionList(LauncherConstants.PROPERTIES.getVersionManifest(), var3, this)), Agent.MINECRAFT, MinecraftReleaseTypeFactory.instance(), 21);
             this.profileManager = new ProfileManager(this);
             ((SwingUserInterface)this.userInterface).initializeFrame();
             refreshJavaRuntimes(); // olauncher - refresh java runtimes
@@ -317,57 +322,39 @@ public class Launcher {
         File var1 = new File(this.getLauncher().getWorkingDirectory(), "assets");
         File var2 = new File(var1, "indexes");
         File var3 = new File(var1, "objects");
-        HashSet var4 = Sets.newHashSet();
+        // olauncher start - simplify cleanup and prevent errors.
         if (var3.isDirectory()) {
-            Iterator var5 = this.getLauncher().getVersionManager().getInstalledVersions().iterator();
-
-            while(true) {
-                VersionSyncInfo var6;
-                File var9;
-                do {
-                    if (!var5.hasNext()) {
-                        File[] var15 = var3.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
-                        if (var15 != null) {
-                            File[] var16 = var15;
-                            int var17 = var15.length;
-
-                            for(int var18 = 0; var18 < var17; ++var18) {
-                                var9 = var16[var18];
-                                File[] var19 = var9.listFiles((FileFilter)FileFileFilter.FILE); // olauncher - cast to FileFilter
-                                if (var19 != null) {
-                                    File[] var20 = var19;
-                                    int var21 = var19.length;
-
-                                    for(int var13 = 0; var13 < var21; ++var13) {
-                                        File var14 = var20[var13];
-                                        if (!var4.contains(var14.getName().toLowerCase())) {
-                                            LOGGER.info("Cleaning up orphaned object {}", new Object[]{var14.getName()});
-                                            FileUtils.deleteQuietly(var14);
-                                        }
-                                    }
-                                }
-                            }
-                        }
-
-                        deleteEmptyDirectories(var3);
-                        return;
-                    }
-
-                    var6 = (VersionSyncInfo)var5.next();
-                } while(!(var6.getLocalVersion() instanceof CompleteMinecraftVersion));
-
-                CompleteMinecraftVersion var7 = (CompleteMinecraftVersion)var6.getLocalVersion();
-                String var8 = var7.getAssetIndex().getId();
-                var9 = new File(var2, var8 + ".json");
-                AssetIndex var10 = (AssetIndex)this.gson.fromJson(FileUtils.readFileToString(var9, Charsets.UTF_8), AssetIndex.class);
-                Iterator var11 = var10.getUniqueObjects().keySet().iterator();
-
-                while(var11.hasNext()) {
-                    AssetIndex.AssetObject var12 = (AssetIndex.AssetObject)var11.next();
-                    var4.add(var12.getHash().toLowerCase());
+            LOGGER.info("Looking for orphaned assets to clean up...");
+            HashSet<String> existing = new HashSet<>();
+            for (VersionSyncInfo versionSyncInfo : this.launcher.getVersionManager().getInstalledVersions()) {
+                if (!(versionSyncInfo.getLocalVersion() instanceof CompleteMinecraftVersion)) {
+                    continue;
                 }
+                CompleteMinecraftVersion version = (CompleteMinecraftVersion) versionSyncInfo.getLocalVersion();
+                String id = version.getAssetIndex().getId();
+                File versionIndex = new File(var2, id + ".json");
+                if (!versionIndex.exists()) { // Prevent FileNotFoundException for indexes that isn't downloaded
+                    continue;
+                }
+                AssetIndex assetIndex = this.gson.fromJson(FileUtils.readFileToString(versionIndex, StandardCharsets.UTF_8), AssetIndex.class);
+                for (AssetIndex.AssetObject assetObject : assetIndex.getUniqueObjects().keySet()) {
+                    existing.add(assetObject.getHash().toLowerCase());
+                }
+            }
+            try (Stream<Path> paths = Files.walk(var3.toPath())) {
+                paths.filter(Files::isRegularFile).forEach(path -> {
+                    File file = path.toFile();
+                    if (!existing.contains(file.getName())) {
+                        LOGGER.info("Cleaning up orphaned assets " + file.getName() );
+                        FileUtils.deleteQuietly(file);
+                    }
+                });
+            }catch (Exception e){
+                LOGGER.warn("Error looking orphaned assets: ", e.getMessage());
             }
+            deleteEmptyDirectories(var3);
         }
+        // olauncher end
     }
 
     public void cleanupOrphanedLibraries() throws IOException {
@@ -477,28 +464,16 @@ public class Launcher {
     }
 
     public void cleanupOldNatives() {
-        File var1 = new File(this.launcher.getWorkingDirectory(), "versions/");
-        LOGGER.info("Looking for old natives & assets to clean up...");
-        AgeFileFilter var2 = new AgeFileFilter(System.currentTimeMillis() - 3600000L);
-        if (var1.isDirectory()) {
-            File[] var3 = var1.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
-            if (var3 != null) {
-                File[] var4 = var3;
-                int var5 = var3.length;
-
-                for(int var6 = 0; var6 < var5; ++var6) {
-                    File var7 = var4[var6];
-                    File[] var8 = var7.listFiles((FileFilter)FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2})); // olauncher - cast to FileFilter
-                    if (var8 != null) {
-                        File[] var9 = var8;
-                        int var10 = var8.length;
-
-                        for(int var11 = 0; var11 < var10; ++var11) {
-                            File var12 = var9[var11];
-                            LOGGER.debug("Deleting " + var12);
-                            FileUtils.deleteQuietly(var12);
-                        }
-                    }
+        // olauncher start - move natives into bin and simplify clean up process
+        File natives = new File(this.launcher.getWorkingDirectory(), "bin/");
+        LOGGER.info("Looking for old natives to clean up...");
+        if (natives.isDirectory()) {
+            AgeFileFilter old = new AgeFileFilter(System.currentTimeMillis() - 86400000L); // olauncher - Old Files from 24hrs/one day ago
+            File[] files = natives.listFiles((FileFilter) FileFilterUtils.and(DirectoryFileFilter.DIRECTORY, old));
+            if (files != null) {
+                for (File file : files) {
+                    FileUtils.deleteQuietly(file);
+                    LOGGER.info("Cleaning up old natives " + file.getName());
                 }
             }
 
@@ -511,16 +486,17 @@ public class Launcher {
         Iterator var2 = this.getProfileManager().getProfiles().values().iterator();
 
         VersionSyncInfo var5;
+        VersionManager versionManager = this.getLauncher().getVersionManager();
         while(var2.hasNext()) {
             Profile var3 = (Profile)var2.next();
             String var4 = var3.getLastVersionId();
             var5 = null;
             if (var4 != null) {
-                var5 = this.getLauncher().getVersionManager().getVersionSyncInfo(var4);
+                var5 = versionManager.getVersionSyncInfo(var4);
             }
 
             if (var5 == null || var5.getLatestVersion() == null) {
-                var5 = (VersionSyncInfo)this.getLauncher().getVersionManager().getVersions(var3.getVersionFilter()).get(0);
+                var5 = versionManager.getVersions().get(0);  // olauncher - use moved version filter
             }
 
             if (var5 != null) {
@@ -537,7 +513,7 @@ public class Launcher {
         Calendar var10 = Calendar.getInstance();
         var10.add(5, -7);
         Date var11 = var10.getTime();
-        Iterator var12 = this.getLauncher().getVersionManager().getInstalledVersions().iterator();
+        Iterator var12 = versionManager.getInstalledVersions().iterator();
 
         while(var12.hasNext()) {
             var5 = (VersionSyncInfo)var12.next();
@@ -548,7 +524,7 @@ public class Launcher {
                         LOGGER.info("Deleting orphaned version {} because it's a snapshot available on remote", new Object[]{var13.getId()});
 
                         try {
-                            this.getLauncher().getVersionManager().uninstallVersion(var13);
+                            versionManager.uninstallVersion(var13);
                         } catch (IOException var8) {
                             LOGGER.warn("Couldn't uninstall version " + var13.getId(), var8);
                         }
@@ -556,7 +532,7 @@ public class Launcher {
                         LOGGER.info("Deleting orphaned version {} because it's an unsupported old snapshot", new Object[]{var13.getId()});
 
                         try {
-                            this.getLauncher().getVersionManager().uninstallVersion(var13);
+                            versionManager.uninstallVersion(var13);
                         } catch (IOException var9) {
                             LOGGER.warn("Couldn't uninstall version " + var13.getId(), var9);
                         }
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 6436333..099cba2 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -44,9 +44,11 @@ import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
+import java.util.Arrays;
 
 import dev.figboot.olauncher.auth.MicrosoftUserAuthentication;
 import dev.figboot.olauncher.launcher.runtime.RuntimesManifest;
+import dev.figboot.olauncher.util.UUIDGenerator;
 import net.minecraft.launcher.CompatibilityRule;
 import net.minecraft.launcher.CurrentLaunchFeatureMatcher;
 import net.minecraft.launcher.Launcher;
@@ -86,15 +88,12 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
         synchronized(this.lock) {
             if (this.nativeDir != null && var1 == GameInstanceStatus.IDLE) {
                 LOGGER.info("Deleting " + this.nativeDir);
-                if (this.nativeDir.isDirectory() && !FileUtils.deleteQuietly(this.nativeDir)) {
-                    LOGGER.warn("Couldn't delete " + this.nativeDir + " - scheduling for deletion upon exit");
-
+                if (this.nativeDir.isDirectory()) {
                     try {
-                        FileUtils.forceDeleteOnExit(this.nativeDir);
-                    } catch (Throwable var5) {
+                        FileUtils.forceDeleteOnExit(this.nativeDir); // olauncher - prevent unnecessary attempts at deleting natives
+                    } catch (IOException e) {
+                        LOGGER.warn("Couldn't delete " + this.nativeDir, e);
                     }
-                } else {
-                    this.nativeDir = null;
                 }
             }
 
@@ -118,7 +117,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
         if (this.getVersion() == null) {
             LOGGER.error("Aborting launch; version is null?");
         } else {
-            this.nativeDir = new File(this.getLauncher().getWorkingDirectory(), "versions/" + this.getVersion().getId() + "/" + this.getVersion().getId() + "-natives-" + System.nanoTime());
+            this.nativeDir = new File(this.getLauncher().getWorkingDirectory(), "bin/" + UUIDGenerator.generate());
             if (!this.nativeDir.isDirectory()) {
                 this.nativeDir.mkdirs();
             }
@@ -175,7 +174,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
             var4.withLogProcessor(this.minecraftLauncher.getUserInterface().showGameOutputTab(this));
             String var5 = this.selectedProfile.getJavaArgs();
             if (var5 != null) {
-                var4.withArguments(var5.split(" "));
+                var4.withArguments(Arrays.stream(var5.split(" ")).filter(string -> !string.isEmpty()).toArray(String[]::new)); // olauncher - empty items equal to error finding main class
             } else {
                 boolean var6 = "32".equals(System.getProperty("sun.arch.data.model"));
                 String var7 = var6 ? Profile.DEFAULT_JRE_ARGUMENTS_32BIT : Profile.DEFAULT_JRE_ARGUMENTS_64BIT; // olauncher - use default JVM argument variables
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
index df55cae..9c4c3f0 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftReleaseType.java
@@ -11,6 +11,7 @@ public enum MinecraftReleaseType implements ReleaseType {
     OLD_BETA("old_beta", "Allow use of old \"Beta\" Minecraft versions (From 2010-2011)"),
     OLD_ALPHA("old_alpha", "Allow use of old \"Alpha\" Minecraft versions (From 2010)");
 
+    private static final String POPUP_CUSTOM_VERSIONS = "Are you sure you want to enable custom versions?\nThey are modified and are not guaranteed to be safe.\n";
     private static final String POPUP_DEV_VERSIONS = "Are you sure you want to enable development builds?\nThey are not guaranteed to be stable and may corrupt your world.\nYou are advised to run this in a separate directory or run regular backups.";
     private static final String POPUP_OLD_VERSIONS = "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!";
     private static final Map<String, MinecraftReleaseType> LOOKUP = Maps.newHashMap();
@@ -33,12 +34,14 @@ public enum MinecraftReleaseType implements ReleaseType {
     public String getPopupWarning() {
         if (this.description == null) {
             return null;
+        } else if (this == CUSTOM) {
+            return POPUP_CUSTOM_VERSIONS;
         } else if (this == SNAPSHOT) {
-            return "Are you sure you want to enable development builds?\nThey are not guaranteed to be stable and may corrupt your world.\nYou are advised to run this in a separate directory or run regular backups.";
+            return POPUP_DEV_VERSIONS; // olauncher - proper use of variables
         } else if (this == OLD_BETA) {
-            return "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!";
+            return POPUP_OLD_VERSIONS; // olauncher - proper use of variables
         } else {
-            return this == OLD_ALPHA ? "These versions are very out of date and may be unstable. Any bugs, crashes, missing features or\nother nasties you may find will never be fixed in these versions.\nIt is strongly recommended you play these in separate directories to avoid corruption.\nWe are not responsible for the damage to your nostalgia or your save files!" : null;
+            return this == OLD_ALPHA ? POPUP_OLD_VERSIONS : null; // olauncher - proper use of variables
         }
     }
 
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index 9141d27..78a18aa 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -15,6 +15,7 @@ public class Profile implements Comparable<Profile> {
     public static final String DEFAULT_JRE_ARGUMENTS_32BIT = "-Xmx2G -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:G1NewSizePercent=20 -XX:G1ReservePercent=20 -XX:MaxGCPauseMillis=50 -XX:G1HeapRegionSize=32M";
     public static final Profile.Resolution DEFAULT_RESOLUTION = new Profile.Resolution(854, 480);
     public static final LauncherVisibilityRule DEFAULT_LAUNCHER_VISIBILITY;
+    @Deprecated
     public static final Set<MinecraftReleaseType> DEFAULT_RELEASE_TYPES;
     private transient String uniqueName;
     private String name;
@@ -23,6 +24,7 @@ public class Profile implements Comparable<Profile> {
     private String javaDir;
     private String javaArgs;
     private Profile.Resolution resolution;
+    @Deprecated
     private Set<MinecraftReleaseType> allowedReleaseTypes;
     private String playerUUID;
     private Boolean useHopperCrashService;
@@ -108,11 +110,11 @@ public class Profile implements Comparable<Profile> {
     public void setPlayerUUID(String var1) {
         this.playerUUID = var1;
     }
-
+    @Deprecated
     public Set<MinecraftReleaseType> getAllowedReleaseTypes() {
         return this.allowedReleaseTypes;
     }
-
+    @Deprecated
     public void setAllowedReleaseTypes(Set<MinecraftReleaseType> var1) {
         this.allowedReleaseTypes = var1;
     }
diff --git a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
index 1cb9c2b..371c3d6 100644
--- a/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
+++ b/src/main/java/net/minecraft/launcher/profile/ProfileManager.java
@@ -16,6 +16,7 @@ import com.google.gson.JsonSerializer;
 import com.google.gson.reflect.TypeToken;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.launcher.updater.DateTypeAdapter;
+import com.mojang.launcher.updater.VersionManager;
 import com.mojang.launcher.updater.FileTypeAdapter;
 import com.mojang.launcher.updater.LowerCaseEnumTypeAdapterFactory;
 import java.io.File;
@@ -30,11 +31,16 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.UUID;
+import java.util.HashSet;
 
 import dev.figboot.olauncher.auth.MicrosoftAuthenticationService;
+import dev.figboot.olauncher.launcher.profile.AccountsDatabase;
 import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.LauncherConstants;
+import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.updater.MinecraftVersionManager;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -46,6 +52,7 @@ public class ProfileManager {
     private final Gson gson;
     private final Map<String, Profile> profiles = new HashMap();
     private final File profileFile;
+    private final File accountsFile;
     private final List<RefreshedProfilesListener> refreshedProfilesListeners = Collections.synchronizedList(new ArrayList());
     private final List<UserChangedListener> userChangedListeners = Collections.synchronizedList(new ArrayList());
     private String selectedProfile;
@@ -57,10 +64,12 @@ public class ProfileManager {
     public ProfileManager(Launcher var1) {
         this.launcher = var1;
         this.profileFile = new File(var1.getLauncher().getWorkingDirectory(), "launcher_profiles.json");
+        this.accountsFile = new File(var1.getLauncher().getWorkingDirectory(), "launcher_accounts.json");
         GsonBuilder var2 = new GsonBuilder();
         var2.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
         var2.registerTypeAdapter(Date.class, new DateTypeAdapter());
         var2.registerTypeAdapter(File.class, new FileTypeAdapter());
+        var2.registerTypeAdapter(AccountsDatabase.class, new AccountsDatabase.Serializer(var1)); // olauncher - register accounts serializer
         var2.registerTypeAdapter(AuthenticationDatabase.class, new AuthenticationDatabase.Serializer(var1));
         var2.registerTypeAdapter(ProfileManager.RawProfileList.class, new ProfileManager.RawProfileList.Serializer(var1));
         var2.setPrettyPrinting();
@@ -69,56 +78,84 @@ public class ProfileManager {
     }
 
     public void saveProfiles() throws IOException {
-        ProfileManager.RawProfileList var1 = new ProfileManager.RawProfileList(this.profiles, this.getSelectedProfile().getUniqueName(), this.selectedUser, this.launcher.getClientToken(), this.authDatabase);
+        ProfileManager.RawProfileList var1 = new ProfileManager.RawProfileList(this.profiles, this.getSelectedProfile().getUniqueName());
         FileUtils.writeStringToFile(this.profileFile, this.gson.toJson(var1));
+        AccountsDatabase accountsDatabase = new AccountsDatabase(this.authDatabase,this.selectedUser, this.launcher.getClientToken());
+        FileUtils.writeStringToFile(this.accountsFile, this.gson.toJson(accountsDatabase));
     }
 
     public boolean loadProfiles() throws IOException {
         this.profiles.clear();
         this.selectedProfile = null;
         this.selectedUser = null;
+        if (this.accountsFile.isFile()){
+            JsonElement accountsDataElement = this.parser.parse(FileUtils.readFileToString(this.accountsFile));
+            if (accountsDataElement!=null){
+                JsonObject accountsData = accountsDataElement.getAsJsonObject();
+                AccountsDatabase accountsDatabase = this.gson.fromJson(accountsData, AccountsDatabase.class);
+                if (accountsDatabase.clientToken != null) {
+                    this.launcher.setClientToken((UUID)this.gson.fromJson(accountsData.get("clientToken"), UUID.class));
+                }
+                this.selectedUser = accountsDatabase.selectedUser;
+                this.authDatabase = accountsDatabase.authenticationDatabase;
+            }
+
+        }
         if (this.profileFile.isFile()) {
-            JsonObject var1 = this.parser.parse(FileUtils.readFileToString(this.profileFile)).getAsJsonObject();
-            // olauncher start - creates backups for profiles
-            Files.copy(this.profileFile.toPath(),  new File(this.profileFile.getParentFile(), "launcher_profiles.old.json").toPath(), StandardCopyOption.REPLACE_EXISTING);
-            // olauncher end
+            JsonElement profileDataElement = this.parser.parse(FileUtils.readFileToString(this.profileFile));
+            if (profileDataElement!=null) {
+                JsonObject var1 = profileDataElement.getAsJsonObject();
 
-            if (var1.has("clientToken")) {
-                this.launcher.setClientToken((UUID)this.gson.fromJson(var1.get("clientToken"), UUID.class));
-            }
 
-            ProfileManager.RawProfileList var4 = (ProfileManager.RawProfileList)this.gson.fromJson(var1, ProfileManager.RawProfileList.class);
-
-            // olauncher start - migrate profiles correctly
-            var4.profiles.replaceAll((key, value) ->{
-                value.setUniqueName(key);
-                String name = value.getName();
-                if (name.isEmpty()) {
-                    // Fallback use last version ID
-                    name = value.getLastVersionId();
-                    if (name.equals("latest-release")) {
-                        name = "Latest Version";
-                    }
-                    value.setName(name);
+                // olauncher start - creates backups for profiles
+                Files.copy(this.profileFile.toPath(), new File(this.profileFile.getParentFile(), "launcher_profiles.old.json").toPath(), StandardCopyOption.REPLACE_EXISTING);
+                // olauncher end
+                if (var1.has("authenticationDatabase") && authDatabase == null) {
+                    this.authDatabase = this.gson.fromJson(var1.get("authenticationDatabase"), AuthenticationDatabase.class);
+                }
+                if (var1.has("selectedUser")) {
+                    this.selectedUser = var1.getAsJsonPrimitive("selectedUser").getAsString();
+                }
+                if (var1.has("clientToken")) {
+                    this.launcher.setClientToken((UUID) this.gson.fromJson(var1.get("clientToken"), UUID.class));
                 }
-                LOGGER.info("Loaded profile " + name);
-                return value;
-            });
 
-            // olauncher end
+                ProfileManager.RawProfileList var4 = (ProfileManager.RawProfileList) this.gson.fromJson(var1, ProfileManager.RawProfileList.class);
+
+                // olauncher start - migrate profiles correctly
+                var4.profiles.replaceAll((key, value) -> {
+                    value.setUniqueName(key);
+                    String name = value.getName();
+                    if (name.isEmpty()) {
+                        // Fallback use last version ID
+                        name = value.getLastVersionId();
+                        // Make sure last version ID is set
+                        if (name == null) {
+                            value.setLastVersionId("latest-version");
+                        }
+                        if (name.equals("latest-release")) {
+                            name = "Latest Version";
+                        } else if (name.equals("latest-snapshot")) {
+                            name = "Latest Snapshot";
+                        }
+                        value.setName(name);
+                    }
+                    LOGGER.info("Loaded profile " + name);
+                    return value;
+                });
 
-            this.profiles.putAll(var4.profiles);
-            this.selectedProfile = var4.selectedProfile;
-            this.selectedUser = var4.selectedUser;
-            this.authDatabase = var4.authenticationDatabase;
-            this.fireRefreshEvent();
-            this.fireUserChangedEvent();
-            return true;
-        } else {
-            this.fireRefreshEvent();
-            this.fireUserChangedEvent();
-            return false;
+                // olauncher end
+
+                this.profiles.putAll(var4.profiles);
+                this.selectedProfile = var4.selectedProfile;
+                this.fireRefreshEvent();
+                this.fireUserChangedEvent();
+                return true;
+            }
         }
+        this.fireRefreshEvent();
+        this.fireUserChangedEvent();
+        return false;
     }
 
     public void fireRefreshEvent() {
@@ -151,6 +188,7 @@ public class ProfileManager {
                 this.selectedProfile = "(Default)";
                 Profile defaultProfile = new Profile("Default");
                 defaultProfile.setUniqueName(this.selectedProfile);
+                defaultProfile.setLastVersionId("latest-version");  // olauncher - no null version ID
                 this.profiles.put(this.selectedProfile, defaultProfile); // olauncher - name default profile instead of null
             }
         }
@@ -199,25 +237,10 @@ public class ProfileManager {
     private static class RawProfileList {
         public Map<String, Profile> profiles;
         public String selectedProfile;
-        public String selectedUser;
-        public UUID clientToken;
-        public AuthenticationDatabase authenticationDatabase;
-
-        private RawProfileList(Map<String, Profile> var1, String var2, String var3, UUID var4, AuthenticationDatabase var5) {
-            this.profiles = new HashMap();
-            this.clientToken = UUID.randomUUID();
+        private RawProfileList(Map<String, Profile> var1, String var2) {
             this.profiles = var1;
             this.selectedProfile = var2;
-            this.selectedUser = var3;
-            this.clientToken = var4;
-            this.authenticationDatabase = var5;
-        }
-
-        // $FF: synthetic method
-        RawProfileList(Map var1, String var2, String var3, UUID var4, AuthenticationDatabase var5, Object var6) {
-            this(var1, var2, var3, var4, var5);
         }
-
         public static class Serializer implements JsonDeserializer<ProfileManager.RawProfileList>, JsonSerializer<ProfileManager.RawProfileList> {
             private final Launcher launcher;
 
@@ -232,32 +255,32 @@ public class ProfileManager {
                     var5 = (Map)var3.deserialize(var4.get("profiles"), (new TypeToken<Map<String, Profile>>() {
                     }).getType());
                 }
+                // olauncher start - add settings deserialize
+                if (var4.has("settings")){
+                    JsonObject settings = var4.getAsJsonObject("settings");
+                    if (settings.isJsonObject()){ // just to be safe
+                        Set<MinecraftReleaseType> releaseTypes = new HashSet<>();
+                        releaseTypes.add(MinecraftReleaseType.RELEASE);
+                        // get version filters
+                        if (settings.getAsJsonObject().has("versionFilter")){
+                            JsonObject versionFilter =  settings.getAsJsonObject("versionFilter");
+                            for (String key: versionFilter.keySet()){
+                                if (versionFilter.get(key).getAsBoolean()){
+                                    releaseTypes.add(MinecraftReleaseType.getByName(key));
+                                }
+                            }
+                        }else {
+                            releaseTypes.add(MinecraftReleaseType.CUSTOM);
+                        }
+                        ((MinecraftVersionManager)this.launcher.getLauncher().getVersionManager()).setAllowedReleaseTypes(releaseTypes);
+                    }
+                }
+                // olauncher end
 
                 String var6 = null;
                 if (var4.has("selectedProfile")) {
                     var6 = var4.getAsJsonPrimitive("selectedProfile").getAsString();
                 }
-
-                UUID var7 = UUID.randomUUID();
-                if (var4.has("clientToken")) {
-                    var7 = (UUID)var3.deserialize(var4.get("clientToken"), UUID.class);
-                }
-
-                // olauncher - use new authentication service
-                AuthenticationDatabase var8 = new AuthenticationDatabase(new MicrosoftAuthenticationService(this.launcher.getLauncher().getProxy(), this.launcher.getClientToken().toString()));
-                if (var4.has("authenticationDatabase")) {
-                    var8 = (AuthenticationDatabase)var3.deserialize(var4.get("authenticationDatabase"), AuthenticationDatabase.class);
-                }
-
-                String var9 = null;
-                if (var4.has("selectedUser")) {
-                    var9 = var4.getAsJsonPrimitive("selectedUser").getAsString();
-                } else if (var6 != null && ((Map)var5).containsKey(var6) && ((Profile)((Map)var5).get(var6)).getPlayerUUID() != null) {
-                    var9 = ((Profile)((Map)var5).get(var6)).getPlayerUUID();
-                } else if (!var8.getknownUUIDs().isEmpty()) {
-                    var9 = (String)var8.getknownUUIDs().iterator().next();
-                }
-
                 Iterator var10 = ((Map)var5).values().iterator();
 
                 while(var10.hasNext()) {
@@ -265,10 +288,24 @@ public class ProfileManager {
                     var11.setPlayerUUID((String)null);
                 }
 
-                return new ProfileManager.RawProfileList((Map)var5, var6, var9, var7, var8);
+                return new ProfileManager.RawProfileList((Map)var5, var6);
             }
 
             public JsonElement serialize(ProfileManager.RawProfileList var1, Type var2, JsonSerializationContext var3) {
+                // olauncher start - add settings
+                JsonObject settings = new JsonObject();
+                // add version filters
+                JsonObject versionFilter = new JsonObject();
+                VersionManager versionManager = launcher.getLauncher().getVersionManager();
+                Set<MinecraftReleaseType> filter = versionManager.getVersionFilter().getTypes();
+                for (MinecraftReleaseType releaseType: MinecraftReleaseType.values()){
+                    if (releaseType == MinecraftReleaseType.RELEASE){
+                        continue;
+                    }
+                    versionFilter.addProperty(releaseType.getName(), filter.contains(releaseType));
+                }
+                settings.add("versionFilter", versionFilter);
+                // olauncher end
                 JsonObject var4 = new JsonObject();
                 var4.addProperty("name", LauncherConstants.getVersionName());
                 var4.addProperty("format", 21);
@@ -276,10 +313,8 @@ public class ProfileManager {
                 JsonObject var5 = new JsonObject();
                 var5.add("profiles", var3.serialize(var1.profiles));
                 var5.add("selectedProfile", var3.serialize(var1.selectedProfile));
-                var5.add("clientToken", var3.serialize(var1.clientToken));
-                var5.add("authenticationDatabase", var3.serialize(var1.authenticationDatabase));
-                var5.add("selectedUser", var3.serialize(var1.selectedUser));
                 var5.add("launcherVersion", var4);
+                var5.add("settings", settings);
                 return var5;
             }
         }
diff --git a/src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java b/src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
index 52528d1..b9023e9 100644
--- a/src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/bottombar/PlayerInfoPanel.java
@@ -73,6 +73,7 @@ public class PlayerInfoPanel extends JPanel implements RefreshedVersionsListener
 
     public void checkState() {
         ProfileManager var1 = this.minecraftLauncher.getProfileManager();
+        VersionManager versionManager = this.minecraftLauncher.getLauncher().getVersionManager();
         UserAuthentication var2 = var1.getSelectedUser() == null ? null : var1.getAuthDatabase().getByUUID(var1.getSelectedUser());
         if (var2 != null && var2.isLoggedIn()) {
             if (var2.getSelectedProfile() == null) {
@@ -85,10 +86,10 @@ public class PlayerInfoPanel extends JPanel implements RefreshedVersionsListener
         }
 
         Profile var3 = var1.getProfiles().isEmpty() ? null : var1.getSelectedProfile();
-        List var4 = var3 == null ? null : this.minecraftLauncher.getLauncher().getVersionManager().getVersions(var3.getVersionFilter());
+        List<VersionSyncInfo> var4 = var3 == null ? null : versionManager.getVersions();  // olauncher - use moved version filter, add type
         VersionSyncInfo var5 = var3 != null && !var4.isEmpty() ? (VersionSyncInfo)var4.get(0) : null;
         if (var3 != null && var3.getLastVersionId() != null) {
-            VersionSyncInfo var6 = this.minecraftLauncher.getLauncher().getVersionManager().getVersionSyncInfo(var3.getLastVersionId());
+            VersionSyncInfo var6 = versionManager.getVersionSyncInfo(var3.getLastVersionId());
             if (var6 != null && var6.getLatestVersion() != null) {
                 var5 = var6;
             }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
index eec04bd..30322e9 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/profile/ProfileVersionPanel.java
@@ -2,6 +2,7 @@ package net.minecraft.launcher.ui.popups.profile;
 
 import com.google.common.collect.Sets;
 import com.mojang.launcher.events.RefreshedVersionsListener;
+import com.mojang.launcher.updater.VersionFilter;
 import com.mojang.launcher.updater.VersionManager;
 import com.mojang.launcher.updater.VersionSyncInfo;
 import com.mojang.launcher.versions.Version;
@@ -12,9 +13,9 @@ import java.awt.Insets;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.EnumSet;
 import java.util.Set;
 import javax.swing.BorderFactory;
 import javax.swing.JCheckBox;
@@ -28,6 +29,7 @@ import javax.swing.plaf.basic.BasicComboBoxRenderer;
 import net.minecraft.launcher.SwingUserInterface;
 import net.minecraft.launcher.game.MinecraftReleaseType;
 import net.minecraft.launcher.profile.Profile;
+import net.minecraft.launcher.updater.MinecraftVersionManager;
 
 public class ProfileVersionPanel extends JPanel implements RefreshedVersionsListener {
     private final ProfileEditorPopup editor;
@@ -40,11 +42,12 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
         this.setBorder(BorderFactory.createTitledBorder("Version Selection"));
         this.createInterface();
         this.addEventHandlers();
-        List var2 = var1.getMinecraftLauncher().getLauncher().getVersionManager().getVersions(var1.getProfile().getVersionFilter());
+        VersionManager versionManager = var1.getMinecraftLauncher().getLauncher().getVersionManager();
+        List<VersionSyncInfo> var2 = versionManager.getVersions();  // olauncher - use moved version filter, include type
         if (var2.isEmpty()) {
-            var1.getMinecraftLauncher().getLauncher().getVersionManager().addRefreshedVersionsListener(this);
+            versionManager.addRefreshedVersionsListener(this);
         } else {
-            this.populateVersions(var2);
+            this.populateVersions((MinecraftVersionManager) versionManager);
         }
 
     }
@@ -61,7 +64,7 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
             MinecraftReleaseType var5 = var2[var4];
             if (var5.getDescription() != null) {
                 ProfileVersionPanel.ReleaseTypeCheckBox var6 = new ProfileVersionPanel.ReleaseTypeCheckBox(var5);
-                var6.setSelected(this.editor.getProfile().getVersionFilter().getTypes().contains(var5));
+                var6.setSelected(this.editor.getMinecraftLauncher().getLauncher().getVersionManager().getVersionFilter().getTypes().contains(var5));
                 this.customVersionTypes.add(var6);
                 var1.fill = 2;
                 var1.weightx = 1.0D;
@@ -122,8 +125,8 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
     }
 
     private void updateCustomVersionFilter() {
-        Profile var1 = this.editor.getProfile();
-        HashSet var2 = Sets.newHashSet(Profile.DEFAULT_RELEASE_TYPES);
+        MinecraftVersionManager versionManager = (MinecraftVersionManager) this.editor.getMinecraftLauncher().getLauncher().getVersionManager();
+        Set<MinecraftReleaseType> var2 = EnumSet.copyOf(versionManager.DEFAULT_RELEASE_TYPES); // olauncher - use variables
         Iterator var3 = this.customVersionTypes.iterator();
 
         while(var3.hasNext()) {
@@ -134,46 +137,58 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
                 var2.remove(var4.getType());
             }
         }
+        versionManager.setAllowedReleaseTypes(var2);
 
-        if (var2.equals(Profile.DEFAULT_RELEASE_TYPES)) {
-            var1.setAllowedReleaseTypes((Set)null);
-        } else {
-            var1.setAllowedReleaseTypes(var2);
-        }
-
-        this.populateVersions(this.editor.getMinecraftLauncher().getLauncher().getVersionManager().getVersions(this.editor.getProfile().getVersionFilter()));
-        this.editor.getMinecraftLauncher().getLauncher().getVersionManager().removeRefreshedVersionsListener(this);
+        this.populateVersions(versionManager);  // olauncher - use moved version filter
+        versionManager.removeRefreshedVersionsListener(this);
     }
 
     private void updateVersionSelection() {
         Object var1 = this.versionList.getSelectedItem();
+        Version var2;
         if (var1 instanceof VersionSyncInfo) {
-            Version var2 = ((VersionSyncInfo)var1).getLatestVersion();
+            var2 = ((VersionSyncInfo)var1).getLatestVersion();
             this.editor.getProfile().setLastVersionId(var2.getId());
-        } else {
-            this.editor.getProfile().setLastVersionId((String)null);
+        } else if (var1 instanceof Version){
+            var2 = (Version) var1;
+            this.editor.getProfile().setLastVersionId("latest-" + var2.getType().getName().toLowerCase());
         }
 
+
     }
 
-    private void populateVersions(List<VersionSyncInfo> var1) {
+    private void populateVersions(MinecraftVersionManager versionManager) { // olauncher - use version manager
+        List<VersionSyncInfo> versions = versionManager.getVersions(null); // olauncher - no filter
+        VersionFilter<MinecraftReleaseType> versionFilter = versionManager.getVersionFilter();
         String var2 = this.editor.getProfile().getLastVersionId();
         VersionSyncInfo var3 = null;
+        Version latest = null;
         this.versionList.removeAllItems();
-        this.versionList.addItem("Use Latest Version");
-
-        VersionSyncInfo var5;
-        for(Iterator var4 = var1.iterator(); var4.hasNext(); this.versionList.addItem(var5)) {
-            var5 = (VersionSyncInfo)var4.next();
-            if (var5.getLatestVersion().getId().equals(var2)) {
-                var3 = var5;
+        // olauncher - add latest snapshots
+        versionManager.getLatestVersions().forEach(((minecraftReleaseType, version) -> {
+            if (minecraftReleaseType == MinecraftReleaseType.RELEASE || (versionManager.getVersionFilter().getTypes().contains(MinecraftReleaseType.SNAPSHOT) && minecraftReleaseType == MinecraftReleaseType.SNAPSHOT)){
+                this.versionList.addItem(version);
+            }
+        }));
+        if (var2.startsWith("latest-")){
+            latest = versionManager.getLatestVersions().get(MinecraftReleaseType.getByName(var2.replace("latest-", "")));
+        }
+        for (VersionSyncInfo versionSyncInfo: versions){
+            if (versionSyncInfo.getLatestVersion().getId().equals(var2)){
+                var3 = versionSyncInfo;
+            }
+            if (versionFilter.getTypes().contains(versionSyncInfo.getLatestVersion().getType())){
+                this.versionList.addItem(versionSyncInfo);
             }
         }
 
-        if (var3 == null && !var1.isEmpty()) {
+        if (var3 == null && !versions.isEmpty() && latest == null) {
             this.versionList.setSelectedIndex(0);
-        } else {
-            this.versionList.setSelectedItem(var3);
+        }else if (latest !=null){
+            this.versionList.getModel().setSelectedItem(latest);
+        }
+        else {
+            this.versionList.getModel().setSelectedItem(var3);
         }
 
     }
@@ -181,8 +196,7 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
     public void onVersionsRefreshed(final VersionManager var1) {
         SwingUtilities.invokeLater(new Runnable() {
             public void run() {
-                List var1x = var1.getVersions(ProfileVersionPanel.this.editor.getProfile().getVersionFilter());
-                ProfileVersionPanel.this.populateVersions(var1x);
+                ProfileVersionPanel.this.populateVersions((MinecraftVersionManager) var1);
                 ProfileVersionPanel.this.editor.getMinecraftLauncher().getLauncher().getVersionManager().removeRefreshedVersionsListener(ProfileVersionPanel.this);
             }
         });
@@ -211,13 +225,17 @@ public class ProfileVersionPanel extends JPanel implements RefreshedVersionsList
         }
 
         public Component getListCellRendererComponent(JList var1, Object var2, int var3, boolean var4, boolean var5) {
+            Object text = var2;
             if (var2 instanceof VersionSyncInfo) {
                 VersionSyncInfo var6 = (VersionSyncInfo)var2;
                 Version var7 = var6.getLatestVersion();
-                var2 = String.format("%s %s", var7.getType().getName(), var7.getId());
+                text = String.format("%s %s", var7.getType() == MinecraftReleaseType.CUSTOM ? "release" : var7.getType().getName(), var7.getId());
+            }else if (var2 instanceof Version){ // olauncher - add latest snapshots
+                Version version = (Version) var2;
+                text = String.format("Latest %s (%s)", version.getType().getName(), version.getId());
             }
 
-            super.getListCellRendererComponent(var1, var2, var3, var4, var5);
+            super.getListCellRendererComponent(var1, text, var3, var4, var5);
             return this;
         }
 
diff --git a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
index a8801e6..77bb3a1 100644
--- a/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
+++ b/src/main/java/net/minecraft/launcher/updater/MinecraftVersionManager.java
@@ -33,11 +33,15 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Objects;
+import java.util.EnumSet;
+import java.util.Map;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
 import net.minecraft.launcher.LauncherConstants;
 import net.minecraft.launcher.game.MinecraftReleaseType;
+import net.minecraft.launcher.game.MinecraftReleaseTypeFactory;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
@@ -52,6 +56,8 @@ public class MinecraftVersionManager implements VersionManager {
     private final Object refreshLock;
     private boolean isRefreshing;
     private final Gson gson;
+    private Set<MinecraftReleaseType> allowedReleaseTypes; // olauncher - move allowed release types
+    public Set<MinecraftReleaseType> DEFAULT_RELEASE_TYPES = EnumSet.of(MinecraftReleaseType.RELEASE, MinecraftReleaseType.CUSTOM); // olauncher - move default release type
 
     public MinecraftVersionManager(VersionList var1, VersionList var2) {
         this.executorService = new ExceptionalThreadPoolExecutor(4, 8, 30L, TimeUnit.SECONDS);
@@ -73,8 +79,13 @@ public class MinecraftVersionManager implements VersionManager {
             LOGGER.info("Refreshing remote version list...");
             this.remoteVersionList.refreshVersions();
 
-            // olauncher start - verify integrity
-
+            // olauncher start - lazy custom type finder, TODO: integrity check
+            this.localVersionList.versions.replaceAll((version)->{
+                if (!this.remoteVersionList.versionsByName.containsKey(version.getId())){
+                    ((CompleteMinecraftVersion)version).setType(MinecraftReleaseType.CUSTOM);
+                }
+                return version;
+            });
             // olauncher end
         } catch (IOException var7) {
             synchronized(this.refreshLock) {
@@ -99,7 +110,7 @@ public class MinecraftVersionManager implements VersionManager {
     }
 
     public List<VersionSyncInfo> getVersions() {
-        return this.getVersions((VersionFilter)null);
+        return this.getVersions(getVersionFilter());
     }
 
     public List<VersionSyncInfo> getVersions(VersionFilter<? extends ReleaseType> var1) {
@@ -197,6 +208,17 @@ public class MinecraftVersionManager implements VersionManager {
     }
 
     public VersionSyncInfo getVersionSyncInfo(String var1) {
+        if (var1.startsWith("latest-")){
+            MinecraftReleaseType type = MinecraftReleaseType.getByName(var1.replace("latest-", ""));
+            Version remote = this.remoteVersionList.getLatestVersion(type);
+            Version local = this.localVersionList.getLatestVersion(type);
+            if (remote != null){
+                if (!Objects.equals(remote, local)){
+                    local = null;
+                }
+            }
+            return this.getVersionSyncInfo(local, remote);
+        }
         return this.getVersionSyncInfo(this.localVersionList.getVersion(var1), this.remoteVersionList.getVersion(var1));
     }
 
@@ -395,4 +417,27 @@ public class MinecraftVersionManager implements VersionManager {
         }
 
     }
+
+    @Override
+    public VersionFilter<MinecraftReleaseType> getVersionFilter() {
+        VersionFilter<MinecraftReleaseType> versionFilter = new VersionFilter(MinecraftReleaseTypeFactory.instance()).setMaxCount(Integer.MAX_VALUE);
+        if (this.allowedReleaseTypes == null) {
+            versionFilter.onlyForTypes(DEFAULT_RELEASE_TYPES.toArray(new MinecraftReleaseType[0]));
+        } else {
+            versionFilter.onlyForTypes(this.allowedReleaseTypes.toArray(new MinecraftReleaseType[0]));
+        }
+
+        return versionFilter;
+    }
+    public void setAllowedReleaseTypes(Set<MinecraftReleaseType> var1) {
+        this.allowedReleaseTypes = var1;
+    }
+    public Map<MinecraftReleaseType, Version> getLatestVersions(){
+
+        if (this.remoteVersionList.latestVersions.isEmpty()){
+            return this.localVersionList.latestVersions;
+        }
+        return this.remoteVersionList.latestVersions;
+    }
+
 }
diff --git a/src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java b/src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java
index 98350c7..9d07d80 100644
--- a/src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java
+++ b/src/main/java/net/minecraft/launcher/updater/RemoteVersionList.java
@@ -5,22 +5,30 @@ import com.mojang.launcher.Http;
 import com.mojang.launcher.OperatingSystem;
 import com.mojang.launcher.versions.CompleteVersion;
 import com.mojang.launcher.versions.Version;
+import java.io.File;
 import java.io.IOException;
 import java.net.Proxy;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import net.minecraft.launcher.Launcher;
 import net.minecraft.launcher.game.MinecraftReleaseType;
+import org.apache.commons.io.FileUtils;
 
 public class RemoteVersionList extends VersionList {
     private final URL manifestUrl;
     private final Proxy proxy;
+    private final Launcher launcher;
+    private File cached = null;
 
-    public RemoteVersionList(URL var1, Proxy var2) {
+
+    public RemoteVersionList(URL var1, Proxy var2, Launcher launcher) {
         this.manifestUrl = var1;
         this.proxy = var2;
+        this.launcher = launcher;
     }
 
     public CompleteMinecraftVersion getCompleteVersion(Version var1) throws IOException {
@@ -38,7 +46,18 @@ public class RemoteVersionList extends VersionList {
 
     public void refreshVersions() throws IOException {
         this.clearCache();
-        RemoteVersionList.RawVersionList var1 = (RemoteVersionList.RawVersionList)this.gson.fromJson(this.getContent(this.manifestUrl), RemoteVersionList.RawVersionList.class);
+        // olauncher start - cache version manifest allowing for offline use
+        RemoteVersionList.RawVersionList var1;
+        try {
+            var1 = this.gson.fromJson(this.getContent(this.manifestUrl), RawVersionList.class);
+        } catch (IOException e){
+            if (cached.exists()){
+                var1 = this.gson.fromJson(FileUtils.readFileToString(cached, StandardCharsets.UTF_8), RawVersionList.class);
+            }else {
+                var1 = new RawVersionList(); // empty
+            }
+        }
+        // olauncher end
         Iterator var2 = var1.getVersions().iterator();
 
         while(var2.hasNext()) {
@@ -47,12 +66,15 @@ public class RemoteVersionList extends VersionList {
             this.versionsByName.put(var3.getId(), var3);
         }
 
-        MinecraftReleaseType[] var6 = MinecraftReleaseType.values();
-        int var7 = var6.length;
+        MinecraftReleaseType[] var6 = new MinecraftReleaseType[]{MinecraftReleaseType.RELEASE, MinecraftReleaseType.SNAPSHOT}; // olauncher - Target snapshots and releases
 
-        for(int var4 = 0; var4 < var7; ++var4) {
-            MinecraftReleaseType var5 = var6[var4];
-            this.latestVersions.put(var5, this.versionsByName.get(var1.getLatestVersions().get(var5)));
+        for (MinecraftReleaseType var5 : var6) {
+            PartialVersion partialVersion = (PartialVersion) this.versionsByName.get(var1.getLatestVersions().get(var5));
+            if (partialVersion == null){
+                return;
+            }
+            partialVersion.setType(var5);
+            this.latestVersions.put(var5, partialVersion);
         }
 
     }
@@ -62,7 +84,16 @@ public class RemoteVersionList extends VersionList {
     }
 
     public String getContent(URL var1) throws IOException {
-        return Http.performGet(var1, this.proxy);
+        String data = Http.performGet(var1, this.proxy);
+        if (cached == null){
+            cached = new File(launcher.getLauncher().getWorkingDirectory(), "caches/version_manifest_v2.json");
+        }
+        if (!cached.exists()){
+            cached.getParentFile().mkdirs();
+        }
+        FileUtils.writeStringToFile(cached, data, StandardCharsets.UTF_8);
+
+        return data;
     }
 
     public Proxy getProxy() {
-- 
2.43.0.windows.1

From b19218329cc4e00ac34b2f127c878f901265dce3 Mon Sep 17 00:00:00 2001
From: vops <admin@vops.cc>
Date: Tue, 11 Jun 2024 18:25:41 -0400
Subject: [PATCH 32/33] Implement-demo-profiles

---
 .../figboot/olauncher/auth/MCProfileInfo.java | 11 +++++-
 .../auth/MicrosoftUserAuthentication.java     | 38 ++++++++++++-------
 2 files changed, 34 insertions(+), 15 deletions(-)

diff --git a/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java b/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
index b9a8ab6..84b0625 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MCProfileInfo.java
@@ -18,8 +18,10 @@
 
 package dev.figboot.olauncher.auth;
 
+import lombok.AllArgsConstructor;
 import lombok.Getter;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
@@ -27,11 +29,16 @@ import java.util.UUID;
 public class MCProfileInfo {
     private UUID id;
     private String name;
-
     private List<Skin> skins;
-
     private List<Cape> capes;
 
+    public MCProfileInfo(UUID id, String name) {
+        this.id = id;
+        this.name = name;
+        this.skins = new ArrayList<>();
+        this.capes = new ArrayList<>();
+    }
+
     @Getter
     public static class Skin {
         private UUID id;
diff --git a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
index 2486d77..e0b2d72 100644
--- a/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
+++ b/src/main/java/dev/figboot/olauncher/auth/MicrosoftUserAuthentication.java
@@ -267,13 +267,16 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
     private void profileLogIn() throws AuthenticationException {
         if (this.xuid == null) findXUID();
 
-        if (!ownsGame()) {
-            throw new AuthenticationException("No Minecraft entitlement! Do you own the game?");
-        }
-
         LOGGER.debug("Getting your user profile...");
-        profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE,
-                mojToken, MCProfileInfo.class);
+
+        boolean isDemo = !ownsGame();
+
+        if (isDemo) {
+            LOGGER.debug("No Minecraft entitlement! Utilizing demo profile...");
+            profileInfo = new MCProfileInfo(xuid, "Player");
+        } else {
+            profileInfo = getAuthenticationService().getAuthenticated(MicrosoftAuthenticationService.ROUTE_MINECRAFT_PROFILE, mojToken, MCProfileInfo.class);
+        }
 
         if (false) { // this code should be unnecessary now -figboot
         while (profileInfo.getId() == null) {
@@ -290,15 +293,24 @@ public class MicrosoftUserAuthentication extends HttpUserAuthentication {
         }
         }
 
-        GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
-        profile = sessionService.fillProfileProperties(profile, false);
+        String userId = profileInfo.getId().toString().replace("-", "");
+
+        if (isDemo) {
+            setSelectedProfile(null);
+            profiles = new GameProfile[0];
+            // demo profiles use XUID, which are usually padded with lots of zeros
+            userId = userId.replaceFirst("^0+(?!$)", "");
+        } else {
+            GameProfile profile = new GameProfile(profileInfo.getId(), profileInfo.getName());
+            profile = sessionService.fillProfileProperties(profile, false);
+            setSelectedProfile(profile);
+            getModifiableUserProperties().clear();
+            getModifiableUserProperties().putAll(profile.getProperties());
+            profiles = new GameProfile[]{profile};
+        }
 
         online = true;
-        setUserid(profileInfo.getId().toString().replace("-", ""));
-        profiles = new GameProfile[]{profile};
-        setSelectedProfile(profile);
-        getModifiableUserProperties().clear();
-        getModifiableUserProperties().putAll(profile.getProperties());
+        setUserid(userId);
         setUserType(UserType.MICROSOFT);
 
         /*try {
-- 
2.43.0.windows.1

From 1ec67877f1cfc74446de645f2c2ceadb511b4597 Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot3132@gmail.com>
Date: Wed, 12 Jun 2024 00:32:55 -0500
Subject: [PATCH 33/33] Show infinite loading screen less hopefully

---
 .../launcher/ui/popups/login/AuthErrorForm.java | 17 +++++++++++++----
 .../launcher/ui/popups/login/LogInForm.java     |  4 ++++
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
index 4bfa493..77d4259 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/AuthErrorForm.java
@@ -41,20 +41,29 @@ public class AuthErrorForm extends JPanel {
 
     public void displayError(final Throwable var1, final String... var2) {
         if (SwingUtilities.isEventDispatchThread()) {
-            String var3 = "";
             String[] var4 = var2;
             int var5 = var2.length;
+            StringBuilder sb = new StringBuilder();
 
             for(int var6 = 0; var6 < var5; ++var6) {
                 String var7 = var4[var6];
-                var3 = var3 + "<p>" + var7 + "</p>";
+                sb.append("<p>").append(var7).append("</p>");
             }
 
             if (var1 != null) {
-                var3 = var3 + "<p style='font-size: 0.9em; font-style: italic;'>(" + ExceptionUtils.getRootCauseMessage(var1) + ")</p>";
+                boolean first = true;
+                for (Throwable t : ExceptionUtils.getThrowableList(var1)) {
+                    sb.append("<p style='font-size: 0.9em; font-style: italic;'>(");
+                    if (!first) {
+                        sb.append("caused by ");
+                    }
+                    sb.append(ExceptionUtils.getMessage(t)).append(")</p>");
+
+                    first = false;
+                }
             }
 
-            this.errorLabel.setText("<html><div style='text-align: center;'>" + var3 + " </div></html>");
+            this.errorLabel.setText("<html><div style='text-align: center;'>" + sb + " </div></html>");
             if (!this.isVisible()) {
                 this.refreshStatuses();
             }
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
index e5af44f..b8c028a 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -205,6 +205,10 @@ public class LogInForm extends JPanel implements ActionListener {
                         LogInForm.LOGGER.error("Couldn't log in", var8);
                         LogInForm.this.popup.getErrorForm().displayError(var8, "Sorry, but we couldn't connect to our servers.", "Please make sure that you are online and that Minecraft is not blocked.");
                         LogInForm.this.popup.setCanLogIn(true);
+                    } catch (Throwable t) {
+                        LogInForm.LOGGER.error("Couldn't log in", t);
+                        LogInForm.this.popup.getErrorForm().displayError(t, "Sorry, but an unknown error occurred while logging in.", "Please report this issue to the developers.");
+                        LogInForm.this.popup.setCanLogIn(true);
                     }
 
                 }
-- 
2.43.0.windows.1

