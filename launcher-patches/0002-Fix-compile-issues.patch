From e2b0153c41a093277a22b5bf80e0838afd3b8d6f Mon Sep 17 00:00:00 2001
From: bigfoot547 <bigfoot@figboot.dev>
Date: Thu, 10 Mar 2022 02:35:36 -0600
Subject: [PATCH] Fix compile issues


diff --git a/src/main/java/com/mojang/authlib/properties/PropertyMap.java b/src/main/java/com/mojang/authlib/properties/PropertyMap.java
index 548a122..6a1e76a 100644
--- a/src/main/java/com/mojang/authlib/properties/PropertyMap.java
+++ b/src/main/java/com/mojang/authlib/properties/PropertyMap.java
@@ -33,19 +33,19 @@ public class PropertyMap extends ForwardingMultimap<String, Property> {
             PropertyMap var4 = new PropertyMap();
             if (var1 instanceof JsonObject) {
                 JsonObject var5 = (JsonObject)var1;
-                Iterator var6 = var5.entrySet().iterator();
+                Iterator<Entry<String, JsonElement>> var6 = var5.entrySet().iterator(); // olauncher - fix generic
 
                 while(true) {
-                    Entry var7;
+                    Entry<String, JsonElement> var7; // olauncher - fix generic
                     do {
                         if (!var6.hasNext()) {
                             return var4;
                         }
 
-                        var7 = (Entry)var6.next();
+                        var7 = var6.next(); // olauncher - remove cast
                     } while(!(var7.getValue() instanceof JsonArray));
 
-                    Iterator var8 = ((JsonArray)var7.getValue()).iterator();
+                    Iterator<JsonElement> var8 = ((JsonArray)var7.getValue()).iterator(); // olauncher - fix generic
 
                     while(var8.hasNext()) {
                         JsonElement var9 = (JsonElement)var8.next();
@@ -53,7 +53,7 @@ public class PropertyMap extends ForwardingMultimap<String, Property> {
                     }
                 }
             } else if (var1 instanceof JsonArray) {
-                Iterator var10 = ((JsonArray)var1).iterator();
+                Iterator<JsonElement> var10 = ((JsonArray)var1).iterator(); // olauncher - fix generic
 
                 while(var10.hasNext()) {
                     JsonElement var11 = (JsonElement)var10.next();
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
index 53a0ec9..adf434b 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
@@ -60,7 +60,7 @@ public class YggdrasilAuthenticationService extends HttpAuthenticationService {
     protected <T extends Response> T makeRequest(URL var1, Object var2, Class<T> var3) throws AuthenticationException {
         try {
             String var4 = var2 == null ? this.performGetRequest(var1) : this.performPostRequest(var1, this.gson.toJson(var2), "application/json");
-            Response var5 = (Response)this.gson.fromJson(var4, var3);
+            T var5 = this.gson.fromJson(var4, var3); // olauncher - use generic
             if (var5 == null) {
                 return null;
             } else if (StringUtils.isNotBlank(var5.getError())) {
diff --git a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
index 6681b03..c5df30c 100644
--- a/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
+++ b/src/main/java/com/mojang/launcher/game/process/GameProcessBuilder.java
@@ -1,5 +1,6 @@
 package com.mojang.launcher.game.process;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
@@ -76,6 +77,6 @@ public class GameProcessBuilder {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("processPath", this.processPath).add("arguments", this.arguments).add("sysOutFilter", this.sysOutFilter).add("directory", this.directory).add("logProcessor", this.logProcessor).toString();
+        return MoreObjects.toStringHelper(this).add("processPath", this.processPath).add("arguments", this.arguments).add("sysOutFilter", this.sysOutFilter).add("directory", this.directory).add("logProcessor", this.logProcessor).toString(); // olauncher - Objects -> MoreObjects
     }
 }
diff --git a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
index 66a7107..2d0aca3 100644
--- a/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
+++ b/src/main/java/com/mojang/launcher/game/process/direct/DirectGameProcess.java
@@ -1,5 +1,6 @@
 package com.mojang.launcher.game.process.direct;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.EvictingQueue;
@@ -48,7 +49,7 @@ public class DirectGameProcess extends AbstractGameProcess {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("process", this.process).add("monitor", this.monitor).toString();
+        return MoreObjects.toStringHelper(this).add("process", this.process).add("monitor", this.monitor).toString(); // olauncher - Objects -> MoreObjects
     }
 
     public void stop() {
diff --git a/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
index d53c3af..d15c531 100644
--- a/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/com/mojang/launcher/updater/LowerCaseEnumTypeAdapterFactory.java
@@ -16,16 +16,17 @@ public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     }
 
     public <T> TypeAdapter<T> create(Gson var1, TypeToken<T> var2) {
-        Class var3 = var2.getRawType();
+        // olauncher - fix generics
+        Class<? super T> var3 = var2.getRawType();
         if (!var3.isEnum()) {
             return null;
         } else {
-            final HashMap var4 = new HashMap();
-            Object[] var5 = var3.getEnumConstants();
+            final HashMap<String, T> var4 = new HashMap<>();
+            T[] var5 = (T[])var3.getEnumConstants();
             int var6 = var5.length;
 
             for(int var7 = 0; var7 < var6; ++var7) {
-                Object var8 = var5[var7];
+                T var8 = var5[var7];
                 var4.put(this.toLowercase(var8), var8);
             }
 
diff --git a/src/main/java/com/mojang/util/QueueLogAppender.java b/src/main/java/com/mojang/util/QueueLogAppender.java
index cfa709b..1abc840 100644
--- a/src/main/java/com/mojang/util/QueueLogAppender.java
+++ b/src/main/java/com/mojang/util/QueueLogAppender.java
@@ -56,18 +56,19 @@ public class QueueLogAppender extends AbstractAppender {
             }
 
             QUEUE_LOCK.writeLock().lock();
-            Object var6 = (BlockingQueue)QUEUES.get(var4);
+            BlockingQueue<String> var6 = QUEUES.get(var4); // olauncher - fix type
             if (var6 == null) {
-                var6 = new LinkedBlockingQueue();
+                var6 = new LinkedBlockingQueue<>(); // olauncher - fix generic
                 QUEUES.put(var4, var6);
             }
 
             QUEUE_LOCK.writeLock().unlock();
             if (var2 == null) {
-                var2 = PatternLayout.createLayout((String)null, (Configuration)null, (RegexReplacement)null, (String)null, (String)null);
+                //var2 = PatternLayout.createLayout((String)null, (Configuration)null, (RegexReplacement)null, (String)null, (String)null);
+                var2 = PatternLayout.createDefaultLayout(); // olauncher - fix layout
             }
 
-            return new QueueLogAppender(var0, var3, (Layout)var2, var5, (BlockingQueue)var6);
+            return new QueueLogAppender(var0, var3, var2, var5, var6); // olauncher - remove casts
         }
     }
 
diff --git a/src/main/java/net/minecraft/hopper/HopperService.java b/src/main/java/net/minecraft/hopper/HopperService.java
index 90d2aca..96e7665 100644
--- a/src/main/java/net/minecraft/hopper/HopperService.java
+++ b/src/main/java/net/minecraft/hopper/HopperService.java
@@ -49,7 +49,7 @@ public final class HopperService {
 
     private static <T extends Response> T makeRequest(Proxy var0, URL var1, Object var2, Class<T> var3) throws IOException {
         String var4 = Util.performPost(var1, GSON.toJson(var2), var0, "application/json", true);
-        Response var5 = (Response)GSON.fromJson(var4, var3);
+        T var5 = GSON.fromJson(var4, var3); // olauncher - use generic
         if (var5 == null) {
             return null;
         } else if (var5.getError() != null) {
diff --git a/src/main/java/net/minecraft/launcher/Launcher.java b/src/main/java/net/minecraft/launcher/Launcher.java
index a4849b1..a9a6ee3 100644
--- a/src/main/java/net/minecraft/launcher/Launcher.java
+++ b/src/main/java/net/minecraft/launcher/Launcher.java
@@ -15,6 +15,7 @@ import com.mojang.launcher.versions.CompleteVersion;
 import com.mojang.launcher.versions.Version;
 import com.mojang.util.UUIDTypeAdapter;
 import java.io.File;
+import java.io.FileFilter;
 import java.io.IOException;
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.net.PasswordAuthentication;
@@ -297,14 +298,14 @@ public class Launcher {
                 File var9;
                 do {
                     if (!var5.hasNext()) {
-                        File[] var15 = var3.listFiles(DirectoryFileFilter.DIRECTORY);
+                        File[] var15 = var3.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
                         if (var15 != null) {
                             File[] var16 = var15;
                             int var17 = var15.length;
 
                             for(int var18 = 0; var18 < var17; ++var18) {
                                 var9 = var16[var18];
-                                File[] var19 = var9.listFiles(FileFileFilter.FILE);
+                                File[] var19 = var9.listFiles((FileFilter)FileFileFilter.FILE); // olauncher - cast to FileFilter
                                 if (var19 != null) {
                                     File[] var20 = var19;
                                     int var21 = var19.length;
@@ -422,7 +423,7 @@ public class Launcher {
         var4.add(5, -5);
         Date var5 = var4.getTime();
         if (var2.isDirectory()) {
-            File[] var6 = var2.listFiles(DirectoryFileFilter.DIRECTORY);
+            File[] var6 = var2.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
             if (var6 != null) {
                 File[] var7 = var6;
                 int var8 = var6.length;
@@ -452,14 +453,14 @@ public class Launcher {
         LOGGER.info("Looking for old natives & assets to clean up...");
         AgeFileFilter var2 = new AgeFileFilter(System.currentTimeMillis() - 3600000L);
         if (var1.isDirectory()) {
-            File[] var3 = var1.listFiles(DirectoryFileFilter.DIRECTORY);
+            File[] var3 = var1.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY); // olauncher - cast to FileFilter
             if (var3 != null) {
                 File[] var4 = var3;
                 int var5 = var3.length;
 
                 for(int var6 = 0; var6 < var5; ++var6) {
                     File var7 = var4[var6];
-                    File[] var8 = var7.listFiles(FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2}));
+                    File[] var8 = var7.listFiles((FileFilter)FileFilterUtils.and(new IOFileFilter[]{new PrefixFileFilter(var7.getName() + "-natives-"), var2})); // olauncher - cast to FileFilter
                     if (var8 != null) {
                         File[] var9 = var8;
                         int var10 = var8.length;
diff --git a/src/main/java/net/minecraft/launcher/LauncherConstants.java b/src/main/java/net/minecraft/launcher/LauncherConstants.java
index fe2d1c0..c739732 100644
--- a/src/main/java/net/minecraft/launcher/LauncherConstants.java
+++ b/src/main/java/net/minecraft/launcher/LauncherConstants.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -61,7 +62,7 @@ public class LauncherConstants {
     }
 
     public static String getVersionName() {
-        return (String)Objects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown");
+        return (String)MoreObjects.firstNonNull(LauncherConstants.class.getPackage().getImplementationVersion(), "unknown"); // olauncher - Objects -> MoreObjects
     }
 
     private static LauncherConstants.LauncherProperties getProperties() {
diff --git a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
index 55604d1..957ac0d 100644
--- a/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
+++ b/src/main/java/net/minecraft/launcher/game/GameLaunchDispatcher.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.game;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
@@ -105,7 +106,7 @@ public class GameLaunchDispatcher implements GameRunnerListener {
 
         this.launcher.getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
             public void run() {
-                var5.setVisibility((LauncherVisibilityRule)Objects.firstNonNull(var2.getLauncherVisibilityOnGameClose(), Profile.DEFAULT_LAUNCHER_VISIBILITY));
+                var5.setVisibility((LauncherVisibilityRule)MoreObjects.firstNonNull(var2.getLauncherVisibilityOnGameClose(), Profile.DEFAULT_LAUNCHER_VISIBILITY)); // olauncher - Objects -> MoreObjects
                 VersionSyncInfo var1 = null;
                 if (var4 != null) {
                     var1 = GameLaunchDispatcher.this.launcher.getLauncher().getVersionManager().getVersionSyncInfo(var4);
@@ -155,14 +156,14 @@ public class GameLaunchDispatcher implements GameRunnerListener {
         this.lock.lock();
 
         try {
-            File var1 = (File)Objects.firstNonNull(this.launcher.getProfileManager().getSelectedProfile().getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+            File var1 = (File)MoreObjects.firstNonNull(this.launcher.getProfileManager().getSelectedProfile().getGameDir(), this.launcher.getLauncher().getWorkingDirectory()); // olauncher - Objects -> MoreObjects
             Iterator var2 = this.instances.values().iterator();
 
             while(var2.hasNext()) {
                 MinecraftGameRunner var3 = (MinecraftGameRunner)var2.next();
                 Profile var4 = var3.getSelectedProfile();
                 if (var4 != null) {
-                    File var5 = (File)Objects.firstNonNull(var4.getGameDir(), this.launcher.getLauncher().getWorkingDirectory());
+                    File var5 = (File)MoreObjects.firstNonNull(var4.getGameDir(), this.launcher.getLauncher().getWorkingDirectory()); // olauncher - Objects -> MoreObjects
                     if (var1.equals(var5)) {
                         boolean var6 = true;
                         return var6;
diff --git a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
index 2ddba9a..d77ad7f 100644
--- a/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
+++ b/src/main/java/net/minecraft/launcher/game/MinecraftGameRunner.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.game;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.gson.Gson;
@@ -155,7 +156,7 @@ public class MinecraftGameRunner extends AbstractGameRunner implements GameProce
                 var3.mkdirs();
             }
 
-            GameProcessBuilder var4 = new GameProcessBuilder((String)Objects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir()));
+            GameProcessBuilder var4 = new GameProcessBuilder((String)MoreObjects.firstNonNull(this.selectedProfile.getJavaPath(), OperatingSystem.getCurrentPlatform().getJavaDir())); // olauncher - Objects -> MoreObjects
             var4.withSysOutFilter(new Predicate<String>() {
                 public boolean apply(String var1) {
                     return var1.contains("#@!@#");
diff --git a/src/main/java/net/minecraft/launcher/profile/Profile.java b/src/main/java/net/minecraft/launcher/profile/Profile.java
index 6bf1d94..9de6c6f 100644
--- a/src/main/java/net/minecraft/launcher/profile/Profile.java
+++ b/src/main/java/net/minecraft/launcher/profile/Profile.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.profile;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.Sets;
 import com.mojang.launcher.updater.VersionFilter;
@@ -47,7 +48,7 @@ public class Profile implements Comparable<Profile> {
     }
 
     public String getName() {
-        return (String)Objects.firstNonNull(this.name, "");
+        return (String)MoreObjects.firstNonNull(this.name, ""); // olauncher - Objects -> MoreObjects
     }
 
     public void setName(String var1) {
diff --git a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
index 337403e..32b2ced 100644
--- a/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
+++ b/src/main/java/net/minecraft/launcher/ui/popups/login/LogInForm.java
@@ -116,7 +116,7 @@ public class LogInForm extends JPanel implements ActionListener {
     public void tryLogIn() {
         if (this.authentication.isLoggedIn() && this.authentication.getSelectedProfile() == null && ArrayUtils.isNotEmpty(this.authentication.getAvailableProfiles())) {
             this.popup.setCanLogIn(false);
-            final GameProfile var6 = null;
+            GameProfile var6 = null; // olauncher - move final declaration...
             GameProfile[] var2 = this.authentication.getAvailableProfiles();
             int var3 = var2.length;
 
@@ -132,10 +132,11 @@ public class LogInForm extends JPanel implements ActionListener {
                 var6 = this.authentication.getAvailableProfiles()[0];
             }
 
+            final GameProfile var6Final = var6; // olauncher - ...here
             this.popup.getMinecraftLauncher().getLauncher().getVersionManager().getExecutorService().execute(new Runnable() {
                 public void run() {
                     try {
-                        LogInForm.this.authentication.selectGameProfile(var6);
+                        LogInForm.this.authentication.selectGameProfile(var6Final);
                         LogInForm.this.popup.getMinecraftLauncher().getProfileManager().getAuthDatabase().register(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()), LogInForm.this.authentication);
                         LogInForm.this.popup.setLoggedIn(UUIDTypeAdapter.fromUUID(LogInForm.this.authentication.getSelectedProfile().getId()));
                     } catch (InvalidCredentialsException var2) {
diff --git a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
index ad40fd8..b9ac4df 100644
--- a/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
+++ b/src/main/java/net/minecraft/launcher/updater/CompleteMinecraftVersion.java
@@ -1,5 +1,6 @@
 package net.minecraft.launcher.updater;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -70,33 +71,37 @@ public class CompleteMinecraftVersion implements CompleteVersion {
         this.assets = var1.assets;
         this.jar = var1.jar;
         this.downloads = var1.downloads;
-        Iterator var2;
+        // olauncher - iterator surgery (raw types are no longer cool)
+        //Iterator var2;
+        Iterator<Library> libraryIter;
         if (var1.libraries != null) {
             this.libraries = Lists.newArrayList();
-            var2 = var1.getLibraries().iterator();
+            libraryIter = var1.getLibraries().iterator();
 
-            while(var2.hasNext()) {
-                Library var3 = (Library)var2.next();
+            while(libraryIter.hasNext()) {
+                Library var3 = libraryIter.next();
                 this.libraries.add(new Library(var3));
             }
         }
 
+        Iterator<Entry<ArgumentType, List<Argument>>> argumentIter;
         if (var1.arguments != null) {
             this.arguments = Maps.newEnumMap(ArgumentType.class);
-            var2 = var1.arguments.entrySet().iterator();
+            argumentIter = var1.arguments.entrySet().iterator();
 
-            while(var2.hasNext()) {
-                Entry var4 = (Entry)var2.next();
-                this.arguments.put(var4.getKey(), new ArrayList((Collection)var4.getValue()));
+            while(argumentIter.hasNext()) {
+                Entry<ArgumentType, List<Argument>> var4 = argumentIter.next();
+                this.arguments.put(var4.getKey(), new ArrayList<>(var4.getValue()));
             }
         }
 
+        Iterator<CompatibilityRule> ruleIter;
         if (var1.compatibilityRules != null) {
             this.compatibilityRules = Lists.newArrayList();
-            var2 = var1.compatibilityRules.iterator();
+            ruleIter = var1.compatibilityRules.iterator();
 
-            while(var2.hasNext()) {
-                CompatibilityRule var5 = (CompatibilityRule)var2.next();
+            while(ruleIter.hasNext()) {
+                CompatibilityRule var5 = ruleIter.next();
                 this.compatibilityRules.add(new CompatibilityRule(var5));
             }
         }
@@ -329,29 +334,31 @@ public class CompleteMinecraftVersion implements CompleteVersion {
                 var5.libraries = var6;
             }
 
-            Iterator var9;
+            // olauncher - more iterator surgery
+            Iterator<Entry<ArgumentType, List<Argument>>> var9;
             if (this.arguments != null) {
                 if (var5.arguments == null) {
-                    var5.arguments = new EnumMap(ArgumentType.class);
+                    var5.arguments = new EnumMap<>(ArgumentType.class);
                 }
 
-                Entry var10;
-                Object var12;
-                for(var9 = this.arguments.entrySet().iterator(); var9.hasNext(); ((List)var12).addAll((Collection)var10.getValue())) {
-                    var10 = (Entry)var9.next();
-                    var12 = (List)var5.arguments.get(var10.getKey());
+                Entry<ArgumentType, List<Argument>> var10;
+                List<Argument> var12; // olauncher - fix type
+                for(var9 = this.arguments.entrySet().iterator(); var9.hasNext(); var12.addAll(var10.getValue())) {
+                    var10 = var9.next();
+                    var12 = var5.arguments.get(var10.getKey());
                     if (var12 == null) {
-                        var12 = new ArrayList();
+                        var12 = new ArrayList<>();
                         var5.arguments.put(var10.getKey(), var12);
                     }
                 }
             }
 
+            Iterator<CompatibilityRule> ruleIter;
             if (this.compatibilityRules != null) {
-                var9 = this.compatibilityRules.iterator();
+                ruleIter = this.compatibilityRules.iterator();
 
-                while(var9.hasNext()) {
-                    CompatibilityRule var11 = (CompatibilityRule)var9.next();
+                while(ruleIter.hasNext()) {
+                    CompatibilityRule var11 = ruleIter.next();
                     var5.compatibilityRules.add(new CompatibilityRule(var11));
                 }
             }
@@ -361,7 +368,7 @@ public class CompleteMinecraftVersion implements CompleteVersion {
     }
 
     public CompleteMinecraftVersion getSavableVersion() {
-        return (CompleteMinecraftVersion)Objects.firstNonNull(this.savableVersion, this);
+        return (CompleteMinecraftVersion)MoreObjects.firstNonNull(this.savableVersion, this); // olauncher - Objects -> MoreObjects
     }
 
     public AbstractDownloadInfo getDownloadURL(DownloadType var1) {
@@ -370,7 +377,7 @@ public class CompleteMinecraftVersion implements CompleteVersion {
 
     public AssetIndexInfo getAssetIndex() {
         if (this.assetIndex == null) {
-            this.assetIndex = new AssetIndexInfo((String)Objects.firstNonNull(this.assets, "legacy"));
+            this.assetIndex = new AssetIndexInfo((String)MoreObjects.firstNonNull(this.assets, "legacy")); // olauncher - Objects -> MoreObjects
         }
 
         return this.assetIndex;
diff --git a/src/main/java/net/minecraft/launcher/updater/Library.java b/src/main/java/net/minecraft/launcher/updater/Library.java
index a9da116..32814c0 100644
--- a/src/main/java/net/minecraft/launcher/updater/Library.java
+++ b/src/main/java/net/minecraft/launcher/updater/Library.java
@@ -51,23 +51,25 @@ public class Library {
             this.extract = new ExtractRules(var1.extract);
         }
 
-        Iterator var2;
+        // olauncher - more iterator surgery
+        Iterator<CompatibilityRule> ruleIter;
         if (var1.rules != null) {
-            this.rules = new ArrayList();
-            var2 = var1.rules.iterator();
+            this.rules = new ArrayList<>();
+            ruleIter = var1.rules.iterator();
 
-            while(var2.hasNext()) {
-                CompatibilityRule var3 = (CompatibilityRule)var2.next();
+            while(ruleIter.hasNext()) {
+                CompatibilityRule var3 = ruleIter.next();
                 this.rules.add(new CompatibilityRule(var3));
             }
         }
 
+        Iterator<Entry<OperatingSystem, String>> nativeIter;
         if (var1.natives != null) {
-            this.natives = new LinkedHashMap();
-            var2 = var1.getNatives().entrySet().iterator();
+            this.natives = new LinkedHashMap<>();
+            nativeIter = var1.getNatives().entrySet().iterator();
 
-            while(var2.hasNext()) {
-                Entry var4 = (Entry)var2.next();
+            while(nativeIter.hasNext()) {
+                Entry<OperatingSystem, String> var4 = nativeIter.next();
                 this.natives.put(var4.getKey(), var4.getValue());
             }
         }
diff --git a/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java b/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
index 21dbec3..4e7612f 100644
--- a/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
+++ b/src/main/java/net/minecraft/launcher/updater/LibraryDownloadInfo.java
@@ -15,18 +15,19 @@ public class LibraryDownloadInfo {
     public LibraryDownloadInfo(LibraryDownloadInfo var1) {
         this.artifact = var1.artifact;
         if (var1.classifiers != null) {
-            this.classifiers = new LinkedHashMap();
-            Iterator var2 = var1.classifiers.entrySet().iterator();
+            this.classifiers = new LinkedHashMap<>();
+            // olauncher - iterator surgery
+            Iterator<Entry<String, DownloadInfo>> var2 = var1.classifiers.entrySet().iterator();
 
             while(var2.hasNext()) {
-                Entry var3 = (Entry)var2.next();
-                this.classifiers.put(var3.getKey(), new DownloadInfo((DownloadInfo)var3.getValue()));
+                Entry<String, DownloadInfo> var3 = var2.next();
+                this.classifiers.put(var3.getKey(), new DownloadInfo(var3.getValue())); // olauncher - remove cast
             }
         }
 
     }
 
     public AbstractDownloadInfo getDownloadInfo(String var1) {
-        return (AbstractDownloadInfo)(var1 == null ? this.artifact : (AbstractDownloadInfo)this.classifiers.get(var1));
+        return (var1 == null ? this.artifact : (AbstractDownloadInfo)this.classifiers.get(var1)); // olauncher - remove cast
     }
 }
-- 
2.43.0.windows.1

